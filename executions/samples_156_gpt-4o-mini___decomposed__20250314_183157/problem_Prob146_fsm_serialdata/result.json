{
    "code": "module TopModule (\n    input logic clk,\n    input logic in,\n    input logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n\n// State encoding\ntypedef enum logic [1:0] {\n    IDLE,\n    START,\n    DATA,\n    STOP\n} state_t;\n\nstate_t current_state, next_state;\nlogic [3:0] bit_count;\nlogic [7:0] data_reg;\n\n// Sequential logic for state transition\nalways @(posedge clk) begin\n    if (reset) begin\n        current_state <= IDLE;\n        bit_count <= 0;\n        out_byte <= 8'b0;\n        done <= 1'b0;\n    end else begin\n        current_state <= next_state;\n    end\nend\n\n// Combinational logic for state transitions and output generation\nalways @(*) begin\n    next_state = current_state;\n    done = 1'b0; // Default done signal\n    case (current_state)\n        IDLE: begin\n            if (in == 1'b0) begin // Start bit detected\n                next_state = START;\n                bit_count = 0;\n            end\n        end\n        START: begin\n            next_state = DATA; // Move to data state after start bit\n        end\n        DATA: begin\n            if (bit_count < 8) begin\n                data_reg[bit_count] = in; // Capture data bit\n                bit_count = bit_count + 1;\n            end else begin\n                next_state = STOP; // Move to stop state after collecting 8 bits\n            end\n        end\n        STOP: begin\n            if (in == 1'b1) begin // Stop bit detected\n                done = 1'b1; // Data byte is valid\n                out_byte = data_reg; // Output the received byte\n                next_state = IDLE; // Return to idle state\n            end else begin\n                // Stay in STOP state until valid stop bit is detected\n                next_state = STOP;\n            end\n        end\n    endcase\nend\n\nendmodule",
    "test_results": {
        "num_mismatch": 84,
        "passfail": "R"
    }
}