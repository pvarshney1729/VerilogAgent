{
    "code": "module TopModule (\n    input clk,\n    input load,\n    input [255:0] data,\n    output reg [255:0] q\n);\n    reg [255:0] next_q;\n    reg [7:0] neighbor_count;\n    integer i, j;\n\n    always @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else begin\n            for (i = 0; i < 16; i = i + 1) begin\n                for (j = 0; j < 16; j = j + 1) begin\n                    neighbor_count = 0;\n                    // Count neighbors\n                    for (integer di = -1; di <= 1; di = di + 1) begin\n                        for (integer dj = -1; dj <= 1; dj = dj + 1) begin\n                            if (di == 0 && dj == 0) continue; // skip self\n                            neighbor_count = neighbor_count + q[((i + di + 16) % 16) * 16 + ((j + dj + 16) % 16)];\n                        end\n                    end\n                    \n                    // Determine next state based on neighbor count\n                    case (neighbor_count)\n                        0, 1: next_q[i * 16 + j] = 0;\n                        2: next_q[i * 16 + j] = q[i * 16 + j]; // no change\n                        3: next_q[i * 16 + j] = 1;\n                        default: next_q[i * 16 + j] = 0;\n                    endcase\n                end\n            end\n            q <= next_q;\n        end\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}