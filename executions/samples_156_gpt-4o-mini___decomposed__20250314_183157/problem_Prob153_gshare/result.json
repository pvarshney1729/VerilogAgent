{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic predict_valid,\n    input logic [6:0] predict_pc,\n    output logic predict_taken,\n    output logic [6:0] predict_history,\n    input logic train_valid,\n    input logic train_taken,\n    input logic train_mispredicted,\n    input logic [6:0] train_history,\n    input logic [6:0] train_pc\n);\n    // Internal signals\n    logic [1:0] PHT [127:0]; // Pattern History Table\n    logic [6:0] global_history; // Global history register\n    logic [6:0] index; // Index for PHT\n\n    // Hash function to get index\n    assign index = predict_pc ^ global_history;\n\n    always @(posedge clk) begin\n        if (areset) begin\n            global_history <= 7'b0; // Reset global history\n            // Reset PHT entries\n            integer i;\n            for (i = 0; i < 128; i = i + 1) begin\n                PHT[i] <= 2'b00; // Initialize PHT\n            end\n        end else begin\n            // Prediction logic\n            if (predict_valid) begin\n                predict_taken <= PHT[index][1]; // Predict taken from PHT\n                predict_history <= global_history; // Output current history\n                global_history <= {global_history[5:0], predict_taken}; // Update history\n            end\n\n            // Training logic\n            if (train_valid) begin\n                if (train_mispredicted) begin\n                    global_history <= train_history; // Recover history on misprediction\n                end else begin\n                    global_history <= {global_history[5:0], train_taken}; // Update history\n                end\n                // Update PHT\n                if (train_taken) begin\n                    if (PHT[train_pc ^ global_history] < 2'b11) \n                        PHT[train_pc ^ global_history] <= PHT[train_pc ^ global_history] + 1; // Increment counter\n                end else begin\n                    if (PHT[train_pc ^ global_history] > 2'b00) \n                        PHT[train_pc ^ global_history] <= PHT[train_pc ^ global_history] - 1; // Decrement counter\n                end\n            end\n        end\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}