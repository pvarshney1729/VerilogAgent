{
    "code": "module TopModule (\n    input clk,\n    input reset,\n    input data,\n    input done_counting,\n    input ack,\n    output logic shift_ena,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        DETECT_1,\n        DETECT_11,\n        DETECT_110,\n        SHIFT,\n        COUNTING,\n        DONE\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] shift_counter;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            shift_counter <= 4'b0000;\n            shift_ena <= 1'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (current_state == SHIFT) begin\n            shift_ena <= 1'b1;\n            shift_counter <= shift_counter + 1;\n        end else begin\n            shift_ena <= 1'b0;\n        end\n\n        if (current_state == COUNTING) begin\n            counting <= 1'b1;\n        end else begin\n            counting <= 1'b0;\n        end\n\n        if (current_state == DONE) begin\n            done <= 1'b1;\n        end else begin\n            done <= 1'b0;\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (data) \n                    next_state = DETECT_1;\n            end\n\n            DETECT_1: begin\n                if (data) \n                    next_state = DETECT_11;\n                else \n                    next_state = IDLE;\n            end\n\n            DETECT_11: begin\n                if (data) \n                    next_state = DETECT_110;\n                else \n                    next_state = IDLE;\n            end\n\n            DETECT_110: begin\n                if (data) \n                    next_state = SHIFT;\n                else \n                    next_state = IDLE;\n            end\n\n            SHIFT: begin\n                if (shift_counter == 4'b0011) begin\n                    next_state = COUNTING;\n                    shift_counter <= 4'b0000;\n                end\n            end\n\n            COUNTING: begin\n                if (done_counting) \n                    next_state = DONE;\n            end\n\n            DONE: begin\n                if (ack) \n                    next_state = IDLE;\n            end\n\n            default: next_state = IDLE;\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 2192,
        "passfail": "R"
    }
}