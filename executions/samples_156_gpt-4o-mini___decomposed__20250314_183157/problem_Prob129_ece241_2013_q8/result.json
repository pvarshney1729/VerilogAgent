{
    "code": "module TopModule (\n    input logic clk,\n    input logic aresetn,\n    input logic x,\n    output logic z\n);\n    // State encoding\n    typedef enum logic [1:0] {\n        S0 = 2'b00, // Initial state\n        S1 = 2'b01, // State after '1'\n        S2 = 2'b10  // State after '10'\n    } state_t;\n    \n    state_t current_state, next_state;\n\n    // Asynchronous reset and state transition\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresetn)\n            current_state <= S0;\n        else\n            current_state <= next_state;\n    end\n\n    // Next state logic and output logic\n    always @(*) begin\n        next_state = current_state;\n        z = 1'b0; // Default output\n\n        case (current_state)\n            S0: begin\n                if (x) begin\n                    next_state = S1;\n                end\n            end\n            S1: begin\n                if (!x) begin\n                    next_state = S2;\n                end\n            end\n            S2: begin\n                if (x) begin\n                    z = 1'b1; // Output asserted for '101'\n                    next_state = S1; // Overlapping sequence\n                end else begin\n                    next_state = S0; // Go back to initial state\n                end\n            end\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}