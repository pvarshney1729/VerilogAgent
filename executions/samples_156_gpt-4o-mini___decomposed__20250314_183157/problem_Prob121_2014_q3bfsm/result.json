{
    "code": "module TopModule (\n    input clk,\n    input reset,\n    input x,\n    output reg z\n);\n    reg [2:0] state, next_state;\n\n    // State encoding\n    parameter S0 = 3'b000, \n              S1 = 3'b001, \n              S2 = 3'b010, \n              S3 = 3'b011, \n              S4 = 3'b100;\n\n    // Sequential logic for state transition\n    always @(posedge clk) begin\n        if (reset) \n            state <= S0; \n        else \n            state <= next_state;\n    end\n\n    // Combinational logic for next state\n    always @(*) begin\n        case (state)\n            S0: next_state = (x == 1'b0) ? S0 : S1;\n            S1: next_state = (x == 1'b0) ? S1 : S4;\n            S2: next_state = (x == 1'b0) ? S2 : S1;\n            S3: next_state = (x == 1'b0) ? S1 : S2;\n            S4: next_state = (x == 1'b0) ? S3 : S4;\n            default: next_state = S0; // Default to state 000\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        case (state)\n            S3: z = 1'b1;\n            S4: z = 1'b1;\n            default: z = 1'b0;\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}