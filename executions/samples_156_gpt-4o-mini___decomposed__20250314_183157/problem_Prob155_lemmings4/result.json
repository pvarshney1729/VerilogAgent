{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    typedef enum logic [2:0] {\n        STATE_WALK_LEFT,\n        STATE_WALK_RIGHT,\n        STATE_FALL,\n        STATE_DIG,\n        STATE_SPLAT\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [4:0] fall_counter; // 5 bits to count up to 20\n\n    always_ff @(posedge clk) begin\n        if (areset) begin\n            current_state <= STATE_WALK_LEFT;\n            fall_counter <= 0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == STATE_FALL) begin\n                fall_counter <= fall_counter + 1;\n            end else begin\n                fall_counter <= 0;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        walk_left = 0;\n        walk_right = 0;\n        aaah = 0;\n        digging = 0;\n\n        case (current_state)\n            STATE_WALK_LEFT: begin\n                walk_left = 1;\n                if (!ground) begin\n                    next_state = STATE_FALL;\n                    aaah = 1;\n                end else if (dig) begin\n                    next_state = STATE_DIG;\n                    digging = 1;\n                end else if (bump_right) begin\n                    next_state = STATE_WALK_RIGHT;\n                end\n            end\n\n            STATE_WALK_RIGHT: begin\n                walk_right = 1;\n                if (!ground) begin\n                    next_state = STATE_FALL;\n                    aaah = 1;\n                end else if (dig) begin\n                    next_state = STATE_DIG;\n                    digging = 1;\n                end else if (bump_left) begin\n                    next_state = STATE_WALK_LEFT;\n                end\n            end\n\n            STATE_FALL: begin\n                aaah = 1;\n                if (ground) begin\n                    if (fall_counter > 20) begin\n                        next_state = STATE_SPLAT;\n                    end else begin\n                        next_state = (walk_left ? STATE_WALK_LEFT : STATE_WALK_RIGHT);\n                    end\n                end\n            end\n\n            STATE_DIG: begin\n                digging = 1;\n                if (!ground) begin\n                    next_state = STATE_FALL;\n                    aaah = 1;\n                end else if (ground) begin\n                    next_state = (walk_left ? STATE_WALK_LEFT : STATE_WALK_RIGHT);\n                end\n            end\n\n            STATE_SPLAT: begin\n                // All outputs are 0 in this state\n            end\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}