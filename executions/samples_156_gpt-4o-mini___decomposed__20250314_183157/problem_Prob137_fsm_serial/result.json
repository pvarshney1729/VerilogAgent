{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic done\n);\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        START = 3'b001,\n        DATA = 3'b010,\n        STOP = 3'b011\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] bit_count;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            done <= 1'b0;\n            bit_count <= 4'b0000;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always @(*) begin\n        next_state = current_state;\n        done = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin // Start bit detected\n                    next_state = START;\n                end\n            end\n            START: begin\n                bit_count <= 4'b0000; // Reset bit count\n                next_state = DATA; // Move to data state after start bit\n            end\n            DATA: begin\n                if (bit_count < 4'b1000) begin\n                    bit_count <= bit_count + 1; // Count data bits\n                end else begin\n                    next_state = STOP; // Move to stop state after 8 bits\n                end\n            end\n            STOP: begin\n                if (in == 1'b1) begin // Stop bit detected\n                    done = 1'b1; // Signal done\n                    next_state = IDLE; // Go back to idle\n                end else begin\n                    // Stay in STOP until stop bit is detected\n                end\n            end\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 177,
        "passfail": "R"
    }
}