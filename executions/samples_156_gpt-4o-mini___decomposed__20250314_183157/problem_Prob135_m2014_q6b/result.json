{
    "code": "module TopModule (\n    input  logic [2:0] y,\n    input  logic       w,\n    output logic       Y1\n);\n\nlogic [2:0] state, next_state;\n\n// Flip-flops to hold the current state of the FSM\nalways @(posedge clk) begin\n    if (reset) begin\n        state <= 3'b000; // Reset to state A\n    end else begin\n        state <= next_state; // Update to next state\n    end\nend\n\n// Next-state logic\nalways @(*) begin\n    case (state)\n        3'b000: next_state = (w == 1'b0) ? 3'b001 : 3'b000; // A\n        3'b001: next_state = (w == 1'b0) ? 3'b010 : 3'b011; // B\n        3'b010: next_state = (w == 1'b0) ? 3'b100 : 3'b011; // C\n        3'b011: next_state = (w == 1'b0) ? 3'b101 : 3'b000; // D\n        3'b100: next_state = (w == 1'b0) ? 3'b100 : 3'b011; // E\n        3'b101: next_state = (w == 1'b0) ? 3'b010 : 3'b011; // F\n        default: next_state = 3'b000; // Default to state A\n    endcase\nend\n\n// Output logic for Y1\nassign Y1 = (state == 3'b000 && w == 1'b0) ? 1'b0 : // A (0) --0--> B\n            (state == 3'b000 && w == 1'b1) ? 1'b0 : // A (0) --1--> A\n            (state == 3'b001 && w == 1'b0) ? 1'b0 : // B (0) --0--> C\n            (state == 3'b001 && w == 1'b1) ? 1'b0 : // B (0) --1--> D\n            (state == 3'b010 && w == 1'b0) ? 1'b1 : // C (0) --0--> E\n            (state == 3'b010 && w == 1'b1) ? 1'b0 : // C (0) --1--> D\n            (state == 3'b011 && w == 1'b0) ? 1'b1 : // D (0) --0--> F\n            (state == 3'b011 && w == 1'b1) ? 1'b0 : // D (0) --1--> A\n            (state == 3'b100 && w == 1'b0) ? 1'b1 : // E (1) --0--> E\n            (state == 3'b100 && w == 1'b1) ? 1'b0 : // E (1) --1--> D\n            (state == 3'b101 && w == 1'b0) ? 1'b1 : // F (1) --0--> C\n            (state == 3'b101 && w == 1'b1) ? 1'b0 : // F (1) --1--> D\n            1'bx; // undefined state\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "p"
    }
}