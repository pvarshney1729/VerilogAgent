{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n    // State encoding\n    localparam S0 = 3'b000; // Initial state, waiting for 0\n    localparam S1 = 3'b001; // Received 0\n    localparam S2 = 3'b010; // Received 1 (first)\n    localparam S3 = 3'b011; // Received 1 (second)\n    localparam S4 = 3'b100; // Received 1 (third)\n    localparam S5 = 3'b101; // Received 1 (fourth)\n    localparam S6 = 3'b110; // Received 1 (fifth)\n    localparam S7 = 3'b111; // Error state (six or more 1s)\n\n    logic [2:0] state, next_state;\n\n    // Synchronous reset logic\n    always @(posedge clk) begin\n        if (reset) begin\n            state <= S0; // Reset to initial state\n        end else begin\n            state <= next_state; // Transition to next state\n        end\n    end\n\n    // Next state logic and output logic\n    always @(*) begin\n        next_state = state; // Default to hold state\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n\n        case (state)\n            S0: begin\n                if (in) next_state = S1; // Move to S1 on '1'\n            end\n            S1: begin\n                if (in) next_state = S2; // Move to S2 on '1'\n                else next_state = S0; // Move back to S0 on '0'\n            end\n            S2: begin\n                if (in) next_state = S3; // Move to S3 on '1'\n                else next_state = S0; // Move back to S0 on '0'\n            end\n            S3: begin\n                if (in) next_state = S4; // Move to S4 on '1'\n                else next_state = S0; // Move back to S0 on '0'\n            end\n            S4: begin\n                if (in) next_state = S5; // Move to S5 on '1'\n                else next_state = S0; // Move back to S0 on '0'\n            end\n            S5: begin\n                if (in) next_state = S6; // Move to S6 on '1'\n                else next_state = S0; // Move back to S0 on '0'\n            end\n            S6: begin\n                if (in) begin\n                    next_state = S7; // Move to error state on '1'\n                    err = 1'b1; // Signal error\n                end else begin\n                    next_state = S0; // Move back to S0 on '0'\n                    disc = 1'b1; // Signal discard\n                end\n            end\n            S7: begin\n                if (in) begin\n                    err = 1'b1; // Remain in error state\n                end else begin\n                    next_state = S0; // Move back to S0 on '0'\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 85,
        "passfail": "R"
    }
}