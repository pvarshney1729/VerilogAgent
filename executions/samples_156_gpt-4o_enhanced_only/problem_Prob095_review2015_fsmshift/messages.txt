[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output shift_ena\n\nThis module is a part of the FSM for controlling a shift register, we\nwant the ability to enable the shift register for exactly 4 clock cycles\nwhenever the proper bit pattern is detected. Whenever the FSM is reset,\nassert shift_ena for 4 cycles, then 0 forever (until reset). Reset should\nbe active high synchronous.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Specification for TopModule:\n\n1. **Module Name:**\n   - `TopModule`\n\n2. **Ports:**\n   - Input: `clk` (1-bit, Clock Signal)\n   - Input: `reset` (1-bit, Active High Synchronous Reset)\n   - Output: `shift_ena` (1-bit, Shift Register Enable Signal)\n\n3. **Behavioral Description:**\n   - This module is part of a Finite State Machine (FSM) intended for controlling a shift register.\n   - The primary function is to enable the shift register for exactly 4 consecutive clock cycles upon detecting a specified bit pattern.\n   - Upon receiving an active high reset signal, the FSM should assert `shift_ena` for exactly 4 clock cycles and then deassert it (hold it low) indefinitely until the next reset signal.\n\n4. **Clock and Reset:**\n   - All sequential logic should be triggered on the rising edge (positive edge) of `clk`.\n   - The reset is active high and synchronous, meaning it will affect the FSM only on the rising edge of `clk`.\n   - On reset, the FSM should initialize its state to ensure `shift_ena` is asserted for exactly 4 clock cycles.\n\n5. **Signal and Operation Precedence:**\n   - `shift_ena` should be asserted for 4 consecutive clock cycles following a reset.\n   - After these 4 cycles, `shift_ena` should be deasserted and remain deasserted until another reset signal is applied.\n   - The detection logic for the proper bit pattern, which triggers `shift_ena`, is not part of this module specification and should be handled externally.\n\n6. **Sequential Element Initialization:**\n   - All internal registers or state elements responsible for counting the 4 clock cycles must be initialized to ensure correct behavior on reset.\n   - The initial state of the FSM should be defined such that upon reset, it correctly transitions to enable `shift_ena` for the required duration.\n\n7. **Edge Case Handling:**\n   - Ensure that during the 4-cycle enable period, no external conditions or signals can prematurely deassert `shift_ena`.\n   - The module should be robust to glitches on the `clk` signal, maintaining proper operation across the specified clock cycles.\n\n8. **Bit Indexing and Conventions:**\n   - As all ports are 1-bit, there is no need for further bit indexing in this specification.\n\nThis enhanced specification provides a clear guide for implementing the `TopModule` while ensuring correct and consistent behavior as part of an FSM controlling a shift register.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]