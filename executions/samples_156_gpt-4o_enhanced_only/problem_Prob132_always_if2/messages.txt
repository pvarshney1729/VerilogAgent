[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nConsider the following adder-subtractor with a zero flag:\n\n  module TopModule (\n      input      cpu_overheated,\n      output reg shut_off_computer,\n      input      arrived,\n      input      gas_tank_empty,\n      output reg keep_driving\n  );\n\n      always @(*) begin\n          if (cpu_overheated)\n             shut_off_computer = 1;\n      end\n\n      always @(*) begin\n          if (~arrived)\n             keep_driving = ~gas_tank_empty;\n      end\n\n  endmodule\n\nUnfortunately, this module has a bug. Implement a new version of this\nmodule that fixes the bug.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    The module is intended to control two outputs based on specific input conditions, managing a computer shutdown and vehicle driving status. The specification for this module is as follows:\n\nModule Name: TopModule\n\nInputs:\n1. `cpu_overheated` (1-bit, active high): Indicates whether the CPU is overheated.\n2. `arrived` (1-bit, active high): Indicates whether the destination has been reached.\n3. `gas_tank_empty` (1-bit, active high): Indicates whether the gas tank is empty.\n\nOutputs:\n1. `shut_off_computer` (1-bit, active high): Controls whether the computer should be shut off.\n2. `keep_driving` (1-bit, active high): Controls whether to continue driving.\n\nBehavioral Description:\n1. `shut_off_computer` should be asserted (set to 1) whenever `cpu_overheated` is high. It is a combinational logic output.\n2. `keep_driving` should be asserted (set to 1) when `arrived` is low (indicating that the destination has not been reached) and `gas_tank_empty` is low (indicating that there is gas in the tank). This output is also combinational logic.\n\nInitialization and Reset:\n- Since the module does not contain flip-flops or registers, no initial values or reset conditions are required.\n\nClarifications:\n- The module should not rely on any implicit default values for outputs. Both outputs should be explicitly defined for all input conditions.\n- The logic is purely combinational, with no clock dependencies or sequential elements involved.\n- Ensure that precedence and potential race conditions are handled by ensuring each condition independently controls its respective output, as described.\n\nEdge Cases:\n- When both `cpu_overheated` and `arrived` are high, `shut_off_computer` should be high, and `keep_driving` should be low, irrespective of the `gas_tank_empty` signal.\n- When `arrived` is high, `keep_driving` should be low, regardless of the `gas_tank_empty` signal.\n\nThis specification aims to correct the previous bug by ensuring that outputs are defined for all logical conditions without ambiguity.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]