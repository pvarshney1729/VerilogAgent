[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  slowena\n - output q (4 bits)\n\nThe module should implement a decade counter that counts from 0 through\n9, inclusive, with a period of 10. The reset input is active high\nsynchronous, and should reset the counter to 0. We want to be able to\npause the counter rather than always incrementing every clock cycle, so\nthe \"slowena\" input if high indicates when the counter should increment.\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `clk`: 1-bit clock input. The module operates on the rising edge of this signal.\n  - `reset`: 1-bit active-high synchronous reset. Resets the counter to 0 when high on the rising edge of `clk`.\n  - `slowena`: 1-bit control signal. When high, the counter increments; when low, the counter holds its current value.\n\n- Output Ports:\n  - `q`: 4-bit output representing the current count value of the decade counter. The count ranges from 0 to 9.\n\nOperational Details:\n- The module implements a decade counter, cycling through values 0 to 9, inclusive.\n- The counter increments only when `slowena` is high and on the rising edge of `clk`.\n- Upon activation of the `reset` signal on the rising edge of `clk`, the counter `q` is set to 0 regardless of the state of `slowena`.\n- The counter holds its value if `slowena` is low on the rising edge of `clk`.\n\nBit Indexing:\n- Bit indexing for `q` is such that `q[3]` represents the most significant bit (MSB), and `q[0]` represents the least significant bit (LSB).\n\nEdge Cases and Initial Conditions:\n- The counter initializes to 0 at the start of the simulation or upon reset.\n- If the counter reaches 9 and `slowena` is high on the next clock edge, it wraps around to 0.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]