[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  data\n - input  done_counting\n - input  ack\n - output shift_ena\n - output counting\n - output done\n\nThe module should implement a timer that:\n\n  (1) is started when a particular pattern (1101) is detected,\n  (2) shifts in 4 more bits to determine the duration to delay,\n  (3) waits for the counters to finish counting, and\n  (4) notifies the user and waits for the user to acknowledge the timer.\n\nIn this problem, implement just the finite-state machine that controls\nthe timer. The data path (counters and some comparators) are not included\nhere.\n\nThe serial data is available on the data input pin. When the pattern 1101\nis received, the state machine must then assert output shift_ena for\nexactly 4 clock cycles. After that, the state machine asserts its\ncounting output to indicate it is waiting for the counters, and waits\nuntil input done_counting is high.At that point, the state machine must\nassert done to notify the user the timer has timed out, and waits until\ninput ack is 1 before being reset to look for the next occurrence of the\nstart sequence (1101). The state machine should have a active high\nsynchronous reset, setting the state to where it begins searching for the\ninput sequence 1101. Assume all sequential logic is triggered on the\npositive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    The module named `TopModule` shall have the following interface. All input and output ports are 1-bit wide unless otherwise specified:\n\n- Input Ports:\n  - `clk`: Clock signal, positive edge-triggered.\n  - `reset`: Active high, synchronous reset signal.\n  - `data`: Serial data input for pattern detection and additional bits.\n  - `done_counting`: Indicates the completion of the counting process.\n  - `ack`: User acknowledgment signal after timer completion.\n\n- Output Ports:\n  - `shift_ena`: Enable signal for shifting in additional bits.\n  - `counting`: Indicates the state machine is in the counting phase.\n  - `done`: Notifies the user that the timer has completed.\n\nThe module shall implement a finite-state machine (FSM) that performs the following:\n\n1. **Pattern Detection**: The FSM begins in an initial state where it continuously monitors the `data` input for the bit pattern `1101`. This detection is bit-serial, with `bit[0]` referring to the least significant bit.\n\n2. **Shift Enable**: Upon detecting the pattern `1101`, the FSM transitions to a state where it asserts the `shift_ena` output for exactly 4 consecutive clock cycles. During this time, it shifts in 4 additional bits from the `data` input to determine the delay duration (data path processing not included here).\n\n3. **Counting Phase**: After the 4 clock cycles, the FSM asserts the `counting` output, indicating it is in the counting phase. It remains in this state until the `done_counting` input is asserted high, signifying the completion of the counting process.\n\n4. **Notification and Acknowledgment**: Once `done_counting` is high, the FSM asserts the `done` output to notify the user that the timer has completed. It waits in this state until the `ack` input is asserted high, indicating the user has acknowledged the notification.\n\n5. **Reset and Restart**: The FSM returns to the initial state to begin searching for the next occurrence of the pattern `1101` upon receiving an acknowledgment (`ack` high).\n\n- **Reset Behavior**: The synchronous reset (`reset` high) initializes the FSM to the state where it begins searching for the `1101` pattern. All sequential elements are reset to their initial conditions during this operation.\n\n- **Clocking**: All sequential logic within the FSM is triggered on the positive edge of the `clk` signal.\n\nEdge cases and input boundaries should assume that the input `data` stream is continuous and that the FSM correctly detects overlapping patterns, if present.\n\nNote: The data path elements such as counters and comparators are outside the scope of this specification and should be implemented separately.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]