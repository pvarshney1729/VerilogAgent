[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  code (8 bits)\n - output out  (4 bits)\n - output valid\n\nThe module should recognize 8-bit keyboard scancodes for keys 0 through\n9. It should indicate whether one of the 10 cases were recognized\n(valid), and if so, which key was detected. If the 8-bit input is 8'h45,\n8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the\n4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively,\nthe 1-bit valid would be set to 1. If the input does not match any of the\ncases, both output signals would be set to 0.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input wire [7:0] code`: An 8-bit unsigned input representing a keyboard scancode. \n    - Bit Indexing: `code[7]` is the most significant bit (MSB), and `code[0]` is the least significant bit (LSB).\n- Output Ports:\n  - `output reg [3:0] out`: A 4-bit unsigned output that indicates the detected key number (0-9).\n    - Bit Indexing: `out[3]` is the MSB, and `out[0]` is the LSB.\n  - `output reg valid`: A 1-bit output that indicates the recognition status of the input code.\n\nFunctionality:\n- The module is combinational in nature and does not require a clock or reset signal.\n- When the `code` input matches any of the following 8-bit hexadecimal values, the `out` and `valid` outputs are set as follows:\n  - `code == 8'h45`: `out = 4'b0000`, `valid = 1'b1` (Key '0')\n  - `code == 8'h16`: `out = 4'b0001`, `valid = 1'b1` (Key '1')\n  - `code == 8'h1e`: `out = 4'b0010`, `valid = 1'b1` (Key '2')\n  - `code == 8'h26`: `out = 4'b0011`, `valid = 1'b1` (Key '3')\n  - `code == 8'h25`: `out = 4'b0100`, `valid = 1'b1` (Key '4')\n  - `code == 8'h2e`: `out = 4'b0101`, `valid = 1'b1` (Key '5')\n  - `code == 8'h36`: `out = 4'b0110`, `valid = 1'b1` (Key '6')\n  - `code == 8'h3d`: `out = 4'b0111`, `valid = 1'b1` (Key '7')\n  - `code == 8'h3e`: `out = 4'b1000`, `valid = 1'b1` (Key '8')\n  - `code == 8'h46`: `out = 4'b1001`, `valid = 1'b1` (Key '9')\n- For any other `code` input not matching the above cases, the outputs are set to:\n  - `out = 4'b0000`\n  - `valid = 1'b0`\n\nBehavioral edge cases:\n- The outputs (`out` and `valid`) are defaulted to the state representing no valid key detected (`out = 4'b0000`, `valid = 1'b0`) when `code` does not match any specified scancode.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]