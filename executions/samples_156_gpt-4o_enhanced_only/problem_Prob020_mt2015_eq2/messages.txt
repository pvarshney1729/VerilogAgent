[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  A (2 bits)\n - input  B (2 bits)\n - output z\n\nThe module should implement a circuit that has two 2-bit inputs A[1:0]\nand B[1:0], and produces an output z. The value of z should be 1 if A =\nB, otherwise z should be 0.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    The module to be implemented is named `TopModule` and has the following interface. The ports are defined as:\n\n- Input: `A`, a 2-bit vector, denoted as `A[1:0]`, where `A[1]` is the most significant bit (MSB) and `A[0]` is the least significant bit (LSB).\n- Input: `B`, a 2-bit vector, denoted as `B[1:0]`, where `B[1]` is the MSB and `B[0]` is the LSB.\n- Output: `z`, a 1-bit signal.\n\nThe module should implement combinational logic that compares the two 2-bit inputs `A` and `B`. The output `z` should be set to logic high ('1') if and only if the value of vector `A` is equal to the value of vector `B`. Otherwise, the output `z` should be set to logic low ('0').\n\nThe comparison is bitwise and does not involve any signed arithmetic; hence, the comparison is straightforward equality between the two vectors.\n\nConsiderations:\n- There are no clock signals or sequential elements involved in this module, as the logic is purely combinational.\n- Inputs `A` and `B` are expected to be valid and stable for the duration of the operation, ensuring that the output `z` reflects the correct comparison result at all times.\n- There are no additional conditions or edge cases beyond the specified comparison of the bit vectors.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]