[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (10 bits)\n\nThe module should implement a counter that counts from 0 to 999,\ninclusive, with a period of 1000 cycles. Assume all sequential logic is\ntriggered on the positive edge of the clock. The reset input is active\nhigh synchronous, and should reset the counter to 0.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input wire clk`: Clock signal, used to trigger all sequential logic on its positive edge.\n  - `input wire reset`: Active-high synchronous reset signal, resets the counter to 0 on the rising edge of clk when high.\n\n- Output Ports:\n  - `output reg [9:0] q`: 10-bit output representing the current count value, where q[9] is the most significant bit (MSB) and q[0] is the least significant bit (LSB).\n\nFunctional Description:\n- The module implements a binary counter that counts from 0 to 999, inclusive. The counter has a period of 1000 clock cycles.\n- The counter increments its value by 1 on each positive edge of the clock.\n- When the counter reaches 999 and a further clock edge occurs, it wraps around and continues counting from 0.\n\nReset Behavior:\n- The reset input is synchronous with the clock. When `reset` is asserted (high) during a clock cycle, the counter will reset to 0 on the next positive edge of `clk`.\n- Ensure that the counter output `q` is set to 0 when the reset signal is active during the rising edge of the clock.\n\nInitial Conditions:\n- Upon initialization, the counter should start at 0. This can be assumed as the default state post-reset.\n\nEdge Cases:\n- If the counter is at its maximum value of 999 and a positive clock edge occurs without an active reset, the counter should wrap around to 0.\n- The counter should correctly handle the rollover from 999 to 0 without any glitches or race conditions.\n\nTiming and Logic:\n- All logic is synchronous and should be designed to avoid hazards and race conditions that might affect the counter's correct operation.\n- Ensure that the counter value `q` is updated only on the rising edge of the clock and reflects the correct count value for each clock cycle.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]