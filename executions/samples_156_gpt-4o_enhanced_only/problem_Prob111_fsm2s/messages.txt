[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  j\n - input  k\n - output out\n\nThe module should implement a Moore state machine with two states, two\ninputs, and one output according to diagram described below. Reset is an\nactive-high synchronous reset to state OFF.\n\n  OFF (out=0) --j=0--> OFF\n  OFF (out=0) --j=1--> ON\n  ON  (out=1) --k=0--> ON\n  ON  (out=1) --k=1--> OFF\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nPort Definitions:\n- input  wire clk: Clock signal for the module. It is a single bit.\n- input  wire reset: Active-high synchronous reset signal. It is a single bit that resets the state machine to the OFF state.\n- input  wire j: Input signal that influences state transitions. It is a single bit.\n- input  wire k: Input signal that influences state transitions. It is a single bit.\n- output reg out: Output signal representing the current state output. It is a single bit.\n\nState Machine Specifications:\n- This module implements a Moore state machine with two states: OFF and ON.\n- The state machine transitions are determined by inputs j and k as follows:\n  - OFF (state): \n    - Output 'out' is 0.\n    - Transition to ON when j = 1.\n    - Remain in OFF when j = 0.\n  - ON (state):\n    - Output 'out' is 1.\n    - Transition to OFF when k = 1.\n    - Remain in ON when k = 0.\n\nReset Behavior:\n- The reset is a synchronous reset that occurs on the rising edge of 'clk'.\n- When 'reset' is asserted high, the state machine transitions to the OFF state, and 'out' is set to 0.\n\nClock Cycle and Sequential Logic:\n- State transitions occur on the rising edge of 'clk'.\n- The output 'out' is updated based on the current state at each rising edge of 'clk'.\n\nInitial Conditions:\n- Upon initialization, or when reset is activated, the state machine starts in the OFF state with 'out' = 0.\n\nBit Indexing and Conventions:\n- All signals are single-bit width.\n- No specific MSB/LSB or bit indexing applies beyond single-bit interpretation.\n\nEdge Cases:\n- The state machine does not handle simultaneous assertions of j and k. The behavior is determined by the current state and the active edge of the clock.\n- Ensure the clock period accommodates the setup and hold times for the synchronous reset signal.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]