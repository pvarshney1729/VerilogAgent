[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  j\n - input  k\n - output out\n\nThe module should implement a Moore state machine with two states, two\ninputs, and one output according to diagram described below. Reset is an\nactive-high asynchronous reset to state OFF.\n\n  OFF (out=0) --j=0--> OFF\n  OFF (out=0) --j=1--> ON\n  ON  (out=1) --k=0--> ON\n  ON  (out=1) --k=1--> OFF\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input wire clk` : Clock signal for synchronizing state transitions.\n  - `input wire areset` : Active-high asynchronous reset signal.\n  - `input wire j` : Input signal that influences state transitions.\n  - `input wire k` : Input signal that influences state transitions.\n- Output Ports:\n  - `output reg out` : Output signal representing the current state output.\n\nPort and Signal Details:\n- All input and output ports are 1-bit wide.\n- The output `out` is a registered output reflecting the state of the Moore machine.\n\nState Machine Description:\n- This module implements a Moore state machine with two states: `OFF` and `ON`.\n- State `OFF` is represented by the binary state of 0, and state `ON` is represented by the binary state of 1.\n- The output `out` is directly associated with the current state: \n  - `OFF` state produces `out = 0`\n  - `ON` state produces `out = 1`\n\nState Transition Logic:\n- From state `OFF` (out=0):\n  - If `j = 0`, remain in `OFF`.\n  - If `j = 1`, transition to `ON`.\n- From state `ON` (out=1):\n  - If `k = 0`, remain in `ON`.\n  - If `k = 1`, transition to `OFF`.\n\nReset Behavior:\n- The reset signal `areset` is an active-high asynchronous reset.\n- When `areset` is asserted high, the state machine transitions immediately to the `OFF` state, regardless of the clock signal.\n- Upon reset, the output `out` is set to 0.\n\nClock and Timing:\n- State transitions occur on the rising edge of the `clk` signal, except during an active asynchronous reset.\n\nInitial Conditions:\n- The initial state of the state machine is `OFF` with `out = 0` upon power-up or reset.\n\nSignal Dependencies and Precedence:\n- The transitions are determined by the inputs `j` and `k`, evaluated on the rising edge of `clk`.\n- Asynchronous reset `areset` takes precedence over the clock-driven transitions.\n\nEdge Cases:\n- Ensure robustness by defining behavior under all possible input combinations.\n- Maintain defined transition logic even during rapid changes in input signals `j` and `k`.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]