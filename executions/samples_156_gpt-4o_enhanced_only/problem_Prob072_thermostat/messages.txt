[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  mode\n - input  too_cold\n - input  too_hot\n - input  fan_on\n - output heater\n - output aircon\n - output fan\n\nThe module should implement a heating/cooling thermostat controller which\ncontrols both a heater (during winter) and an air conditioner (during\nsummer). The module should on and off the heater, air conditioning, and\nblower fan as appropriate. The thermostat can be in one of two modes:\nheating (mode = 1) and cooling (mode = 0). In heating mode, turn the\nheater on when it is too cold (too_cold = 1) but do not use the air\nconditioner. In cooling mode, turn the air conditioner on when it is too\nhot (too_hot = 1), but do not turn on the heater. When the heater or air\nconditioner are on, also turn on the fan to circulate the air. In\naddition, the user can also request the fan to turn on (fan_on = 1), even\nif the heater and air conditioner are off.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInputs:\n- `input wire mode`: 1-bit input determining the mode of operation; heating mode if `mode = 1`, cooling mode if `mode = 0`.\n- `input wire too_cold`: 1-bit input signal indicating if the temperature is below the desired level; active high.\n- `input wire too_hot`: 1-bit input signal indicating if the temperature is above the desired level; active high.\n- `input wire fan_on`: 1-bit input signal allowing manual control to turn the fan on; active high.\n\nOutputs:\n- `output reg heater`: 1-bit output to control the heater; active high.\n- `output reg aircon`: 1-bit output to control the air conditioner; active high.\n- `output reg fan`: 1-bit output to control the blower fan; active high.\n\nBehavioral Specification:\n1. The module operates as a thermostat controller with two modes: heating and cooling.\n2. Mode Selection:\n   - Heating Mode (`mode = 1`):\n     - Turn on the `heater` (`heater = 1`) when `too_cold = 1`.\n     - Do not activate the `aircon` (`aircon = 0`) in this mode.\n   - Cooling Mode (`mode = 0`):\n     - Turn on the `aircon` (`aircon = 1`) when `too_hot = 1`.\n     - Do not activate the `heater` (`heater = 0`) in this mode.\n3. Fan Control:\n   - The `fan` must be turned on (`fan = 1`) whenever the `heater` or `aircon` is active.\n   - The `fan` can also be manually activated by the user via the `fan_on` input (`fan_on = 1`), independently of `heater` or `aircon` status.\n4. All registers are initialized to 0 on reset.\n\nClock and Reset:\n- The module is purely combinational and does not require a clock signal.\n- All output registers assume an initial state of 0 at the start of operation or upon reset.\n\nEdge Cases and Input Boundaries:\n- The outputs follow a priority where the `fan` should be turned on if either `heater` or `aircon` is active, or if `fan_on` is 1.\n- In scenarios where `too_cold` and `too_hot` are both high, the mode determines the active output (heater or aircon), ensuring no conflicting states occur.\n\nNote: This specification does not cover sequential behavior as the module is intended to operate in a combinational manner.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]