{
    "code": "module TopModule(\n    input logic clk,\n    input logic resetn,\n    input logic [2:0] r,\n    output logic [2:0] g\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        STATE_A = 2'b00,\n        STATE_B = 2'b01,\n        STATE_C = 2'b10,\n        STATE_D = 2'b11\n    } state_t;\n    \n    state_t current_state, next_state;\n\n    // State flip-flops with synchronous reset\n    always_ff @(posedge clk) begin\n        if (!resetn) begin\n            current_state <= STATE_A;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // State transition logic\n    always_comb begin\n        case (current_state)\n            STATE_A: begin\n                if (r[0])\n                    next_state = STATE_B;\n                else if (r[1])\n                    next_state = STATE_C;\n                else if (r[2])\n                    next_state = STATE_D;\n                else\n                    next_state = STATE_A;\n            end\n            STATE_B: begin\n                if (r[0])\n                    next_state = STATE_B;\n                else\n                    next_state = STATE_A;\n            end\n            STATE_C: begin\n                if (r[1])\n                    next_state = STATE_C;\n                else\n                    next_state = STATE_A;\n            end\n            STATE_D: begin\n                // Since STATE_D is only entered when r[2] is 1 and no higher priority requests,\n                // it stays in STATE_D as long as r[2] is 1.\n                if (r[2])\n                    next_state = STATE_D;\n                else\n                    next_state = STATE_A;\n            end\n            default: next_state = STATE_A;\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        // Default all grants to 0\n        g = 3'b000;\n        case (current_state)\n            STATE_B: g[0] = 1'b1; // Grant for device 0\n            STATE_C: g[1] = 1'b1; // Grant for device 1\n            STATE_D: g[2] = 1'b1; // Grant for device 2\n            default: g = 3'b000; // No grants\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}