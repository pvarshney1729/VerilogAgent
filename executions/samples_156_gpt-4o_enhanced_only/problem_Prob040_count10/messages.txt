[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (4 bits)\n\nThe module should implement a decade counter that counts from 0 through\n9, inclusive, with a period of 10. Assume all sequential logic is\ntriggered on the positive edge of the clock. The reset input is active\nhigh synchronous, and should reset the counter to 0.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input: \n  - clk: 1-bit clock signal, positive edge-triggered.\n  - reset: 1-bit active-high synchronous reset signal.\n- Output: \n  - q: 4-bit output representing the current count value.\n\nFunctional Description:\n- The module implements a decade counter that counts from 0 to 9, inclusive.\n- The counter is incremented by 1 on each positive edge of the clock signal (clk).\n- The reset signal is synchronous and active-high. When reset is high, the counter resets to 0 on the next positive edge of the clock.\n- The counter output 'q' should have the following characteristics:\n  - Bit[3] is the most significant bit (MSB) and bit[0] is the least significant bit (LSB).\n\nInitial Conditions:\n- On reset, the counter initializes to a value of 0.\n\nEdge Cases and Special Conditions:\n- After reaching the value 9 (binary 1001), the counter will wrap around to 0 on the next clock cycle.\n- Ensure all transitions and operations are free from race conditions and handled within the clock cycle.\n\nOperational Constraints:\n- All operations are governed by the positive edge of the clock signal.\n- The counter must handle the synchronous reset appropriately within the same clock cycle edge.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]