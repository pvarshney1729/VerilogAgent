[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  x   (4 bits)\n - input  y   (4 bits)\n - output sum (5 bits)\n\nImplement a 4-bit adder with full adders. The output sum should include\nthe overflow bit.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input [3:0] x`: A 4-bit unsigned input vector, where bit[0] refers to the least significant bit (LSB).\n  - `input [3:0] y`: A 4-bit unsigned input vector, similarly indexed with bit[0] as the LSB.\n- Output Ports:\n  - `output [4:0] sum`: A 5-bit unsigned output vector, capturing the result of the addition. The most significant bit (bit[4]) represents the overflow.\n\nFunctional Description:\n- The module implements a 4-bit binary adder using full adders.\n- The addition of `x` and `y` results in a 5-bit `sum`, where sum[3:0] represents the sum of `x` and `y`, and sum[4] represents the carry-out (overflow) from the most significant bit of the addition.\n\nAdditional Details:\n- The adder logic is combinational, meaning the output `sum` is continuously driven by the current inputs `x` and `y` without any clock or sequential logic involved.\n- No asynchronous or synchronous reset is required since the logic is purely combinational and stateless.\n- Inputs `x` and `y` are treated as unsigned binary numbers, and the adder should handle all possible input combinations without additional overflow checks beyond the 5-bit sum representation.\n\nEdge Cases:\n- All possible input combinations (from 0000 to 1111 for both `x` and `y`) must be correctly handled, with `sum` accurately reflecting the binary addition.\n- The maximum value of `x` and `y` is 15 (binary 1111), resulting in a maximum `sum` of 30 (binary 11110), where sum[4] is the overflow bit.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]