[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  a (8 bits)\n - input  b (8 bits)\n - output s (8 bits)\n - output overflow\n\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0].\nThe module should add these numbers to produce s[7:0]. Also compute\nwhether a (signed) overflow has occurred.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nPort Definitions:\n- Input: \n  - a: 8-bit signed input. Bit indexing: a[7] is the most significant bit (MSB), a[0] is the least significant bit (LSB).\n  - b: 8-bit signed input. Bit indexing: b[7] is the MSB, b[0] is the LSB.\n- Output:\n  - s: 8-bit signed output. Bit indexing: s[7] is the MSB, s[0] is the LSB.\n  - overflow: 1-bit output, indicates whether a signed overflow has occurred.\n\nFunctional Description:\n- The module performs the addition of two 8-bit 2's complement numbers, a and b.\n- The result of the addition is stored in s[7:0].\n- Overflow detection: The overflow output should be set to '1' if a signed overflow occurs. Signed overflow occurs if:\n  - Both a[7] and b[7] are '0', and s[7] is '1' (positive overflow).\n  - Both a[7] and b[7] are '1', and s[7] is '0' (negative overflow).\n- In all other cases, the overflow output should be '0'.\n\nAdditional Notes:\n- The module is entirely combinational and does not include any registers or clock inputs.\n- The behavior of the module is purely based on the current values of inputs a and b.\n- Ensure all calculations respect 2's complement arithmetic rules.\n- No initial values or reset conditions are required as the design does not include any sequential logic elements.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]