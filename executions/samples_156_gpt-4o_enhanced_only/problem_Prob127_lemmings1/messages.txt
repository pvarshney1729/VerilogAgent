[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  bump_left\n - input  bump_right\n - output walk_left\n - output walk_right\n\nThe module should implement a simple game called Lemmings which involves\ncritters with fairly simple brains. So simple that we are going to model\nit using a finite state machine. In the Lemmings' 2D world, Lemmings can\nbe in one of two states: walking left (walk_left is 1) or walking right\n(walk_right is 1). It will switch directions if it hits an obstacle. In\nparticular, if a Lemming is bumped on the left (by receiving a 1 on\nbump_left), it will walk right. If it's bumped on the right (by receiving\na 1 on bump_right), it will walk left. If it's bumped on both sides at\nthe same time, it will still switch directions.\n\nThe module should implement a Moore state machine with two states, two\ninputs, and one output (internal to the module) that models this\nbehaviour. areset is positive edge triggered asynchronous resetting the\nLemming machine to walk left. Assume all sequential logic is triggered on\nthe positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nPort Definitions:\n- input wire clk: Clock signal. All sequential operations occur on the positive edge of this clock.\n- input wire areset: Asynchronous reset signal. Active high, resets the module to the initial state.\n- input wire bump_left: Active high signal indicating an obstacle on the left.\n- input wire bump_right: Active high signal indicating an obstacle on the right.\n- output reg walk_left: Indicates the Lemming is walking left. A high signal (1) represents walking left.\n- output reg walk_right: Indicates the Lemming is walking right. A high signal (1) represents walking right.\n\nState Machine Description:\n- The module implements a Moore state machine with two states:\n  1. State 0 (Walking Left): walk_left = 1, walk_right = 0.\n  2. State 1 (Walking Right): walk_left = 0, walk_right = 1.\n\nState Transition Logic:\n- Initial State: On areset, the state machine resets to the Walking Left state, regardless of other inputs.\n- Transition from Walking Left to Walking Right: Occurs on the next clock edge if bump_left is high.\n- Transition from Walking Right to Walking Left: Occurs on the next clock edge if bump_right is high.\n- If both bump_left and bump_right are high simultaneously, the Lemming will switch directions.\n\nReset Behavior:\n- The areset signal is asynchronous and resets the state machine to the Walking Left state on its positive edge.\n- During reset, walk_left is set to 1 and walk_right to 0.\n\nSignal Conventions:\n- bit[0] refers to the least significant bit in any multi-bit signal.\n- All state transitions and output updates occur synchronously with the clock, except for the asynchronous reset.\n\nEdge Cases:\n- If bump_left and bump_right are both 0, the Lemming continues walking in its current direction.\n- Simultaneous high signals on bump_left and bump_right will cause a direction switch.\n\nEnsure that all state transitions and outputs are defined according to the above logic to maintain correct functionality.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]