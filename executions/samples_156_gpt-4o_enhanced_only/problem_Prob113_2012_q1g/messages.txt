[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  x (4 bits)\n - output f\n\nThe module should implement the function f shown in the Karnaugh map\nbelow.\n\n             x[0]x[1]\nx[2]x[3]  00  01  11  10\n  00     | 1 | 0 | 0 | 1 |\n  01     | 0 | 0 | 0 | 0 |\n  11     | 1 | 1 | 1 | 0 |\n  10     | 1 | 1 | 0 | 1 |\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input [3:0] x`: A 4-bit unsigned input vector. Bit indexing follows the convention where `x[0]` is the least significant bit (LSB) and `x[3]` is the most significant bit (MSB).\n- Output Ports:\n  - `output f`: A single-bit output representing the result of the function defined by the Karnaugh map.\n\nFunctional Specification:\n- The module computes the output `f` based on the 4-bit input vector `x` using a combinational logic function defined by the following Karnaugh map:\n\n             x[0]x[1]\n  x[2]x[3]  00  01  11  10\n    00     | 1 | 0 | 0 | 1 |\n    01     | 0 | 0 | 0 | 0 |\n    11     | 1 | 1 | 1 | 0 |\n    10     | 1 | 1 | 0 | 1 |\n\n- The Karnaugh map should be interpreted as follows:\n  - Each cell in the map corresponds to a specific combination of `x[3:0]`.\n  - The rows represent the values of `x[2:3]` in binary order, and the columns represent `x[0:1]`.\n  - The value within each cell (either 0 or 1) indicates the output `f` for that specific combination of input values.\n\nAdditional Notes:\n- This specification assumes combinational logic, meaning the output `f` is directly computed from the current value of `x` without any clock or reset dependencies.\n- There are no sequential elements or state dependencies within this module.\n- The output `f` is updated instantaneously with any change in the input `x`, reflecting the nature of combinational logic.\n- The behavior for all possible input values of `x` (from 4'b0000 to 4'b1111) is explicitly defined by the Karnaugh map.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]