[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  x\n - input  y (3 bits)\n - output Y0\n - output z\n\nThe module should implement the output logic and next state logic for an\nFSM using the table shown below. Note that the output Y0 is Y[0] of the\nnext state signal.\n\n   Present state input y[2:0] | Next state Y[2:0] when x=0, Next state Y[2:0] when x=1 | Output z\n   000 | 000, 001 | 0\n   001 | 001, 100 | 0\n   010 | 010, 001 | 0\n   011 | 001, 010 | 1\n   100 | 011, 100 | 1\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - input wire clk: Clock signal for synchronous operations (1-bit).\n  - input wire x: Control input signal (1-bit).\n  - input wire [2:0] y: Present state input signal (3-bit vector, with y[2] as the most significant bit (MSB) and y[0] as the least significant bit (LSB)).\n\n- Output Ports:\n  - output wire Y0: Output bit from the next state vector, specifically Y[0] (1-bit).\n  - output wire z: Output signal based on the FSM state and transitions (1-bit).\n\nFSM Description:\n- The module implements a finite state machine (FSM) with the following characteristics:\n  - The FSM has a synchronous reset and is triggered on the rising edge of the clock signal.\n  - The present state is represented by a 3-bit vector y[2:0].\n  - The next state, denoted as Y[2:0], is determined based on the current state y[2:0] and input x.\n  \nState Transition Table:\n- Present state y[2:0] transitions to the next state Y[2:0] based on input x:\n  - When y = 3'b000:\n    - If x = 0, next state Y = 3'b000.\n    - If x = 1, next state Y = 3'b001.\n    - Output z = 0.\n  - When y = 3'b001:\n    - If x = 0, next state Y = 3'b001.\n    - If x = 1, next state Y = 3'b100.\n    - Output z = 0.\n  - When y = 3'b010:\n    - If x = 0, next state Y = 3'b010.\n    - If x = 1, next state Y = 3'b001.\n    - Output z = 0.\n  - When y = 3'b011:\n    - If x = 0, next state Y = 3'b001.\n    - If x = 1, next state Y = 3'b010.\n    - Output z = 1.\n  - When y = 3'b100:\n    - If x = 0, next state Y = 3'b011.\n    - If x = 1, next state Y = 3'b100.\n    - Output z = 1.\n\nOutputs:\n- The output Y0 is the least significant bit (LSB) of the next state vector Y[0].\n- The output z is determined by the current state and is independent of input x, as described in the state transition table.\n\nInitial Conditions:\n- All registers and sequential elements should be initialized to a defined state. The initial state should be 3'b000 unless otherwise specified.\n\nEdge Cases and Boundary Conditions:\n- Ensure that all transitions are appropriately defined for each state and input combination.\n- Handle any undefined states transition to a safe state, preferably the initial state.\n\nClock and Reset:\n- The module operates on the rising edge of the clk signal.\n- Implement a synchronous reset mechanism to initialize the FSM to the defined initial state.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]