[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  load\n - input  ena  (  2 bits)\n - input  data (100 bits)\n - output q    (100 bits)\n\nThe module should implement a 100-bit left/right rotator, with\nsynchronous load and left/right enable. A rotator shifts-in the\nshifted-out bit from the other end of the register, unlike a shifter that\ndiscards the shifted-out bit and shifts in a zero. If enabled, a rotator\nrotates the bits around and does not modify/discard them.\n\n  (1) load: Loads shift register with data[99:0] instead of rotating.\n      Synchronous active high.\n\n  (2) ena[1:0]: Synchronous. Chooses whether and which direction to\n      rotate:\n      (a) 2'b01 rotates right by one bit,\n      (b) 2'b10 rotates left by one bit,\n      (c) 2'b00 and 2'b11 do not rotate.\n\n  (3) q: The contents of the rotator.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- input clk: Clock signal (1 bit). Positive edge-triggered.\n- input load: Synchronous load control signal (1 bit). Active high.\n- input [1:0] ena: Synchronous enable signal to control rotation direction (2 bits).\n- input [99:0] data: Input data for loading into the shift register (100 bits).\n- output reg [99:0] q: Output data representing the current state of the rotator (100 bits).\n\nFunctional Description:\n1. The `TopModule` implements a 100-bit rotational shift register with synchronous load and directional control.\n2. The rotation operation is distinct from a typical shift operation by retaining the bit shifted out and reintroducing it at the opposite end.\n\nOperation Details:\n1. Load (Synchronous): \n   - When `load` is high on the rising edge of `clk`, the register `q` is synchronously loaded with the value from `data[99:0]`.\n   - If `load` is low, the register retains its current value unless modified by the rotation operation.\n\n2. Rotation Enable (`ena`):\n   - The `ena` signal determines whether and in which direction the rotation occurs:\n     - `ena = 2'b01`: Rotate right by 1 bit position. The bit at `q[0]` is rotated to `q[99]`.\n     - `ena = 2'b10`: Rotate left by 1 bit position. The bit at `q[99]` is rotated to `q[0]`.\n     - `ena = 2'b00` or `ena = 2'b11`: No rotation. The contents of `q` remain unchanged.\n\n3. Output (`q`):\n   - `q` reflects the current value of the rotational shift register after the synchronous operations of loading and/or rotating.\n\nImplementation Notes:\n- The system is fully synchronous with respect to the `clk` signal.\n- All operations occur on the rising edge of `clk`.\n- Ensure that `q` is initialized to a known state (e.g., all zeros) on reset if a reset functionality is added.\n- If a reset is required, specify whether it is synchronous or asynchronous and its initial state.\n\nEdge Cases and Boundaries:\n- Confirm behavior for all `ena` states to ensure no unintended rotations.\n- Ensure proper bit wrapping during rotations to avoid data corruption.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]