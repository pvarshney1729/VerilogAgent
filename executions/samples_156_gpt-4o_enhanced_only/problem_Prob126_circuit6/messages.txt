[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  a ( 3 bits)\n - output q (16 bits)\n\nThe module should implement a combinational circuit. Read the simulation\nwaveforms to determine what the circuit does, then implement it.\n\n  time  a     q\n  0ns   x     x\n  5ns   x     x\n  10ns  x     x\n  15ns  0  1232\n  20ns  1  aee0\n  25ns  2  27d4\n  30ns  3  5a0e\n  35ns  4  2066\n  40ns  5  64ce\n  45ns  6  c526\n  50ns  7  2f19\n  55ns  0  1232\n  60ns  1  aee0\n  65ns  2  27d4\n  70ns  4  2066\n  75ns  1  aee0\n  80ns  1  aee0\n  85ns  3  5a0e\n  90ns  5  64ce\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input [2:0] a`: A 3-bit unsigned input vector. Bit[0] refers to the least significant bit.\n\n- Output Ports:\n  - `output [15:0] q`: A 16-bit unsigned output vector. Bit[0] refers to the least significant bit.\n\nCircuit Type:\n- The module implements a combinational logic circuit.\n\nBehavior Description:\n- The module outputs a specific 16-bit value on `q` based on the 3-bit input `a` as follows:\n  - When `a` is 3'b000, `q` is 16'h1232.\n  - When `a` is 3'b001, `q` is 16'haee0.\n  - When `a` is 3'b010, `q` is 16'h27d4.\n  - When `a` is 3'b011, `q` is 16'h5a0e.\n  - When `a` is 3'b100, `q` is 16'h2066.\n  - When `a` is 3'b101, `q` is 16'h64ce.\n  - When `a` is 3'b110, `q` is 16'hc526.\n  - When `a` is 3'b111, `q` is 16'h2f19.\n\n- The output `q` has no undefined or indeterminate state for any valid input `a` as the input range covers all possible 3-bit combinations.\n\nTiming:\n- The module is purely combinational and does not depend on clock cycles, resets, or initial states.\n\nEdge Cases:\n- All possible input values (0 to 7) are explicitly defined with corresponding output mappings.\n- There are no race conditions as this is a combinational circuit.\n\nAdditional Notes:\n- Ensure that all input and output values are treated as unsigned.\n- The output mapping is direct and does not involve any sequential or state-based logic.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]