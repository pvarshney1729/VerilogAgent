[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (4 bits)\n\nThe module should implement a 4-bit binary counter that counts from 0\nthrough 15, inclusive, with a period of 16. Assume all sequential logic\nis triggered on the positive edge of the clock. The reset input is active\nhigh synchronous, and should reset the counter to 0.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input clk` : Clock signal, used for triggering sequential logic. All sequential logic is triggered on the positive edge.\n  - `input reset` : Active-high, synchronous reset signal. When high, it resets the counter value to 0 at the next positive clock edge.\n  \n- Output Ports:\n  - `output [3:0] q` : 4-bit output representing the current count, with bit[3] being the most significant bit (MSB) and bit[0] being the least significant bit (LSB).\n\nFunctional Description:\n- The module implements a 4-bit binary counter.\n- The counter counts sequentially from 0 to 15 (inclusive), creating a counting period of 16 clock cycles.\n- On each positive edge of the clock (`clk`), if `reset` is not asserted, the counter value increments by 1.\n- If `reset` is asserted (high) on a positive clock edge, the counter is synchronously reset to 0.\n\nInitial Conditions:\n- At power-up or initial start of the module, the counter output `q` should be initialized to 0.\n\nEdge Cases:\n- When the counter reaches its maximum value (15), the next increment results in the counter wrapping around to 0.\n\nRequirements:\n- Ensure that the reset operation has precedence over the counting operation when `reset` is high during a clock edge.\n- The design should be free of race conditions and should handle the synchronous reset and counting operations deterministically.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]