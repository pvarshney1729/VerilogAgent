[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  predict_valid\n - input  predict_taken\n - input  train_mispredicted\n - input  train_taken\n - input  train_history   (32 bits)\n - output predict_history (32 bits)\n\nThe module should implement a 32-bit global history shift register,\nincluding support for rolling back state in response to a pipeline flush\ncaused by a branch misprediction. When a branch prediction is made\n(predict_valid = 1), shift in predict_taken from the LSB side to update\nthe branch history for the predicted branch. (predict_history[0] is the\ndirection of the youngest branch.) When a branch misprediction occurs\n(train_mispredicted = 1), load the branch history register with the\nhistory after the completion of the mispredicted branch. This is the\nhistory before the mispredicted branch (train_history) concatenated with\nthe actual result of the branch (train_taken). If both a prediction and\nmisprediction occur at the same time, the misprediction takes precedence,\nbecause the pipeline flush will also flush out the branch that is\ncurrently making a prediction. predict_history is the value of the branch\nhistory register. areset is a positive edge triggered asynchronous reset\nthat resets the history counter to zero. Assume all sequential logic is\ntriggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    The module to be implemented is named `TopModule` with the following interface. All input and output ports are one bit unless otherwise specified. The module is designed to work with a 32-bit global history shift register, supporting rollback on a branch misprediction.\n\n- `input  wire clk` : Clock signal, positive edge triggered.\n- `input  wire areset` : Asynchronous reset signal, active high, which resets the history register to zero.\n- `input  wire predict_valid` : Signal indicating a valid branch prediction is being made.\n- `input  wire predict_taken` : Signal indicating the predicted branch direction (taken or not taken).\n- `input  wire train_mispredicted` : Signal indicating a branch misprediction has occurred.\n- `input  wire train_taken` : Signal indicating the actual direction of the branch that was mispredicted.\n- `input  wire [31:0] train_history` : 32-bit history of branches before the mispredicted branch.\n- `output reg [31:0] predict_history` : 32-bit output reflecting the current state of the branch history register.\n\nFunctional Details:\n\n1. **Global History Shift Register**: \n   - The `predict_history` register maintains the global branch history. It is updated on the positive edge of the clock.\n\n2. **Branch Prediction**:\n   - When `predict_valid` is high, the `predict_taken` value is shifted into the least significant bit (LSB) of the `predict_history` register. The bit `predict_history[0]` represents the direction of the most recent (youngest) branch.\n\n3. **Branch Misprediction**:\n   - When `train_mispredicted` is high, the `predict_history` register is loaded with the `train_history` concatenated with the `train_taken` value. This operation restores the history to the state before the mispredicted branch, with the actual result of the branch appended as the new youngest branch.\n\n4. **Precedence**:\n   - If both a prediction (`predict_valid = 1`) and misprediction (`train_mispredicted = 1`) occur simultaneously, the misprediction takes precedence, as the pipeline flush will invalidate the branch currently being predicted.\n\n5. **Asynchronous Reset**:\n   - When `areset` is high, regardless of the clock, the `predict_history` register is reset to zero.\n\n6. **Sequential Logic**:\n   - All sequential logic in the module is triggered on the positive edge of the `clk` signal.\n\nEdge Cases and Initial Conditions:\n- Upon system start or reset (`areset` asserted), the `predict_history` register is initialized to zero.\n- Ensure correct handling of simultaneous prediction and misprediction, with priority given to misprediction.\n- Explicitly define all register initial states and behaviors under reset conditions to prevent undefined behavior.\n\nThe module must ensure correct operation under all specified scenarios, maintaining accurate branch history management through predictions and mispredictions.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]