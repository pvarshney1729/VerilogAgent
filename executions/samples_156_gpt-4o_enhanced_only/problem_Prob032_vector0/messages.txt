[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  vec  (3 bits)\n - output outv (3 bits)\n - output o2\n - output o1\n - output o0\n\nThe module has one 3-bit input, then outputs the same vector, and also\nsplits it into three separate 1-bit outputs. Connect output o0 to the\ninput vector's position 0, o1 to position 1, etc.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input [2:0] vec`: A 3-bit wide input vector, where `vec[0]` represents the least significant bit (LSB) and `vec[2]` represents the most significant bit (MSB).\n\n- Output Ports:\n  - `output [2:0] outv`: A 3-bit wide output vector that mirrors the input vector `vec`.\n  - `output o2`: A 1-bit output corresponding to `vec[2]`.\n  - `output o1`: A 1-bit output corresponding to `vec[1]`.\n  - `output o0`: A 1-bit output corresponding to `vec[0]`.\n\nDescription:\n- This module is purely combinational and does not contain any sequential elements such as registers or flip-flops.\n- The `outv` output vector is directly driven by the input vector `vec`, with each bit corresponding directly to the same bit position in `vec`.\n- The individual output bits `o2`, `o1`, and `o0` are directly connected to the respective bits of the input vector `vec`. Specifically:\n  - `o2` is connected to `vec[2]`.\n  - `o1` is connected to `vec[1]`.\n  - `o0` is connected to `vec[0]`.\n\nOperational Considerations:\n- As a purely combinational module, output changes propagate immediately in response to changes in the input vector `vec`.\n- There are no reset conditions to consider since the module does not contain stateful elements.\n- All outputs must reflect the current value of the input vector `vec` without any delay.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]