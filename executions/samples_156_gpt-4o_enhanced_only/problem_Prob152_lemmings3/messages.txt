[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  bump_left\n - input  bump_right\n - input  ground\n - input  dig\n - output walk_left\n - output walk_right\n - output aaah\n - output digging\n\nThe game Lemmings involves critters with fairly simple brains. So simple\nthat we are going to model it using a finite state machine. In the\nLemmings' 2D world, Lemmings can be in one of two states: walking left\n(walk_left is 1) or walking right (walk_right is 1). It will switch\ndirections if it hits an obstacle. In particular, if a Lemming is bumped\non the left (by receiving a 1 on bump_left), it will walk right. If it's\nbumped on the right (by receiving a 1 on bump_right), it will walk left.\nIf it's bumped on both sides at the same time, it will still switch\ndirections.\n\nIn addition to walking left and right and changing direction when bumped,\nwhen ground=0, the Lemming will fall and say \"aaah!\". When the ground\nreappears (ground=1), the Lemming will resume walking in the same\ndirection as before the fall. Being bumped while falling does not affect\nthe walking direction, and being bumped in the same cycle as ground\ndisappears (but not yet falling), or when the ground reappears while\nstill falling, also does not affect the walking direction.\n\nIn addition to walking and falling, Lemmings can sometimes be told to do\nuseful things, like dig (it starts digging when dig=1). A Lemming can dig\nif it is currently walking on ground (ground=1 and not falling), and will\ncontinue digging until it reaches the other side (ground=0). At that\npoint, since there is no ground, it will fall (aaah!), then continue\nwalking in its original direction once it hits ground again. As with\nfalling, being bumped while digging has no effect, and being told to dig\nwhen falling or when there is no ground is ignored. (In other words, a\nwalking Lemming can fall, dig, or switch directions. If more than one of\nthese conditions are satisfied, fall has higher precedence than dig,\nwhich has higher precedence than switching directions.)\n\nImplement a Moore state machine that models this behaviour. areset is\npositive edge triggered asynchronous reseting the Lemming machine to walk\nleft. Assume all sequential logic is triggered on the positive edge of\nthe clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface Definition:\n- Input Ports:\n  - `input clk` : Clock signal, triggers on the positive edge.\n  - `input areset` : Asynchronous reset signal, active high, resets the Lemming machine to the initial state (walking left).\n  - `input bump_left` : Indicates a bump from the left side, active high.\n  - `input bump_right` : Indicates a bump from the right side, active high.\n  - `input ground` : Indicates the presence of ground beneath the Lemming, active high.\n  - `input dig` : Command signal to start digging, active high.\n\n- Output Ports:\n  - `output walk_left` : Indicates the Lemming is walking left, active high.\n  - `output walk_right` : Indicates the Lemming is walking right, active high.\n  - `output aaah` : Indicates the Lemming is falling, active high.\n  - `output digging` : Indicates the Lemming is digging, active high.\n\nSignal and State Definitions:\n- The module uses a Moore state machine to model the Lemming's behavior.\n- States:\n  - WALK_LEFT: Lemming is walking left (`walk_left = 1`).\n  - WALK_RIGHT: Lemming is walking right (`walk_right = 1`).\n  - FALLING: Lemming is falling (`aaah = 1`).\n  - DIGGING: Lemming is digging (`digging = 1`).\n\n- State Transition Logic:\n  - Initial State: On `areset`, the state transitions to WALK_LEFT.\n  - Bump Logic: \n    - If in WALK_LEFT and `bump_left = 1`, transition to WALK_RIGHT.\n    - If in WALK_RIGHT and `bump_right = 1`, transition to WALK_LEFT.\n    - If bumped on both sides, toggle between WALK_LEFT and WALK_RIGHT.\n  - Falling Logic:\n    - If `ground = 0`, transition to FALLING.\n    - While FALLING, the state remains unchanged regardless of bumps or dig commands.\n    - When `ground = 1` again, return to the prior walking direction.\n  - Digging Logic:\n    - If in a walking state and `ground = 1`, and `dig = 1`, transition to DIGGING.\n    - While DIGGING, remain in this state until `ground = 0`, then transition to FALLING.\n    - When `ground = 1` after falling, return to the prior walking direction.\n\n- Precedence of Actions:\n  - FALLING has the highest precedence.\n  - DIGGING has precedence over switching directions.\n  - Direction changes occur if neither falling nor digging conditions are met.\n\n- Edge Case Handling:\n  - Bumps during FALLING or DIGGING have no effect on direction.\n  - `dig` commands during FALLING or when `ground = 0` are ignored.\n\nClocking and Reset:\n- All state transitions and logic evaluations are triggered on the positive edge of `clk`.\n- `areset` is a positive edge-triggered asynchronous reset to WALK_LEFT.\n\nBit Indexing and Conventions:\n- All input and output ports are 1-bit wide.\n- The least significant bit (bit[0]) is used for all single-bit signals.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]