{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset, // Asynchronous reset\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        WALK_LEFT  = 2'b00,\n        WALK_RIGHT = 2'b01,\n        FALLING    = 2'b10,\n        DIGGING    = 2'b11\n    } state_t;\n\n    state_t state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= WALK_LEFT;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (state)\n            WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = FALLING;\n                end else if (dig) begin\n                    next_state = DIGGING;\n                end else if (bump_left || bump_right) begin\n                    next_state = WALK_RIGHT;\n                end else begin\n                    next_state = WALK_LEFT;\n                end\n            end\n\n            WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = FALLING;\n                end else if (dig) begin\n                    next_state = DIGGING;\n                end else if (bump_left || bump_right) begin\n                    next_state = WALK_LEFT;\n                end else begin\n                    next_state = WALK_RIGHT;\n                end\n            end\n\n            FALLING: begin\n                if (ground) begin\n                    next_state = (state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n                end else begin\n                    next_state = FALLING;\n                end\n            end\n\n            DIGGING: begin\n                if (!ground) begin\n                    next_state = FALLING;\n                end else begin\n                    next_state = DIGGING;\n                end\n            end\n\n            default: next_state = WALK_LEFT; // Default to WALK_LEFT\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left  = (state == WALK_LEFT);\n        walk_right = (state == WALK_RIGHT);\n        aaah       = (state == FALLING);\n        digging    = (state == DIGGING);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}