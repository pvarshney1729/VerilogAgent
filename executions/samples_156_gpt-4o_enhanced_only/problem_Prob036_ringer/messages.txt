[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  ring\n - input  vibrate_mode\n - output ringer\n - output motor\n\nThe module should implement a circuit to control a cellphone's ringer and\nvibration motor. Whenever the phone needs to ring from an incoming call\n(input ring), your circuit must either turn on the ringer (output ringer\n= 1) or the motor (output motor = 1), but not both. If the phone is in\nvibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn\non the ringer.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input ring`: 1-bit signal indicating an incoming call.\n  - `input vibrate_mode`: 1-bit signal indicating whether the phone is set to vibrate mode.\n- Output Ports:\n  - `output ringer`: 1-bit signal to control the phone's ringer.\n  - `output motor`: 1-bit signal to control the phone's vibration motor.\n\nFunctional Description:\n- The module controls the ringer and vibration motor of a cellphone based on the following logic:\n  - When `ring` is asserted (`ring = 1`), the module must activate either the `ringer` or the `motor`, but not both simultaneously.\n  - If `vibrate_mode` is asserted (`vibrate_mode = 1`), the module should activate the `motor` (`motor = 1`) and ensure that the `ringer` is deactivated (`ringer = 0`).\n  - If `vibrate_mode` is not asserted (`vibrate_mode = 0`), the module should activate the `ringer` (`ringer = 1`) and ensure that the `motor` is deactivated (`motor = 0`).\n\nImplementation Details:\n- The module uses combinational logic to determine the output states (`ringer` and `motor`) based on the current values of the inputs (`ring` and `vibrate_mode`).\n- The combinational logic must ensure there are no race conditions, and only one of the outputs (`ringer` or `motor`) is active at any given time when `ring` is asserted.\n- The inactive state for both `ringer` and `motor` is `0`.\n- The logic should be designed to handle edge cases where inputs change simultaneously, ensuring consistent and correct output behavior.\n\nNote: This specification assumes that all input signals (`ring` and `vibrate_mode`) are stable during the evaluation of the combinational logic, and no latching or memory elements are required.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]