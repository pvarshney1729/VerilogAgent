[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  x\n - output z\n\nThe module should implement a finite-state machine with the\nstate-assigned table shown below. Reset should synchronous active high\nreset the FSM to state 000. Assume all sequential logic is triggered on\nthe positive edge of the clock.\n\n  Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1 | Output z\n  000 | 000, 001 | 0\n  001 | 001, 100 | 0\n  010 | 010, 001 | 0\n  011 | 001, 010 | 1\n  100 | 011, 100 | 1\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    The module, named `TopModule`, is designed to implement a finite-state machine (FSM) with the following interface. All input and output ports are one bit unless otherwise specified:\n\n- `input clk` : Clock signal, positive edge-triggered.\n- `input reset` : Synchronous active-high reset signal.\n- `input x` : Input signal affecting state transition.\n- `output z` : Output signal determined by the current state.\n\n### FSM Details\n\n- **State Encoding**: The FSM has states encoded as a 3-bit vector `y[2:0]`. The least significant bit is `y[0]`.\n  - State 000: Initial state after reset.\n  - State transitions depend on the input `x` as specified in the state transition table.\n\n- **Reset Behavior**: The reset is synchronous and active high. When `reset` is asserted (high), the FSM transitions to the initial state `000` on the next positive edge of `clk`.\n\n- **Clocking**: All state changes occur on the positive edge of `clk`.\n\n- **State Transition Table**:\n\n  | Present State `y[2:0]` | Next State `y[2:0]` when `x=0` | Next State `y[2:0]` when `x=1` | Output `z` |\n  |------------------------|---------------------------------|---------------------------------|------------|\n  | 000                    | 000                             | 001                             | 0          |\n  | 001                    | 001                             | 100                             | 0          |\n  | 010                    | 010                             | 001                             | 0          |\n  | 011                    | 001                             | 010                             | 1          |\n  | 100                    | 011                             | 100                             | 1          |\n\n- **Output Logic**: The output `z` is determined solely by the current state `y[2:0]` as indicated in the transition table.\n\n- **Initial Values**: On reset, set `y[2:0]` to `000` and `z` to 0.\n\n### Edge Cases and Input Boundaries\n\n- For undefined states or transitions, ensure the FSM remains stable and defaults to state `000` on reset.\n- The module should handle all possible combinations of input signals (`x` and `reset`) and transition appropriately based on the clock edge.\n\nThis specification ensures that the FSM is correctly implemented with clearly defined states, transitions, and output behaviors. It also specifies synchronous reset and edge-triggered state transitions, aligning with typical digital design practices.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]