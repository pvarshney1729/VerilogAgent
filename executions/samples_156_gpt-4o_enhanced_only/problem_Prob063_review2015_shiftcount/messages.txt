[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  shift_ena\n - input  count_ena\n - input  data\n - output q (4 bits)\n\nThe module should implement a four-bit shift register that also acts as a\ndown counter. Data is shifted in most-significant-bit first when\nshift_ena is 1. The number currently in the shift register is decremented\nwhen count_ena is 1. Since the full system doesn't ever use shift_ena and\ncount_ena together, it does not matter what your circuit does if both\ncontrol inputs are 1 (this mainly means that it doesn't matter which case\ngets higher priority). Assume all sequential logic is triggered on the\npositive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nPort Definitions:\n- input wire clk: Clock signal, positive edge-triggered.\n- input wire shift_ena: Active-high enable signal for shifting operation.\n- input wire count_ena: Active-high enable signal for counting operation.\n- input wire data: Serial data input for the shift operation.\n- output reg [3:0] q: 4-bit output representing the current state of the shift register/count.\n\nFunctional Description:\n- The module functions as a 4-bit shift register with an integrated down counter.\n- Shifting Operation: When `shift_ena` is asserted (logic high), the input `data` is shifted into the most significant bit (MSB) of `q`. The existing bits in the register are shifted towards the least significant bit (LSB). This operation occurs on the positive edge of the `clk`.\n- Counting Operation: When `count_ena` is asserted (logic high), the current value stored in `q` is decremented by 1. This operation also occurs on the positive edge of the `clk`.\n- Mutual Exclusivity: The system design ensures that `shift_ena` and `count_ena` are never asserted simultaneously. Therefore, behavior when both are high is unspecified and can be ignored in implementation.\n\nInitial Conditions and State:\n- The initial state of the register `q` upon power-up or reset should be defined as 4'b0000.\n- The module does not specify a reset input; thus, the initial state is a power-up condition.\n\nAdditional Notes:\n- Since the operations are mutually exclusive by design, there is no priority mechanism required between `shift_ena` and `count_ena`.\n- Bit Indexing Convention: Bit [3] of `q` is the MSB, and bit [0] is the LSB.\n- Ensure all sequential logic responds to the positive edge of the `clk` signal.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]