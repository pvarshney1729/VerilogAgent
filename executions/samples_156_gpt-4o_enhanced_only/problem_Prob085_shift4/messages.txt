[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  load\n - input  ena\n - input  data (4 bits)\n - output q (4 bits)\n\nThe module should implement a 4-bit shift register (right shift), with\nasynchronous positive edge triggered areset, synchronous active high\nsignals load, and enable.\n\n  (1) areset: Resets shift register to zero.\n\n  (2) load: Loads shift register with data[3:0] instead of shifting.\n\n  (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and\n       disappears).\n\n  (4) q: The contents of the shift register. If both the load and ena\n       inputs are asserted (1), the load input has higher priority.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Specification: TopModule\n\nInterface:\n- input logic clk: Clock signal, positive edge triggered.\n- input logic areset: Asynchronous reset signal, active high.\n- input logic load: Synchronous load signal, active high.\n- input logic ena: Synchronous enable signal, active high.\n- input logic [3:0] data: 4-bit data input, with bit[3] as the most significant bit (MSB) and bit[0] as the least significant bit (LSB).\n- output logic [3:0] q: 4-bit output representing the contents of the shift register, with bit[3] as the MSB and bit[0] as the LSB.\n\nModule Functionality:\n1. Asynchronous Reset (areset):\n   - When 'areset' is asserted (high), the shift register 'q' is immediately reset to 4'b0000, irrespective of the clock.\n\n2. Load Operation (load):\n   - On the positive edge of 'clk', if 'load' is asserted (high), 'q' is loaded with the value of 'data[3:0]'. \n   - The 'load' signal has priority over the 'ena' signal.\n\n3. Shift Operation (ena):\n   - On the positive edge of 'clk', if 'load' is not asserted (low) and 'ena' is asserted (high), the register shifts right:\n     - q[3] is set to 0.\n     - q[2:0] are shifted to the right by one position.\n     - q[0] is the bit that is shifted out and discarded.\n\n4. Output (q):\n   - The output 'q' reflects the current contents of the shift register after operations dictated by the control signals 'areset', 'load', and 'ena'.\n\nAssumptions:\n- All operations dependent on 'clk' are triggered on its positive edge.\n- The initial state of 'q' upon power-up or reset is 4'b0000.\n- The 'load' operation takes precedence over the 'ena' operation when both are asserted simultaneously.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]