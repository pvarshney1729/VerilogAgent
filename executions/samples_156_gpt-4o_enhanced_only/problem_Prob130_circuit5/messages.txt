[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  a (4 bits)\n - input  b (4 bits)\n - input  c (4 bits)\n - input  d (4 bits)\n - input  e (4 bits)\n - output q (4 bits)\n\nThe module should implement a combinational circuit. Read the simulation\nwaveforms to determine what the circuit does, then implement it.\n\n  time  a  b  c  d  e  q\n  0ns   x  x  x  x  x  x\n  5ns   x  x  x  x  x  x\n  10ns  x  x  x  x  x  x\n  15ns  a  b  0  d  e  b\n  20ns  a  b  1  d  e  e\n  25ns  a  b  2  d  e  a\n  30ns  a  b  3  d  e  d\n  35ns  a  b  4  d  e  f\n  40ns  a  b  5  d  e  f\n  45ns  a  b  6  d  e  f\n  50ns  a  b  7  d  e  f\n  55ns  a  b  8  d  e  f\n  60ns  a  b  9  d  e  f\n  65ns  a  b  a  d  e  f\n  70ns  a  b  b  d  e  f\n  75ns  a  b  c  d  e  f\n  80ns  a  b  d  d  e  f\n  85ns  a  b  e  d  e  f\n  90ns  a  b  f  d  e  f\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nPort Definitions:\n- Input Ports:\n  - `input [3:0] a`: 4-bit wide input vector.\n  - `input [3:0] b`: 4-bit wide input vector.\n  - `input [3:0] c`: 4-bit wide input vector.\n  - `input [3:0] d`: 4-bit wide input vector.\n  - `input [3:0] e`: 4-bit wide input vector.\n\n- Output Port:\n  - `output [3:0] q`: 4-bit wide output vector.\n\nBit Indexing Convention:\n- All vectors are indexed from MSB to LSB, with bit[3] as the most significant bit and bit[0] as the least significant bit.\n\nModule Functionality:\n- The module implements a combinational logic circuit. There are no sequential elements or state-holding components.\n- The output `q` is determined based on the value of the input `c` as follows:\n  - If `c == 4'd0`, then `q = b`.\n  - If `c == 4'd1`, then `q = e`.\n  - If `c == 4'd2`, then `q = a`.\n  - If `c == 4'd3`, then `q = d`.\n  - For `c` values from `4'd4` to `4'd15`, `q = 4'b1111` (binary representation of decimal 15).\n\nOperational Precedence:\n- The selection of `q` is solely dependent on the value of input `c`. Inputs `a`, `b`, `d`, and `e` are used based on the matching condition of `c`.\n\nEdge Cases:\n- When `c` is greater than or equal to `4'd4`, the output `q` defaults to `4'b1111`.\n\nAssumptions:\n- All input signals are assumed to be stable during the evaluation of the combinational logic.\n- The input and output delays are not specified and are assumed to be ideal (zero delay) for the purpose of this specification.\n\nThis specification is intended to guide the correct implementation of the TopModule in Verilog.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]