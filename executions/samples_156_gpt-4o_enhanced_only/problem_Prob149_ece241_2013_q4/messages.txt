[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  s (3 bits)\n - output fr2\n - output fr1\n - output fr0\n - output dfr\n\nA large reservior of water serves several users. In order to keep the\nlevel of water succificently high, three sensors are placed vertically at\n5-inch intervals. When the water level is above the highest sensor s[2],\nthe input flow rate should be zero. When the level is below the lowest\nsensor s[0], the flow rate should be at maximum (both Nominal flow valve\nand Supplemental flow valve opened). The flow rate when the level is\nbetween the upper and lower sensors is determined by two factors: the\nwater level and the level previous to the last sensor change. Each water\nlevel has a nominal flow rate associated with it as show in the table\nbelow. If the sensor change indicates that the previous level was lower\nthan the current level, the flow rate should be increased by opening the\nSupplemental flow valve (controlled by dfr).\n\n  Water Level           | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n  Above s[2]            | s[0], s[1], s[2] | None\n  Between s[2] and s[1] | s[0], s[1]       | fr0\n  Between s[1] and s[0] | s[0]             | fr0, fr1\n  Below s[0]            | None             | fr0, fr1, fr2\n\nAlso include an active-high synchronous reset that resets the state\nmachine to a state equivalent to if the water level had been low for a\nlong time (no sensors asserted, and all four outputs asserted).\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nPort Definitions:\n- `input wire clk`: Clock signal for synchronizing the module.\n- `input wire reset`: Active-high synchronous reset signal.\n- `input wire [2:0] s`: 3-bit input vector representing the water level sensors. `s[2]` is the most significant bit (highest sensor), and `s[0]` is the least significant bit (lowest sensor).\n- `output reg fr2`: Output signal to control the nominal flow rate, associated with the lowest water level.\n- `output reg fr1`: Output signal to control the nominal flow rate, associated with the medium water level.\n- `output reg fr0`: Output signal to control the nominal flow rate, associated with the highest water level.\n- `output reg dfr`: Output signal to control the supplemental flow valve.\n\nOperational Description:\n- Water Level Evaluation:\n  - **Above s[2]**: All sensors `s[0]`, `s[1]`, and `s[2]` are asserted. Nominal flow rate inputs `fr0`, `fr1`, and `fr2` should all be deasserted. Supplemental flow valve `dfr` is also deasserted.\n  - **Between s[2] and s[1]**: Sensors `s[0]` and `s[1]` are asserted. Assert `fr0`. `fr1`, `fr2`, and `dfr` should be deasserted.\n  - **Between s[1] and s[0]**: Only sensor `s[0]` is asserted. Assert `fr0` and `fr1`. `fr2` should be deasserted. If transitioning from a lower level, assert `dfr` to increase flow.\n  - **Below s[0]**: No sensors are asserted. Assert `fr0`, `fr1`, and `fr2`. Assert `dfr` to open all valves.\n\nSequential Logic:\n- The module uses a state machine to track the previous water level state.\n- The reset (`reset`) is synchronous and active-high. Upon reset, the module is set to a state equivalent to the water level being below `s[0]` (all sensors deasserted), with `fr0`, `fr1`, `fr2`, and `dfr` all asserted.\n\nEdge Cases and Initial Conditions:\n- On the first clock cycle after reset, outputs should reflect the state where no sensors are asserted, and all flow control outputs (`fr0`, `fr1`, `fr2`, `dfr`) are asserted.\n- The precedence of operations for sensor evaluation is in descending order: `s[2]`, `s[1]`, `s[0]`.\n\nThis specification ensures that the module operates correctly under all specified conditions and transitions, maintaining clarity and precision in the implementation details.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]