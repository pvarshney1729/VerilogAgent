[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  w\n - output z\n\nThe module should implement the state machine shown below:\n\n  A (0) --1--> B\n  A (0) --0--> A\n  B (0) --1--> C\n  B (0) --0--> D\n  C (0) --1--> E\n  C (0) --0--> D\n  D (0) --1--> F\n  D (0) --0--> A\n  E (1) --1--> E\n  E (1) --0--> D\n  F (1) --1--> C\n  F (1) --0--> D\n\nReset resets into state A and is synchronous active-high. Assume all\nsequential logic is triggered on the positive edge of the clock.\n\nUse separate always blocks for the state table and the state flip-flops.\nDescribe the FSM output, which is called _z_, using either continuous\nassignment statement(s) or an always block (at your discretion). Assign\nany state codes that you wish to use.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: `TopModule`\n\nInterface:\n- Input: `clk` - Clock signal, 1 bit. All sequential logic is triggered on the positive edge of this signal.\n- Input: `reset` - Synchronous active-high reset signal, 1 bit. This resets the state machine to the initial state `A`.\n- Input: `w` - Control input signal, 1 bit.\n- Output: `z` - Output signal, 1 bit, determined by the current state.\n\nState Encoding:\n- State `A`: 3'b000\n- State `B`: 3'b001\n- State `C`: 3'b010\n- State `D`: 3'b011\n- State `E`: 3'b100\n- State `F`: 3'b101\n\nState Transition Table:\n- From State `A`:\n  - If `w` is 1, transition to State `B`.\n  - If `w` is 0, remain in State `A`.\n- From State `B`:\n  - If `w` is 1, transition to State `C`.\n  - If `w` is 0, transition to State `D`.\n- From State `C`:\n  - If `w` is 1, transition to State `E`.\n  - If `w` is 0, transition to State `D`.\n- From State `D`:\n  - If `w` is 1, transition to State `F`.\n  - If `w` is 0, transition to State `A`.\n- From State `E`:\n  - If `w` is 1, remain in State `E`.\n  - If `w` is 0, transition to State `D`.\n- From State `F`:\n  - If `w` is 1, transition to State `C`.\n  - If `w` is 0, transition to State `D`.\n\nOutput Logic:\n- Output `z` is determined by the current state:\n  - In States `A`, `B`, `C`, `D`: `z` = 0\n  - In States `E`, `F`: `z` = 1\n\nOperational Behavior:\n- Upon receiving a positive edge of `clk`, if `reset` is high, the state transitions to `A`.\n- Otherwise, the state transitions according to the state transition table based on the value of `w`.\n\nImplementation Details:\n- Use separate `always` blocks for the state transition logic and the state register update logic.\n- Ensure all state registers are initialized to state `A` when `reset` is asserted.\n- The state machine should handle all possible input conditions and transitions correctly, without entering undefined states.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]