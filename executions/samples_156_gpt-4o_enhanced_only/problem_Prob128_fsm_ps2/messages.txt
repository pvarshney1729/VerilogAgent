[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  in (8 bits)\n - output done\n\nThe PS/2 mouse protocol sends messages that are three bytes long.\nHowever, within a continuous byte stream, it's not obvious where messages\nstart and end. The only indication is that the first byte of each three\nbyte message always has in[3]=1 (but in[3] of the other two bytes may be\n1 or 0 depending on data).\n\nThe module should implement a finite state machine that will search for\nmessage boundaries when given an input byte stream. The algorithm we'll\nuse is to discard bytes until we see one with in[3]=1. We then assume\nthat this is byte 1 of a message, and signal the receipt of a message\nonce all 3 bytes have been received (done). The FSM should signal done in\nthe cycle immediately after the third byte of each message was\nsuccessfully received. Reset should be active high synchronous. Assume\nall sequential logic is triggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    The TopModule is designed to process a continuous byte stream from a PS/2 mouse and identify message boundaries within this stream. The module's interface and behavior are as follows:\n\n**Interface Definition:**\n- `input clk`: The clock signal, utilized for synchronizing sequential logic. The module operates on the positive edge of this clock.\n- `input reset`: A synchronous reset signal, active high. When asserted, it will reset all internal state elements to their initial states on the next rising edge of the clock.\n- `input [7:0] in`: An 8-bit input representing each byte of the PS/2 data stream. The least significant bit is `in[0]`, and the most significant bit is `in[7]`.\n- `output done`: A 1-bit output signal indicating the successful receipt of a complete 3-byte message. This signal is asserted high for one clock cycle, immediately following the reception of the third byte of the message.\n\n**Operational Behavior:**\n- The module implements a finite state machine (FSM) to detect message boundaries in the byte stream.\n- The detection algorithm discards incoming bytes until a byte is received with `in[3]` set to 1, which marks the first byte of a message.\n- Upon detecting a byte with `in[3]` equal to 1, the FSM assumes this is the start of a new message and begins counting the bytes.\n- The FSM transitions through states to track the reception of the second and third bytes of the message.\n- After successfully receiving the third byte, the `done` signal is asserted high for one clock cycle on the next rising edge of the clock.\n\n**Reset Behavior:**\n- The synchronous reset initializes all FSM states and internal registers to their default state on the rising edge of the clock if the reset signal is high.\n- During reset, the `done` signal is deasserted.\n\n**State and Signal Definitions:**\n- The FSM consists of three states: `IDLE`, `BYTE1`, `BYTE2`, and `BYTE3`.\n  - `IDLE`: Default state, awaiting a byte with `in[3]` = 1.\n  - `BYTE1`: Indicates the first byte of a message has been detected.\n  - `BYTE2`: Indicates the second byte is being processed.\n  - `BYTE3`: Indicates the third and final byte of the message is being processed.\n- State transitions occur on the rising edge of the clock and are dependent on the current state and the value of `in[3]`.\n\n**Edge Case Handling:**\n- If a reset is asserted at any point, the FSM returns to the `IDLE` state, and `done` is deasserted.\n- The module assumes that input bytes are continuously provided and that the stream is unidirectional and non-interruptible.\n\nThis specification ensures that the module correctly identifies the start and end of 3-byte messages in the PS/2 mouse data stream, providing a clear signal (`done`) upon successful message receipt.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]