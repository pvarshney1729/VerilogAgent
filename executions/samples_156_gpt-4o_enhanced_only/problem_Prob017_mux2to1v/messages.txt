[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  a   (100 bits)\n - input  b   (100 bits)\n - input  sel\n - output out (100 bits)\n\nThe module should implement a 2-1 multiplexer. When sel=0, choose a. When\nsel=1, choose b.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `a`: 100-bit wide input vector. Signal indexing is from bit[99] (most significant bit) to bit[0] (least significant bit).\n  - `b`: 100-bit wide input vector. Signal indexing is from bit[99] (most significant bit) to bit[0] (least significant bit).\n  - `sel`: 1-bit wide input signal used as the select line for the multiplexer. \n\n- Output Ports:\n  - `out`: 100-bit wide output vector. Signal indexing is from bit[99] (most significant bit) to bit[0] (least significant bit).\n\nFunctional Description:\n- The module implements a 2-to-1 multiplexer with the following behavior:\n  - When `sel` is 0, the output `out` should be directly assigned the value of input `a`.\n  - When `sel` is 1, the output `out` should be directly assigned the value of input `b`.\n\n- The logic is purely combinational without any clock dependencies, meaning there are no sequential elements or registers involved.\n\n- The inputs `a` and `b` are treated as unsigned vectors for the purpose of this operation.\n\nEdge Cases:\n- Ensure proper handling of all 100 bits within the vectors `a` and `b` during multiplexing, with no loss of data or misalignment.\n- The module must consistently reflect changes in inputs `a`, `b`, and `sel` in the output `out` without delay, assuming combinational logic.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]