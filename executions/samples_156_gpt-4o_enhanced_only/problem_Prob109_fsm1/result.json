{
    "code": "module TopModule(\n    input logic clk,\n    input logic areset,\n    input logic in,\n    output logic out\n);\n\n    typedef enum logic [1:0] {STATE_A = 2'b00, STATE_B = 2'b01} state_t;\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_comb begin\n        case (current_state)\n            STATE_A: begin\n                if (in)\n                    next_state = STATE_A;\n                else\n                    next_state = STATE_B;\n            end\n            \n            STATE_B: begin\n                if (in)\n                    next_state = STATE_B;\n                else\n                    next_state = STATE_A;\n            end\n            \n            default: next_state = STATE_B; // Default to STATE_B for safety\n        endcase\n    end\n\n    // State register with asynchronous reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) \n            current_state <= STATE_B;\n        else \n            current_state <= next_state;\n    end\n\n    // Output logic based on current state\n    always_comb begin\n        case (current_state)\n            STATE_A: out = 1'b0;\n            STATE_B: out = 1'b1;\n            default: out = 1'b1; // Default to output of STATE_B for safety\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}