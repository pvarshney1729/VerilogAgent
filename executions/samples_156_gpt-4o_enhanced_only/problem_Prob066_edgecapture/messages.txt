[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  in    (32 bits)\n - output out   (32 bits)\n\nThe module should examine each bit in the 32-bit input vector, and\ncapture when the input signal changes from 1 in one clock cycle to 0 the\nnext. \"Capture\" means that the output will remain 1 until the register is\nreset (active high synchronous reset). Assume all sequential logic is\ntriggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `clk`: Clock signal (1 bit). The module operates on the positive edge of this clock.\n  - `reset`: Active high synchronous reset (1 bit). When high, the module resets all outputs to their initial state.\n  - `in`: 32-bit input vector. Each bit can independently trigger a capture event.\n\n- Output Ports:\n  - `out`: 32-bit output vector. Each bit corresponds to a respective bit in the input vector.\n\nPort and Signal Conventions:\n- The `in` and `out` ports are 32 bits wide, with bit indexing ranging from 31 (most significant bit) to 0 (least significant bit).\n\nOperational Details:\n- The module monitors each bit in the `in` vector. If a bit transitions from 1 to 0 between consecutive clock cycles, the corresponding bit in the `out` vector is set to 1.\n- Once a bit in the `out` vector is set to 1, it remains 1 until the module is reset.\n\nReset Behavior:\n- The reset is synchronous and active high. During the positive edge of the clock, if `reset` is high, all bits in the `out` vector are set to 0.\n- The reset affects the output on the next clock edge after `reset` is asserted.\n\nInitial Conditions:\n- At power-up or after a reset, all bits in the `out` vector are initialized to 0.\n\nClock and Timing:\n- All sequential logic is triggered on the positive edge of the `clk` signal.\n- The `in` vector is sampled at each positive edge of the clock.\n\nEdge Case Handling:\n- If the `in` vector is constant or transitions from 0 to 1, the `out` vector remains unaffected.\n- Race conditions are avoided by ensuring all logic is synchronous to the `clk` signal with a clearly defined reset behavior. \n\nThis specification ensures a clear and precise implementation of the desired functionality, with explicit signal dependencies and timing relationships.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]