[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  load\n - input  data (512 bits)\n - output q    (512 bits)\n\nThe module should implement Rule 110, a one-dimensional cellular\nautomaton with interesting properties (such as being Turing-complete).\nThere is a one-dimensional array of cells (on or off). At each time step,\nthe state of each cell changes. In Rule 110, the next state of each cell\ndepends only on itself and its two neighbours, according to the following\ntable:\n\n  Left[i+1] | Center[i] | Right[i-1] | Center's next state \n  1         | 1         | 1          | 0\n  1         | 1         | 0          | 1\n  1         | 0         | 1          | 1\n  1         | 0         | 0          | 0\n  0         | 1         | 1          | 1\n  0         | 1         | 0          | 1\n  0         | 0         | 1          | 1\n  0         | 0         | 0          | 0\n\nIn this circuit, create a 512-cell system (q[511:0]), and advance by one\ntime step each clock cycle. The synchronous active high load input\nindicates the state of the system should be loaded with data[511:0].\nAssume the boundaries (q[-1] and q[512], if they existed) are both zero\n(off). Assume all sequential logic is triggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface Definition:\n- Inputs:\n  - `clk`: 1-bit clock signal. All sequential logic is triggered on the positive edge.\n  - `load`: 1-bit synchronous, active-high signal. When high, the system loads new data.\n  - `data`: 512-bit input vector. Represents initial states of the cellular automaton cells when `load` is asserted.\n\n- Outputs:\n  - `q`: 512-bit output vector. Represents the current states of the cellular automaton cells.\n\nFunctional Description:\n- The module implements Rule 110, a one-dimensional cellular automaton. \n- The automaton consists of 512 cells, with each cell having a state represented by a single bit (either on '1' or off '0').\n- The next state of each cell is determined by itself and its two adjacent neighbors according to the following truth table:\n\n  | Left (i+1) | Center (i) | Right (i-1) | Center's Next State |\n  |------------|------------|-------------|---------------------|\n  | 1          | 1          | 1           | 0                   |\n  | 1          | 1          | 0           | 1                   |\n  | 1          | 0          | 1           | 1                   |\n  | 1          | 0          | 0           | 0                   |\n  | 0          | 1          | 1           | 1                   |\n  | 0          | 1          | 0           | 1                   |\n  | 0          | 0          | 1           | 1                   |\n  | 0          | 0          | 0           | 0                   |\n\n- Boundary Conditions:\n  - The left boundary (virtual q[-1]) and the right boundary (virtual q[512]) are assumed to be always '0'.\n\nOperational Details:\n- On the positive edge of `clk`, if `load` is high, `q` is updated to the value of `data`.\n- If `load` is low, `q` will update based on the Rule 110 logic applied to each cell and its neighbors.\n- Indexing convention: q[0] refers to the least significant cell, and q[511] refers to the most significant cell.\n\nReset Behavior:\n- This specification assumes there is no explicit reset signal. The `load` signal should be used to initialize or reinitialize the system.\n\nEdge Cases:\n- Ensure correct handling of the boundary cells where the leftmost and rightmost cells have only one neighbor, using virtual boundaries set to '0'.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]