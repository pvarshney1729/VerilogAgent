[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  a   (8 bits)\n - input  b   (8 bits)\n - input  c   (8 bits)\n - input  d   (8 bits)\n - output min (8 bits)\n\nThe module should find the minimum of the four input values. Unsigned\nnumbers can be compared with standard comparison operators (a < b).\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface Details:\n- Inputs:\n  - `input [7:0] a` : 8-bit unsigned integer input.\n  - `input [7:0] b` : 8-bit unsigned integer input.\n  - `input [7:0] c` : 8-bit unsigned integer input.\n  - `input [7:0] d` : 8-bit unsigned integer input.\n\n- Outputs:\n  - `output [7:0] min` : 8-bit unsigned integer output, representing the minimum value among the inputs.\n\nFunctional Description:\n- The module calculates the minimum value among the four 8-bit unsigned input values (`a`, `b`, `c`, `d`).\n- The comparison between inputs should be performed using standard unsigned comparison operators (e.g., `a < b`).\n- The module's logic is purely combinational; it does not involve any clocked or sequential elements.\n- Ensure that the output `min` accurately reflects the smallest of the input values at all times.\n\nAdditional Considerations:\n- There are no dependencies on external clock or reset signals, as this module is purely combinational.\n- The bit index convention follows: `bit[0]` is the least significant bit (LSB) and `bit[7]` is the most significant bit (MSB).\n- Handle all input combinations correctly, including edge cases where all inputs are equal.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]