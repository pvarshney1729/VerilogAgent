[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (5 bits)\n\nA linear feedback shift register is a shift register usually with a few\nXOR gates to produce the next state of the shift register. A Galois LFSR\nis one particular arrangement that shifts right, where a bit position with\na \"tap\" is XORed with the LSB output bit (q[0]) to produce its next value,\nwhile bit positions without a tap shift right unchanged.  If the taps positions\nare carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length\nLFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is\nnever reached).\n\nThe module should implement a 5-bit maximal-length Galois LFSR with taps\nat bit positions 5 and 3. The active-high synchronous reset should reset\nthe LFSR output to 1. Assume all sequential logic is triggered on the\npositive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface Specification:\n- Input: clk (1 bit) - Clock signal, positive edge-triggered.\n- Input: reset (1 bit) - Active-high synchronous reset.\n- Output: q (5 bits) - LFSR output, with q[4] as the most significant bit (MSB) and q[0] as the least significant bit (LSB).\n\nFunctional Description:\n- The module implements a 5-bit maximal-length Galois Linear Feedback Shift Register (LFSR).\n- The LFSR shifts right with bit positions 5 (q[4]) and 3 (q[2]) designated as 'tap' positions.\n- The next state of the LFSR is determined by XORing the output bit at q[0] (LSB) with the current values at the tap positions.\n\nOperational Details:\n- On the positive edge of the clock signal (clk), the LFSR updates its state.\n- If the reset signal is asserted (logic high) during a clock edge, the LFSR state is synchronously reset to the binary value '00001'.\n- If the reset signal is not asserted, the LFSR computes the next state as follows:\n  - q[4] (MSB) is updated with the XOR result of q[0] and q[2] (tap position).\n  - q[3] is updated with the previous value of q[4].\n  - q[2] is updated with the previous value of q[3].\n  - q[1] is updated with the previous value of q[2].\n  - q[0] is updated with the previous value of q[1].\n\nEdge Cases:\n- The LFSR will not enter the all-zero state due to the nature of maximal-length sequences.\n\nInitial Conditions:\n- Upon assertion of the reset signal, the LFSR is initialized to a non-zero state of '00001', ensuring all-zero state is never reached in normal operation.\n  \nNote: The design ensures that the LFSR cycles through all possible states except the all-zero state, achieving a sequence length of 2^5 - 1 = 31 states.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]