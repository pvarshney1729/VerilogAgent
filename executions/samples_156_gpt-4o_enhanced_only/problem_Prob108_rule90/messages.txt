[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk,\n - input  load,\n - input  data (512 bits)\n - output q    (512 bits)\n\nThe module should implement Rule 90, a one-dimensional cellular automaton\nwith interesting properties. The rules are simple. There is a\none-dimensional array of cells (on or off). At each time step, the next\nstate of each cell is the XOR of the cell's two current neighbours:\n\n  Left | Center | Right | Center's next state\n  1    | 1      | 1     | 0\n  1    | 1      | 0     | 1\n  1    | 0      | 1     | 0\n  1    | 0      | 0     | 1\n  0    | 1      | 1     | 1\n  0    | 1      | 0     | 0\n  0    | 0      | 1     | 1\n  0    | 0      | 0     | 0\n\nIn this circuit, create a 512-cell system (q[511:0]), and advance by one\ntime step each clock cycle. The load input indicates the state of the\nsystem should be loaded with data[511:0]. Assume the boundaries (q[-1]\nand q[512]) are both zero (off). Assume all sequential logic is triggered\non the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    The module, named `TopModule`, shall be implemented with the following interface. All input and output ports are one bit unless otherwise specified:\n\n- Input Ports:\n  - `input wire clk`: Clock signal, active on the rising edge.\n  - `input wire load`: Load control signal. When high, loads the `data` input into the `q` output.\n  - `input wire [511:0] data`: 512-bit wide input data bus used to initialize the system state when `load` is asserted.\n\n- Output Ports:\n  - `output reg [511:0] q`: 512-bit wide output representing the current state of the cellular automaton.\n\nThe module implements Rule 90, a one-dimensional cellular automaton. This system consists of 512 cells, each cell being either on (1) or off (0). The evolution rule for each cell's next state is determined by the XOR of its two immediate neighbors:\n\n```\nLeft | Center | Right | Center's next state\n  1  |    1   |   1   |          0\n  1  |    1   |   0   |          1\n  1  |    0   |   1   |          0\n  1  |    0   |   0   |          1\n  0  |    1   |   1   |          1\n  0  |    1   |   0   |          0\n  0  |    0   |   1   |          1\n  0  |    0   |   0   |          0\n```\n\nBoundary Conditions:\n- The left boundary (q[-1]) and the right boundary (q[512]) are both assumed to be 0 (off).\n\nOperational Details:\n- The system advances by one time step with each rising edge of the `clk`.\n- If `load` is asserted on a rising edge of `clk`, the content of `data[511:0]` is loaded into `q[511:0]`, overriding the current state.\n- In the absence of `load`, the cellular automaton progresses according to Rule 90.\n\nAssumptions:\n- All sequential elements are triggered on the positive edge of the `clk`.\n- The reset state and behavior upon power-up are not specified in this document.\n\nThe implementation should ensure correct operation under all conditions, including edge cases and input boundaries, as described.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]