[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  d (8 bits)\n - output q (8 bits)\n\nImplement a module that includes 8 D flip-flops with active high\nsynchronous reset. The flip-flops must be reset to 0x34 rather than zero.\nAll DFFs should be triggered by the negative edge of clk.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit clock signal. The flip-flops are triggered on the negative edge of this clock.\n  - reset: 1-bit active high synchronous reset signal.\n  - d: 8-bit data input, where bit[0] is the least significant bit (LSB) and bit[7] is the most significant bit (MSB).\n\n- Output Ports:\n  - q: 8-bit registered output, where bit[0] is the least significant bit (LSB) and bit[7] is the most significant bit (MSB).\n\nFunctional Description:\n- The module comprises 8 D flip-flops.\n- Each flip-flop stores one bit of the 8-bit input `d`.\n- All flip-flops share a common clock (`clk`) and synchronous reset (`reset`).\n- Flip-flops are triggered on the negative edge of the clock signal (`clk`).\n\nReset Behavior:\n- The reset is synchronous and active high.\n- On asserting `reset` (i.e., `reset` goes high) during the next negative edge of `clk`, the output `q` is set to the specific 8-bit binary value `0x34` (00110100 in binary).\n- If `reset` is low, the flip-flops capture the input `d` on the next negative edge of `clk`.\n\nInitial Values:\n- Upon power-up, the flip-flops should be initialized to hold the value `0x34`, ensuring a known start state regardless of the `reset` signal status at power-up.\n\nOperational Details:\n- The transition of `q` depends on the negative edge of `clk`.\n- In the absence of a reset, the output `q` updates to match the input `d` at every negative clock edge.\n- Ensure no race conditions by maintaining the synchronous nature of the reset and clear definition of clock edge triggering.\n\nEdge Cases:\n- If `clk` has glitches or does not have a clear negative edge, the behavior is undefined.\n- Ensure that `reset` remains stable during the clock's negative edge to avoid unintended behavior.\n\nConstraints:\n- All input and output signals must be stable and free from metastability issues at the time of clock transition.\n\nThis specification ensures clarity for a correct Verilog implementation of the described behavior.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]