{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic ack,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        PATTERN_DETECT,\n        CAPTURE_DELAY,\n        COUNTDOWN,\n        WAIT_ACK\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay, delay_counter;\n    logic [9:0] cycle_counter; // To count up to 1000 cycles\n\n    // Sequential logic for state transitions and output logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            delay <= 4'b0;\n            delay_counter <= 4'b0;\n            cycle_counter <= 10'b0;\n            count <= 4'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n\n            case (current_state)\n                PATTERN_DETECT: begin\n                    // Shift in the delay value once the pattern is detected\n                    delay <= {delay[2:0], data};\n                end\n                CAPTURE_DELAY: begin\n                    delay_counter <= delay;\n                    cycle_counter <= 10'b0;\n                end\n                COUNTDOWN: begin\n                    if (cycle_counter == 10'd999) begin\n                        cycle_counter <= 10'b0;\n                        if (delay_counter != 4'b0) begin\n                            delay_counter <= delay_counter - 1;\n                        end\n                    end else begin\n                        cycle_counter <= cycle_counter + 1;\n                    end\n                    count <= delay_counter;\n                end\n                WAIT_ACK: begin\n                    done <= 1'b1;\n                end\n            endcase\n        end\n    end\n\n    // Combinational logic for next state logic\n    always_comb begin\n        next_state = current_state;\n        counting = 1'b0;\n        done = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (data == 1'b1) begin\n                    next_state = PATTERN_DETECT;\n                end\n            end\n            PATTERN_DETECT: begin\n                if (&{delay[2:0], data}) begin // Pattern 1101 detected\n                    next_state = CAPTURE_DELAY;\n                end\n            end\n            CAPTURE_DELAY: begin\n                next_state = COUNTDOWN;\n            end\n            COUNTDOWN: begin\n                counting = 1'b1;\n                if (delay_counter == 4'b0 && cycle_counter == 10'd999) begin\n                    next_state = WAIT_ACK;\n                end\n            end\n            WAIT_ACK: begin\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}