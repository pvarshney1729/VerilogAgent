[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (32 bits)\n\nA linear feedback shift register is a shift register usually with a few\nXOR gates to produce the next state of the shift register. A Galois LFSR\nis one particular arrangement that shifts right, where a bit position with\na \"tap\" is XORed with the LSB output bit (q[0]) to produce its next value,\nwhile bit positions without a tap shift right unchanged. \n\nThe module should implement a 32-bit Galois LFSR with taps at bit\npositions 32, 22, 2, and 1. Reset should be active high synchronous, and\nshould reset the output q to 32'h1. Assume all sequential logic is\ntriggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nPort Definitions:\n- Input: clk (1-bit)\n  - Description: Clock signal for synchronizing sequential logic.\n  - Trigger: Positive edge-triggered.\n  \n- Input: reset (1-bit)\n  - Description: Active-high synchronous reset.\n  - Behavior: When high, resets output q to its initial state.\n  \n- Output: q (32-bit)\n  - Description: 32-bit output representing the current state of the Galois LFSR.\n  - Initial Value: Reset to 32'h1 upon reset assertion.\n\nOperational Details:\n- Function: This module implements a 32-bit Galois Linear Feedback Shift Register (LFSR).\n- Operation:\n  - The LFSR shifts right on each positive edge of the clk.\n  - Taps are located at bit positions 31, 21, 1, and 0 (using zero-based indexing where bit[0] is the LSB).\n  - The next state of a tapped position is determined by XORing its current value with q[0] (the current LSB).\n\n- Reset Behavior:\n  - Type: Synchronous\n  - When the reset signal is asserted (high), the output q is reset to 32'h1 on the next positive clock edge.\n\n- Sequential Logic:\n  - All state changes occur on the rising edge of clk.\n  - The shifting and feedback operations are governed by the specified tap positions.\n\nEdge Cases:\n- On reset, q is always set to 32'h1 regardless of its previous state.\n- Ensure proper handling of the LSB during XOR operation to avoid race conditions.\n\nImplementation Note:\n- Ensure the bit indexing follows the convention where bit[0] is the least significant bit (LSB) and bit[31] is the most significant bit (MSB).\n- The tap positions are applied as follows: XOR the output LSB (q[0]) with bits at positions 31, 21, 1, and 0 to determine their next state.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]