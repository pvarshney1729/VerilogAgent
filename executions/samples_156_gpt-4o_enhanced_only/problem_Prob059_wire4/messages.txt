[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  a\n - input  b\n - input  c\n - output w\n - output x\n - output y\n - output z\n\nThe module should behave like wires that makes these connections:\n\n  a -> w\n  b -> x\n  b -> y\n  c -> z\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface Specifications:\n- Inputs:\n  - `input a`: 1-bit, unsigned. Represents a control signal connected to the output `w`.\n  - `input b`: 1-bit, unsigned. Represents a control signal connected to the outputs `x` and `y`.\n  - `input c`: 1-bit, unsigned. Represents a control signal connected to the output `z`.\n\n- Outputs:\n  - `output w`: 1-bit, unsigned. Directly driven by input `a`.\n  - `output x`: 1-bit, unsigned. Directly driven by input `b`.\n  - `output y`: 1-bit, unsigned. Directly driven by input `b`.\n  - `output z`: 1-bit, unsigned. Directly driven by input `c`.\n\nConnection Behavior:\n- This module is purely combinational and has no internal state or memory elements.\n- The inputs `a`, `b`, and `c` are directly wired to outputs `w`, `x`, `y`, and `z` as specified:\n  - `a` is directly connected to `w`.\n  - `b` is directly connected to both `x` and `y`.\n  - `c` is directly connected to `z`.\n\nAdditional Notes:\n- All signals are combinationally connected; there are no sequential elements, clocking, or reset mechanisms involved.\n- The module operates purely on the basis of the input signals' current values, with no dependency on previous states or clock edges.\n- This implementation assumes ideal conditions with no propagation delay or race conditions as it represents direct wire connections.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]