[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  w\n - input  R\n - input  E\n - input  L\n - output Q\n\nThe module will be one stage in a larger n-bit shift register circuit.\nInput E is for enabling shift, R for value to load, L is asserted when it\nshould load, and w is the input from the prevous stage of the shift\nregister. Assume all sequential logic is triggered on the positive edge\nof the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nThis module is designed to serve as one stage in a larger n-bit shift register circuit. It has a specific functionality to either shift, load, or hold a value based on control inputs. The module operates using sequential logic triggered by the positive edge of the clock signal.\n\nInterface Definition:\n- Inputs:\n  - `input wire clk`: Clock signal, used to synchronize operations. All sequential elements are triggered on the positive edge.\n  - `input wire w`: Data input from the previous stage of the shift register. This is the bit to be shifted in when enabled.\n  - `input wire R`: The value to be loaded into this stage when load is enabled.\n  - `input wire E`: Enable signal for shifting. When high, the module captures the input `w` at the next clock edge.\n  - `input wire L`: Load control signal. When high, the module loads the value of `R` instead of shifting.\n\n- Output:\n  - `output reg Q`: This is the output of the current stage. It holds the current state of the bit within this stage of the shift register.\n\nBehavioral Description:\n1. **Clock Edge Sensitivity**:\n   - This module is sensitive to the positive edge of `clk`.\n\n2. **Operational Modes**:\n   - **Shift Mode**: If `E` is asserted (high) and `L` is deasserted (low), `Q` is updated with the value of `w` at the next positive edge of `clk`.\n   - **Load Mode**: If `L` is asserted (high), irrespective of `E`, `Q` is updated with the value of `R` at the next positive edge of `clk`.\n   - **Hold Mode**: If both `E` and `L` are deasserted (low), `Q` retains its previous value.\n\n3. **Priority**:\n   - The load operation (`L` active) has priority over the shift operation (`E` active). If both `L` and `E` are high at the same time, `Q` will be updated with the value of `R`.\n\n4. **Initial Conditions**:\n   - Upon reset or power-up, `Q` should have a defined initial state. If not specified, assume `Q` initializes to 0.\n\n5. **Considerations**:\n   - Ensure no race conditions occur by clearly defining the priority of operations as mentioned.\n   - This specification does not include details on resets; if a reset is required, clarify whether it is synchronous or asynchronous and define the reset behavior for `Q`.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]