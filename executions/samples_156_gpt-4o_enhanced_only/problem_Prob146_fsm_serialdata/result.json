{
    "code": "module TopModule(\n    input logic clk,\n    input logic in,\n    input logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        IDLE       = 3'b000,\n        START_BIT  = 3'b001,\n        DATA_BITS  = 3'b010,\n        STOP_BIT   = 3'b011,\n        DONE_STATE = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] bit_count; // counts from 0 to 8 for data bits\n    logic [7:0] data_bits; // to store the 8 data bits\n\n    // Sequential block for state transitions and outputs\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 4'b0000;\n            data_bits <= 8'b00000000;\n            done <= 0;\n            out_byte <= 8'b00000000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DATA_BITS) begin\n                data_bits <= {in, data_bits[7:1]}; // Shift in the data bits\n                bit_count <= bit_count + 1;\n            end\n            if (current_state == DONE_STATE) begin\n                out_byte <= data_bits;\n                done <= 1;\n            end else begin\n                done <= 0;\n            end\n        end\n    end\n\n    // Combinational block for next state logic\n    always_comb begin\n        next_state = current_state; // default state is to remain in current state\n        case (current_state)\n            IDLE: begin\n                if (in == 0) // Start bit detected\n                    next_state = START_BIT;\n            end\n            START_BIT: begin\n                next_state = DATA_BITS;\n                bit_count = 4'b0000; // Reset bit count\n            end\n            DATA_BITS: begin\n                if (bit_count == 4'b1000) // 8 bits received\n                    next_state = STOP_BIT;\n            end\n            STOP_BIT: begin\n                if (in == 1) // Stop bit detected\n                    next_state = DONE_STATE;\n                else\n                    next_state = IDLE; // Incorrect stop bit, reset\n            end\n            DONE_STATE: begin\n                next_state = IDLE; // Return to IDLE after acknowledging\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 52,
        "passfail": "R"
    }
}