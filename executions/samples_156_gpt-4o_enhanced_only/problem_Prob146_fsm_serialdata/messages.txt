[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  in\n - input  reset\n - output out_byte (8 bits)\n - output done\n\nIn many (older) serial communications protocols, each data byte is sent\nalong with a start bit and a stop bit, to help the receiver delimit bytes\nfrom the stream of bits. One common scheme is to use one start bit (0), 8\ndata bits, and 1 stop bit (1). The line is also at logic 1 when nothing\nis being transmitted (idle). Design a finite state machine that will\nidentify when bytes have been correctly received when given a stream of\nbits. It needs to identify the start bit, wait for all 8 data bits, then\nverify that the stop bit was correct. The module will also output the\ncorrectly-received data byte. `out_byte` needs to be valid when `done` is\n1, and is don't-care otherwise. If the stop bit does not appear when\nexpected, the FSM must wait until it finds a stop bit before attempting\nto receive the next byte. Include a active-high synchronous reset. Note\nthat the serial protocol sends the least significant bit first. It should\nassert done each time it finds a stop bit. Assume all sequential logic is\ntriggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nDescription:\nThe module, TopModule, implements a finite state machine (FSM) for serial data reception. It identifies correctly received bytes in a stream of bits, including a start bit, 8 data bits, and a stop bit.\n\nInterface:\n- Inputs:\n  - `input clk`: Clock signal. All sequential logic is triggered on the positive edge.\n  - `input in`: Serial data input bit.\n  - `input reset`: Active-high synchronous reset. Resets the FSM to its initial state.\n\n- Outputs:\n  - `output [7:0] out_byte`: 8-bit output representing the received data byte. Valid when `done` is asserted.\n  - `output done`: Indicates a byte has been correctly received and `out_byte` is valid. Asserted for one clock cycle.\n\nSpecifications:\n1. Bit Indexing:\n   - The serial protocol sends the least significant bit first, i.e., `bit[0]` is the least significant bit (LSB).\n\n2. FSM Description:\n   - The FSM begins in an idle state, waiting for a start bit (0).\n   - Upon detecting a start bit, the FSM transitions to capturing 8 data bits.\n   - After receiving 8 data bits, the FSM checks for a stop bit (1).\n   - If the stop bit is correct, `out_byte` is updated with the received byte, and `done` is asserted for one clock cycle.\n   - If the stop bit is incorrect, the FSM awaits a stop bit before starting the next byte reception.\n\n3. Reset Behavior:\n   - On reset (active-high), the FSM returns to the idle state.\n   - All registers and internal states are initialized to their default values.\n\n4. Edge Cases:\n   - The `done` output is asserted only when a complete and correct byte is received, including the start and stop bits.\n   - If the FSM is interrupted mid-byte (e.g., due to reset), it must restart the byte reception process.\n\n5. Inputs and Outputs:\n   - All signals are treated as unsigned unless otherwise specified.\n   - `out_byte` holds meaningful data only when `done` is high; otherwise, it is considered don't-care.\n\n6. Clock and Reset:\n   - The module uses a single clock domain with a positive edge-triggered clock.\n   - The reset is synchronous, ensuring that it aligns with the clock edges.\n\n7. Signal Dependencies:\n   - The FSM transitions and output signals depend on the `clk` and `reset` inputs, as well as the serial bit input `in`.\n\nThis specification ensures that the module operates correctly under the given conditions and outlines the expected behavior in detail for a robust Verilog implementation.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]