[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  bump_left\n - input  bump_right\n - input  ground\n - output walk_left\n - output walk_right\n - output aaah\n\nThe game Lemmings involves critters with fairly simple brains. So simple\nthat we are going to model it using a finite state machine. In the\nLemmings' 2D world, Lemmings can be in one of two states: walking left\n(walk_left is 1) or walking right (walk_right is 1). It will switch\ndirections if it hits an obstacle. In particular, if a Lemming is bumped\non the left (by receiving a 1 on bump_left), it will walk right. If it's\nbumped on the right (by receiving a 1 on bump_right), it will walk left.\nIf it's bumped on both sides at the same time, it will still switch\ndirections.\n\nIn addition to walking left and right and changing direction when bumped,\nwhen ground=0, the Lemming will fall and say \"aaah!\". When the ground\nreappears (ground=1), the Lemming will resume walking in the same\ndirection as before the fall. Being bumped while falling does not affect\nthe walking direction, and being bumped in the same cycle as ground\ndisappears (but not yet falling), or when the ground reappears while\nstill falling, also does not affect the walking direction.\n\nImplement a Moore state machine that models this behaviour. areset is\npositive edge triggered asynchronous reseting the Lemming machine to walk\nleft. Assume all sequential logic is triggered on the positive edge of\nthe clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface Description:\n- Inputs:\n  - clk: 1-bit clock signal; all sequential logic is triggered on the positive edge.\n  - areset: 1-bit asynchronous reset signal; active high, resets the state machine to walk left.\n  - bump_left: 1-bit signal; indicates a bump on the left side.\n  - bump_right: 1-bit signal; indicates a bump on the right side.\n  - ground: 1-bit signal; indicates whether the ground is present (1) or absent (0).\n\n- Outputs:\n  - walk_left: 1-bit output; high when the Lemming is walking left.\n  - walk_right: 1-bit output; high when the Lemming is walking right.\n  - aaah: 1-bit output; high when the Lemming is falling.\n\nFinite State Machine (FSM) Description:\n- The FSM is a Moore machine with the following states:\n  1. WALK_LEFT: Lemming walks left.\n  2. WALK_RIGHT: Lemming walks right.\n  3. FALL_LEFT: Lemming is falling, was last walking left.\n  4. FALL_RIGHT: Lemming is falling, was last walking right.\n\n- State Transition Logic:\n  - From WALK_LEFT:\n    - Transitions to WALK_RIGHT if bump_left = 1.\n    - Transitions to FALL_LEFT if ground = 0.\n  - From WALK_RIGHT:\n    - Transitions to WALK_LEFT if bump_right = 1.\n    - Transitions to FALL_RIGHT if ground = 0.\n  - From FALL_LEFT:\n    - Transitions to WALK_LEFT if ground = 1.\n  - From FALL_RIGHT:\n    - Transitions to WALK_RIGHT if ground = 1.\n\n- Signal Definitions:\n  - walk_left = 1 when in state WALK_LEFT.\n  - walk_right = 1 when in state WALK_RIGHT.\n  - aaah = 1 when in states FALL_LEFT or FALL_RIGHT.\n\n- Reset Behavior:\n  - On areset = 1, the FSM asynchronously resets to the WALK_LEFT state, regardless of the clock edge.\n\n- Edge Case Handling:\n  - If bump_left and bump_right are both 1 simultaneously, the Lemming switches direction.\n  - Bumps during falling (states FALL_LEFT or FALL_RIGHT) do not affect walking direction.\n  - A bump coinciding with ground = 0 does not affect the current walking direction after falling.\n  - When transitioning back to walking from a fall (ground transitions from 0 to 1), the Lemming resumes walking in the last known direction.\n\n- Bit Indexing:\n  - All signals are treated as single-bit, hence no specific bit indexing is required.\n  - All operations involving signal assignments are based on the current state and input conditions.\n\n- Initial Values:\n  - On power-up and reset, the FSM starts in the WALK_LEFT state, with walk_left = 1, walk_right = 0, and aaah = 0.\n\nThis specification is designed to ensure a clear, concise, and correct implementation of the Lemming's behavior as described.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]