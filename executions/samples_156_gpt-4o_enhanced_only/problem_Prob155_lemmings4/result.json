{
    "code": "module TopModule(\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        STATE_WALK_LEFT  = 3'b000,\n        STATE_WALK_RIGHT = 3'b001,\n        STATE_FALLING    = 3'b010,\n        STATE_DIGGING    = 3'b011,\n        STATE_SPLATTER   = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [4:0] fall_counter;  // Counter for falling duration, max value is 31\n\n    // State transition logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= STATE_WALK_LEFT;\n            fall_counter <= 5'b0;\n        end else begin\n            current_state <= next_state;\n\n            // Update fall counter for falling state\n            if (current_state != STATE_FALLING || ground) begin\n                fall_counter <= 5'b0;\n            end else begin\n                fall_counter <= fall_counter + 1'b1;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            STATE_WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = STATE_FALLING;\n                end else if (dig) begin\n                    next_state = STATE_DIGGING;\n                end else if (bump_left) begin\n                    next_state = STATE_WALK_RIGHT;\n                end else begin\n                    next_state = STATE_WALK_LEFT;\n                end\n            end\n\n            STATE_WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = STATE_FALLING;\n                end else if (dig) begin\n                    next_state = STATE_DIGGING;\n                end else if (bump_right) begin\n                    next_state = STATE_WALK_LEFT;\n                end else begin\n                    next_state = STATE_WALK_RIGHT;\n                end\n            end\n\n            STATE_FALLING: begin\n                if (ground) begin\n                    if (fall_counter > 5'd20) begin\n                        next_state = STATE_SPLATTER;\n                    end else if (current_state == STATE_WALK_LEFT) begin\n                        next_state = STATE_WALK_LEFT;\n                    end else begin\n                        next_state = STATE_WALK_RIGHT;\n                    end\n                end else begin\n                    next_state = STATE_FALLING;\n                end\n            end\n\n            STATE_DIGGING: begin\n                if (!ground) begin\n                    next_state = STATE_FALLING;\n                end else begin\n                    next_state = STATE_DIGGING;\n                end\n            end\n\n            STATE_SPLATTER: begin\n                next_state = STATE_SPLATTER; // Remain in splatter state\n            end\n\n            default: next_state = STATE_WALK_LEFT;\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left = (current_state == STATE_WALK_LEFT);\n        walk_right = (current_state == STATE_WALK_RIGHT);\n        aaah = (current_state == STATE_FALLING);\n        digging = (current_state == STATE_DIGGING);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 193,
        "passfail": "R"
    }
}