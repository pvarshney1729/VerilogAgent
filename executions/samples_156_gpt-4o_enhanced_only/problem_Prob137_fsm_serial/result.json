{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic done\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        START_BIT = 3'b001,\n        DATA_BITS = 3'b010,\n        STOP_BIT = 3'b011,\n        ERROR = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] bit_count; // Counter for the 8 data bits\n    logic [7:0] data_byte; // Storage for the data byte\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 4'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state and output logic\n    always_comb begin\n        next_state = current_state;\n        done = 1'b0; // Default output\n\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin // Detect start bit\n                    next_state = START_BIT;\n                end\n            end\n            START_BIT: begin\n                next_state = DATA_BITS;\n                bit_count = 4'b0; // Initialize bit counter\n            end\n            DATA_BITS: begin\n                data_byte[bit_count] = in; // Capture data bit\n                if (bit_count == 4'd7) begin\n                    next_state = STOP_BIT;\n                end else begin\n                    bit_count = bit_count + 1;\n                end\n            end\n            STOP_BIT: begin\n                if (in == 1'b1) begin // Check for stop bit\n                    done = 1'b1; // Byte successfully received\n                    next_state = IDLE;\n                end else begin\n                    next_state = ERROR;\n                end\n            end\n            ERROR: begin\n                if (in == 1'b1) begin // Wait for idle line\n                    next_state = IDLE;\n                end\n            end\n            default: begin\n                next_state = IDLE; // Default transition\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 57,
        "passfail": "R"
    }
}