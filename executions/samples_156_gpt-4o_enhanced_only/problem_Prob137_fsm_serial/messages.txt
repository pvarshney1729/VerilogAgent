[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  in\n - output done\n\nIn many (older) serial communications protocols, each data byte is sent\nalong with a start bit and a stop bit, to help the receiver delimit bytes\nfrom the stream of bits. One common scheme is to use one start bit (0), 8\ndata bits, and 1 stop bit (1). The line is also at logic 1 when nothing\nis being transmitted (idle).\n\nImplement a finite state machine that will identify when bytes have been\ncorrectly received when given a stream of bits. It needs to identify the\nstart bit, wait for all 8 data bits, then verify that the stop bit was\ncorrect. If the stop bit does not appear when expected, the FSM must wait\nuntil it finds a stop bit before attempting to receive the next byte.\nInclude a active-high synchronous reset. Note that the serial protocol\nsends the least significant bit first.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    The module 'TopModule' is designed to interface with a serial communication protocol using the following ports:\n\n- `input logic clk`: Clock signal for synchronizing sequential operations, triggered on the positive edge.\n- `input logic reset`: Active-high synchronous reset signal. When asserted, the system resets to its initial state.\n- `input logic in`: Serial data input stream.\n- `output logic done`: Output signal that indicates successful reception of a complete data byte.\n\nThe module implements a finite state machine (FSM) to process incoming serial data according to the following protocol:\n\n1. **Protocol Overview**:\n   - A data transmission consists of one start bit (logic 0), followed by 8 data bits, and concludes with one stop bit (logic 1).\n   - The line defaults to logic 1 when idle.\n   - Data bits are transmitted starting with the least significant bit (LSB).\n\n2. **FSM Operation**:\n   - **Initial State**: The FSM begins in an idle state, continuously monitoring the input stream for a start bit.\n   - **Start Bit Detection**: Transition from the idle state occurs upon detection of a logic 0 (start bit).\n   - **Data Bit Reception**: After detecting the start bit, the FSM sequentially captures the next 8 bits as data bits.\n     - Bit indexing follows: `bit[0]` represents the least significant bit (LSB) of the data, incrementing to `bit[7]` (most significant bit, MSB).\n   - **Stop Bit Verification**: After receiving the 8 data bits, the FSM checks for a logic 1 stop bit.\n   - **Completion**: If the stop bit is correct, the `done` signal is asserted high for one clock cycle, indicating successful byte reception.\n   - **Error Handling**: If the stop bit is incorrect, the FSM enters an error state, remaining there until a logic 1 (idle/stop bit) is detected, after which it resets to the initial state to await the next start bit.\n\n3. **Reset Behavior**:\n   - The FSM resets to the initial idle state on the assertion of the `reset` signal. All internal state and data registers are cleared.\n\n4. **Edge Cases**:\n   - If the `in` signal does not transition to idle (logic 1) after an incorrect stop bit, the FSM remains in the error state until it does.\n\nThis specification ensures robust handling of the serial data stream, allowing the FSM to correctly receive and validate data bytes within the constraints of the defined protocol.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]