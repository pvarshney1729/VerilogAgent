{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n\n    input logic predict_valid,\n    input logic [6:0] predict_pc,\n    output logic predict_taken,\n    output logic [6:0] predict_history,\n\n    input logic train_valid,\n    input logic train_taken,\n    input logic train_mispredicted,\n    input logic [6:0] train_history,\n    input logic [6:0] train_pc\n);\n\n    // Constants\n    localparam PHT_SIZE = 128;\n    localparam PHT_BITS = 2;\n\n    // Pattern History Table (PHT) - 128 entries, each 2 bits\n    logic [PHT_BITS-1:0] PHT [0:PHT_SIZE-1];\n\n    // Global Branch History Register\n    logic [6:0] global_history;\n\n    // Internal signals\n    logic [6:0] predict_index;\n    logic [6:0] train_index;\n\n    // Compute PHT index by XOR-ing PC with history\n    assign predict_index = predict_pc ^ global_history;\n    assign train_index = train_pc ^ train_history;\n\n    // Output the current state of the global history\n    assign predict_history = global_history;\n\n    // Predict branch taken or not\n    always_comb begin\n        if (predict_valid) begin\n            // Predict branch taken if counter's MSB is 1\n            predict_taken = PHT[predict_index][1];\n        end else begin\n            predict_taken = 1'b0;\n        end\n    end\n\n    // Update logic for PHT and global history register\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            global_history <= 7'b0;\n            // Reset PHT to weakly taken (e.g., 2'b10)\n            for (int i = 0; i < PHT_SIZE; i++) begin\n                PHT[i] <= 2'b10;\n            end\n        end else begin\n            // Update global history register\n            if (train_valid && train_mispredicted) begin\n                // Recover global history for mispredicted branch\n                global_history <= {global_history[5:0], train_taken};\n            end else if (predict_valid) begin\n                // Update global history with prediction outcome\n                global_history <= {global_history[5:0], predict_taken};\n            end\n\n            // Update PHT\n            if (train_valid) begin\n                if (train_taken) begin\n                    if (PHT[train_index] != 2'b11) begin\n                        PHT[train_index] <= PHT[train_index] + 1;\n                    end\n                end else begin\n                    if (PHT[train_index] != 2'b00) begin\n                        PHT[train_index] <= PHT[train_index] - 1;\n                    end\n                end\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 610,
        "passfail": "R"
    }
}