[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n\n - input  predict_valid,\n - input  predict_pc (7 bits)\n - output predict_taken\n - output predict_history (7 bits)\n\n - input  train_valid\n - input  train_taken\n - input  train_mispredicted\n - input  train_history (7 bits)\n - input  train_pc (7 bits)\n\nThe module should implement a gshare branch predictor with 7-bit pc and\n7-bit global history, hashed (using xor) into a 7-bit index. This index\naccesses a 128-entry table of two-bit saturating counters. The branch\npredictor should contain a 7-bit global branch history register. The\nbranch predictor has two sets of interfaces: One for doing predictions\nand one for doing training. The prediction interface is used in the\nprocessor's Fetch stage to ask the branch predictor for branch direction\npredictions for the instructions being fetched. Once these branches\nproceed down the pipeline and are executed, the true outcomes of the\nbranches become known. The branch predictor is then trained using the\nactual branch direction outcomes.\n\nWhen a branch prediction is requested (predict_valid = 1) for a given pc,\nthe branch predictor produces the predicted branch direction and state of\nthe branch history register used to make the prediction. The branch\nhistory register is then updated (at the next positive clock edge) for\nthe predicted branch.\n\nWhen training for a branch is requested (train_valid = 1), the branch\npredictor is told the pc and branch history register value for the branch\nthat is being trained, as well as the actual branch outcome and whether\nthe branch was a misprediction (needing a pipeline flush). Update the\npattern history table (PHT) to train the branch predictor to predict this\nbranch more accurately next time. In addition, if the branch being\ntrained is mispredicted, also recover the branch history register to the\nstate immediately after the mispredicting branch completes execution.\n\nIf training for a misprediction and a prediction (for a different,\nyounger instruction) occurs in the same cycle, both operations will want\nto modify the branch history register. When this happens, training takes\nprecedence, because the branch being predicted will be discarded anyway.\nIf training and prediction of the same PHT entry happen at the same time,\nthe prediction sees the PHT state before training because training only\nmodifies the PHT at the next positive clock edge. The following timing\ndiagram shows the timing when training and predicting PHT entry 0 at the\nsame time. The training request at cycle 4 changes the PHT entry state in\ncycle 5, but the prediction request in cycle 4 outputs the PHT state at\ncycle 4, without considering the effect of the training request in cycle\n4. Reset is asynchronous active-high.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    The module `TopModule` shall be designed with the following interface specifications. All input and output ports are single-bit by default unless explicitly defined otherwise:\n\n- **Inputs:**\n  - `input clk`: Global clock signal, positive-edge triggered.\n  - `input areset`: Asynchronous active-high reset signal.\n  - `input predict_valid`: Indicates a prediction request is valid.\n  - `input [6:0] predict_pc`: 7-bit program counter for prediction, where bit[0] is the least significant bit (LSB).\n  - `input train_valid`: Indicates a training request is valid.\n  - `input train_taken`: Actual outcome of the branch (1 if taken, 0 if not).\n  - `input train_mispredicted`: Indicates if the branch was mispredicted.\n  - `input [6:0] train_history`: 7-bit branch history used during training.\n  - `input [6:0] train_pc`: 7-bit program counter for training, where bit[0] is the LSB.\n\n- **Outputs:**\n  - `output predict_taken`: Predicted branch direction (1 if taken, 0 if not).\n  - `output [6:0] predict_history`: 7-bit branch history register state used for prediction.\n\n**Functional Description:**\n\nThe module implements a gshare branch predictor utilizing the following components:\n- A 7-bit global branch history register.\n- A 128-entry table of 2-bit saturating counters, indexed by the XOR of `predict_pc` and the global branch history.\n\n**Prediction Operation:**\n- When `predict_valid` is asserted, the predictor computes the XOR of `predict_pc` and the global branch history to index into the pattern history table (PHT).\n- The predictor outputs the predicted branch direction through `predict_taken` and the current state of the branch history register via `predict_history`.\n- The global branch history register is updated at the next positive clock edge, following a prediction.\n\n**Training Operation:**\n- When `train_valid` is asserted, the predictor updates the PHT entry indexed by the XOR of `train_pc` and the provided `train_history`.\n- If `train_mispredicted` is asserted, the global branch history register should be restored to the state immediately following the mispredicting branch's execution.\n- Training updates the PHT at the next positive clock edge, allowing the prediction request during the same cycle to access the current state of the PHT before training modifications.\n\n**Conflict Resolution:**\n- If a prediction and a training request occur simultaneously for the same PHT entry, the prediction uses the PHT state before training updates.\n- If both prediction and training require modifications to the branch history register, training takes precedence, as the associated prediction will be discarded due to pipeline flushing.\n\n**Reset Behavior:**\n- On asserting `areset`, all registers, including the global branch history, are asynchronously reset to an initial state (typically all zeros or a specific reset value).\n\n**Timing Considerations:**\n- All sequential elements are triggered on the positive edge of `clk`.\n- The timing diagram provided indicates that training updates the PHT in the cycle following the request, ensuring predictions access the PHT state at the time of their request.\n\nThis specification ensures the correct and clear implementation of a gshare branch predictor with defined behavior during simultaneous prediction and training operations.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]