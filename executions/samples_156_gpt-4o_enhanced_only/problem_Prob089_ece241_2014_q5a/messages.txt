[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  x\n - output z\n\nThe module should implement a one-input one-output serial 2's\ncomplementer Moore state machine. The input (x) is a series of bits (one\nper clock cycle) beginning with the least-significant bit of the number,\nand the output (Z) is the 2's complement of the input. The machine will\naccept input numbers of arbitrary length. The circuit requires a positive\nedge triggered asynchronous reset. The conversion begins when Reset is\nreleased and stops when Reset is asserted. Assume all sequential logic is\ntriggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input clk`: Clock signal for the module. This signal is used to trigger all sequential elements on the rising edge.\n  - `input areset`: Asynchronous reset signal. When asserted (high), it resets the state machine to its initial state. This reset is active high.\n  - `input x`: Serial input bit stream representing the least-significant bit (LSB) first of a binary number. This input is processed one bit per clock cycle.\n\n- Output Ports:\n  - `output z`: Output representing the 2's complement of the input bit stream. The output is one bit corresponding to each input bit processed.\n\nFunctional Description:\n- The module implements a Moore state machine designed to compute the 2's complement of a serially input binary number.\n- The input sequence begins with the least-significant bit (bit[0]) and continues for an arbitrary number of clock cycles.\n- The output `z` provides the 2's complement of the incoming bit stream, bit by bit.\n- The state machine operates based on a Moore model, where the output depends only on the current state, not on the input.\n\nOperational Details:\n- The state machine begins its operation on the release of the asynchronous reset (`areset` goes low).\n- When `areset` is asserted (high), the state machine is reset to its initial state, halting the conversion process immediately.\n- All sequential logic, including state registers, is triggered on the positive edge of the `clk` signal.\n- Upon reset, all state registers and outputs are set to their initial conditions. The specific initial state should be defined to ensure a known starting condition.\n\nEdge Cases and Boundary Conditions:\n- The module must handle input sequences of any length, processing each bit serially on each clock cycle.\n- Proper operation is contingent upon the `areset` being deasserted (low) for the state machine to perform conversions.\n\nNotes on Implementation:\n- Ensure that state transitions and output logic are free from race conditions by carefully defining state and output logic dependencies.\n- Clearly define all state transitions and state encoding to avoid ambiguities in state machine operation.\n- Consider defining a state transition diagram or truth table to aid in implementation, detailing how each input bit is processed to produce the corresponding 2's complement output bit.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]