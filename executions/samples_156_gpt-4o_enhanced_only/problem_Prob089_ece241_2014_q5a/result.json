{
    "code": "module TopModule(\n    input logic clk,\n    input logic areset,\n    input logic x,\n    output logic z\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,   // Initial state\n        INVERT = 2'b01, // State where we start inverting bits\n        ADD_ONE = 2'b10 // State where we add one to the inverted bits\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition on positive edge of clock or asynchronous reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (x == 1'b1) begin\n                    next_state = INVERT;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            INVERT: begin\n                next_state = ADD_ONE;\n            end\n            ADD_ONE: begin\n                next_state = ADD_ONE; // Stay in ADD_ONE until reset\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Output logic (Moore machine: output based only on current state)\n    always_comb begin\n        case (current_state)\n            IDLE: z = 1'b0;\n            INVERT: z = ~x;\n            ADD_ONE: z = x;\n            default: z = 1'b0;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 204,
        "passfail": "R"
    }
}