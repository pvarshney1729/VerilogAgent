[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  load\n - input  ena\n - input  amount (2 bits)\n - input  data (64 bits)\n - output q (64 bits)\n\nThe module should implement a 64-bit arithmetic shift register, with\nsynchronous load. The shifter can shift both left and right, and by 1 or\n8 bit positions, selected by \"amount.\" Assume the right shit is an\narithmetic right shift.\n\nSignals are defined as below:\n\n  (1) load: Loads shift register with data[63:0] instead of shifting.\n       Active high.\n  (2) ena: Chooses whether to shift. Active high.\n  (3) amount: Chooses which direction and how much to shift.\n      (a) 2'b00: shift left by 1 bit.\n      (b) 2'b01: shift left by 8 bits.\n      (c) 2'b10: shift right by 1 bit.\n      (d) 2'b11: shift right by 8 bits.\n  (4) q: The contents of the shifter.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface Description:\n- Input Ports:\n  - `input clk`: Clock signal for synchronization, active on the rising edge.\n  - `input load`: Synchronous load signal, active high. When asserted, the shift register is loaded with `data`.\n  - `input ena`: Enable signal to allow shifting, active high. Shifting occurs only when `ena` is high and `load` is low.\n  - `input [1:0] amount`: 2-bit control signal to determine the shift direction and magnitude.\n  - `input [63:0] data`: 64-bit input data to be loaded into the shift register when `load` is high.\n\n- Output Ports:\n  - `output reg [63:0] q`: 64-bit output representing the current contents of the shift register.\n\nFunctional Description:\n1. The module implements a 64-bit arithmetic shift register with a synchronous load feature.\n2. Shift operations and loading are synchronized with the rising edge of `clk`.\n3. The `load` signal, when high, takes precedence over shifting and loads `q` with the value of `data` on the next rising edge of `clk`.\n4. If `load` is low and `ena` is high, the shift register performs a shift operation based on the `amount` signal:\n   - `amount = 2'b00`: Shift left by 1 bit. New LSB is filled with 0.\n   - `amount = 2'b01`: Shift left by 8 bits. New LSBs are filled with 0.\n   - `amount = 2'b10`: Arithmetic shift right by 1 bit. New MSB retains the previous MSB value.\n   - `amount = 2'b11`: Arithmetic shift right by 8 bits. New MSBs retain the previous MSB value.\n\nInitial Conditions and Assumptions:\n- All registers, including `q`, should be initialized to 0 at the start.\n- The shift register is implemented using sequential logic and operates based on the clock cycle.\n- No asynchronous resets are considered; the design relies on synchronous operations driven by `clk`.\n\nBoundary and Edge Case Considerations:\n- During power-up or reset, ensure that `q` is initialized to 0.\n- If `ena` is low, the content of `q` remains unchanged irrespective of the `amount` value.\n- Ensure that overflow and underflow conditions during shifts are handled by maintaining consistent MSB and LSB padding as described.\n\nSignal Precedence:\n- `load` has the highest precedence, followed by `ena` for shifting operations.\n- When `load` is active, the `amount` and `ena` signals are ignored.\n\nThe design intent is to ensure a predictable and stable operation of the shift register under the described conditions.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]