[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  ena\n - output pm\n - output hh (8 bits)\n - output mm (8 bits)\n - output ss (8 bits)\n\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm\nindicator). Your counters are clocked by a fast-running clk, with a pulse\non ena whenever your clock should increment (i.e., once per second, while\n\"clk\" is much faster than once per second). The signal \"pm\" is asserted\nif the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD\n(Binary- Coded Decimal) digits each for hours (01-12), minutes (00-59),\nand seconds (00-59). Reset is the active high synchronous signal that\nresets the clock to \"12:00 AM.\" Reset has higher priority than enable and\ncan occur even when not enabled. Assume all sequential logic is triggered\non the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `clk`: 1-bit, clock signal for sequential elements, positive edge-triggered.\n  - `reset`: 1-bit, active high synchronous reset, resets the clock to \"12:00 AM\".\n  - `ena`: 1-bit, enable signal for incrementing the clock, active high.\n\n- Output Ports:\n  - `pm`: 1-bit, indicates PM when asserted, otherwise AM.\n  - `hh`: 8-bit, two BCD digits representing hours (01-12).\n  - `mm`: 8-bit, two BCD digits representing minutes (00-59).\n  - `ss`: 8-bit, two BCD digits representing seconds (00-59).\n\nClocking and Logic Behavior:\n- All sequential logic is triggered on the positive edge of `clk`.\n- `reset` takes precedence over `ena` and can reset the clock even when `ena` is not active.\n- On reset (`reset = 1`), initialize `hh` to 8'b00010010 (BCD for \"12\"), `mm` and `ss` to 8'b00000000 (BCD for \"00\"), and `pm` to 0 (AM).\n- When `ena` is asserted (high), increment the clock by one second:\n  - Increment `ss` by 1. If it reaches BCD \"60\" (8'b01100000), reset it to \"00\" and increment `mm`.\n  - Increment `mm` by 1. If it reaches BCD \"60\" (8'b01100000), reset it to \"00\" and increment `hh`.\n  - Increment `hh` by 1. If it reaches BCD \"13\" (8'b00010011), reset it to \"01\" and toggle `pm`.\n  \nEdge Cases:\n- Ensure proper handling of BCD increments and overflows for all time components.\n- Transition from \"11:59:59 AM\" to \"12:00:00 PM\" should correctly toggle `pm`.\n\nBit Indexing Conventions:\n- `hh`, `mm`, and `ss` are 8-bit wide, with `bit[0]` as the least significant bit (LSB).\n\nReset Behavior:\n- Synchronous reset with the highest priority, ensuring the clock resets to a specific state regardless of `ena`.\n\nOperation Precedence:\n- Reset (`reset`) is always prioritized over clock increment (`ena`).\n\nOutput Signal Behavior:\n- `pm` is asserted (1) when the clock time is in the PM period, otherwise it remains deasserted (0) for AM.\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness."
    }
]