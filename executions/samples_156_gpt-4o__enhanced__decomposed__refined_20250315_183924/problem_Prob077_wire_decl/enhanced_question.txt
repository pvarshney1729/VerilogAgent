
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  a
 - input  b
 - input  c
 - input  d
 - output out
 - output out_n

The module should implement the following circuit. Create two
intermediate wires (named anything you want) to connect the AND and OR
gates together. Note that the wire that feeds the NOT gate is really wire
`out`, so you do not necessarily need to declare a third wire here.
Notice how wires are driven by exactly one source (output of a gate), but
can feed multiple inputs.

The circuit is composed of two layers. The first layer, counting from the
input, is two AND gates: one whose input is connected to a and b, and the
second is connected to c and d. The second layer there is an OR gate to
OR the two AND outputs, connected the output 'out'. Additionally, there
is an inverted output 'out_n'.

Here is the enhanced specification which might be useful to you:
                **Module Interface:**
- Module Name: `TopModule`
- Port Definitions:
  - `input wire a`  // Unsigned, 1-bit
  - `input wire b`  // Unsigned, 1-bit
  - `input wire c`  // Unsigned, 1-bit
  - `input wire d`  // Unsigned, 1-bit
  - `output wire out` // Unsigned, 1-bit
  - `output wire out_n` // Unsigned, 1-bit

**Bit Ordering:**
- All ports are single-bit, indexed starting from 0.

**Functional Behavior:**
- This is a combinational logic module.
- Intermediate Wire Naming:
  - `wire and1_out` for the output of the first AND gate (inputs: `a` and `b`).
  - `wire and2_out` for the output of the second AND gate (inputs: `c` and `d`).
- The first layer consists of two AND gates:
  - `and1_out = a & b`
  - `and2_out = c & d`
- The second layer consists of an OR gate:
  - `out = and1_out | and2_out`
- Inverted output:
  - `out_n = ~out`

**Timing Behavior:**
- The design is purely combinational with no clock or reset signals.

**Implementation Notes:**
- Ensure that all wires are driven by exactly one source.
- The NOT gate inversion of `out` to produce `out_n` should be directly wired without declaring additional wires unless necessary for clarity.

**Boundary Conditions:**
- As a combinational logic circuit dealing with 1-bit signals, no specific boundary conditions apply beyond standard digital logic levels (0 and 1).

**Mathematical Expression:**
- `out = (a & b) | (c & d)`
- `out_n = ~(out)`
                