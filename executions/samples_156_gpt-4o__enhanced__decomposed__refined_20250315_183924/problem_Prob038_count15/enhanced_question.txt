
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  reset
 - output q (4 bits)

The module should implement a 4-bit binary counter that counts from 0
through 15, inclusive, with a period of 16. Assume all sequential logic
is triggered on the positive edge of the clock. The reset input is active
high synchronous, and should reset the counter to 0.

Here is the enhanced specification which might be useful to you:
                **Module Interface:**

- **Name**: `TopModule`
- **Inputs**:
  - `input wire clk`: Clock signal (1 bit, unsigned).
  - `input wire reset`: Active high synchronous reset signal (1 bit, unsigned).

- **Outputs**:
  - `output reg [3:0] q`: 4-bit binary counter output, unsigned. Bit index 0 is the least significant bit (LSB).

**Behavior Description:**

- **Counter Functionality**: The module implements a 4-bit binary counter which counts from 0 to 15 (inclusive). The counting operation is cyclic with a period of 16, meaning it wraps around to 0 after reaching 15.

- **Clock Edge Sensitivity**: All sequential logic within this module is sensitive to the positive edge of the `clk` signal.

- **Reset Behavior**: Upon receiving an active high `reset` signal synchronously with `clk`, the counter `q` will be reset to 0 on the next positive clock edge.

**Timing and Dependencies:**

- **Counting Behavior**: The counter increments by 1 on each positive edge of the `clk` unless the `reset` signal is active.

- **Boundary Condition**: When the counter `q` reaches 15, on the next clock cycle, it will wrap around to 0 unless reset is active.

**Implementation Notes:**

- **Synchronous Reset**: The reset is synchronous, meaning it only affects the counter `q` at the time of a clock edge.

- **Initial State**: On power-up, if no reset is applied, the initial state of `q` is assumed to be 0. This should be verified during simulation and synthesis to ensure it aligns with specific tool behavior or additional initialization logic should be considered.

**Naming Convention**: 
- Inputs and outputs are prefixed with their types (`input`, `output`), and signal names are lowercase for clarity and consistency.

**Verilog Code Outline**:
```verilog
module TopModule (
    input wire clk,
    input wire reset,
    output reg [3:0] q
);

always @(posedge clk) begin
    if (reset) begin
        q <= 4'b0000; // Reset state
    end else begin
        if (q == 4'b1111) begin
            q <= 4'b0000; // Wrap around
        end else begin
            q <= q + 1; // Increment
        end
    end
end

endmodule
```

**Verification Suggestions**:
- Simulate the module to verify correct counting and wrap-around behavior.
- Test with synthetic clock and reset signals to ensure synchronous reset functionality.
                