
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  shift_ena
 - input  count_ena
 - input  data
 - output q (4 bits)

The module should implement a four-bit shift register that also acts as a
down counter. Data is shifted in most-significant-bit first when
shift_ena is 1. The number currently in the shift register is decremented
when count_ena is 1. Since the full system doesn't ever use shift_ena and
count_ena together, it does not matter what your circuit does if both
control inputs are 1 (this mainly means that it doesn't matter which case
gets higher priority). Assume all sequential logic is triggered on the
positive edge of the clock.

Here is the enhanced specification which might be useful to you:
                **

### Module Interface

```verilog
module TopModule (
    input wire clk,              // Clock input, triggers on the positive edge
    input wire shift_ena,        // Enable signal for shifting operation
    input wire count_ena,        // Enable signal for counting operation
    input wire data,             // Data input for shift operation
    output reg [3:0] q           // 4-bit output representing shift register content
);
```

### Behavior Specification

1. **Shift Register Operation**:
   - **Shifting**: When `shift_ena` is high (`1`), data is shifted into the register with the `data` input being loaded into the most significant bit (MSB).
   - **Bit-ordering**: `q[3]` is the MSB and `q[0]` is the LSB.

2. **Down Counter Operation**:
   - **Counting**: When `count_ena` is high (`1`), the value in the register `q` is decremented by 1.
   - **Underflow Behavior**: If `q` is `0000` and `count_ena` is high, the register will wrap around to `1111`.

3. **Mutual Exclusivity of Operations**:
   - If both `shift_ena` and `count_ena` are high on the same clock cycle, the behavior is undefined. Ensure external control logic avoids this situation.

### Timing Behavior

- All sequential operations are triggered on the **positive edge** of the `clk` signal.
- The module does not include any combinational paths between inputs and outputs.

### Reset Behavior

- The shift register does not have an explicit reset signal. It is assumed to power up in an unknown state unless initialized by external logic. Users should initialize `q` as required by their specific application.

### Initial States

- The initial value of the shift register `q` is undefined at power-up. It is recommended to use a reset or initialization sequence externally if a specific starting value is desired.

### Implementation Notes

- Ensure that `shift_ena` and `count_ena` signals are mutually exclusive in their active states (`1`) during normal operation to prevent undefined behavior.
- This module assumes that any race conditions due to simultaneous high states of control signals are managed externally.

**
                