
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  c
 - input  d
 - output mux_in (4 bits)

For the following Karnaugh map, give the circuit implementation using one
4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using
as few as possible. You are not allowed to use any other logic gate and
you must use _a_ and _b_ as the multiplexer selector inputs, as shown on
the 4-to-1 multiplexer below.

      ab
  cd  00  01  11  10
  00 | 0 | 0 | 0 | 1 |
  01 | 1 | 0 | 0 | 0 |
  11 | 1 | 0 | 1 | 1 |
  10 | 1 | 0 | 0 | 1 |

Consider a block diagram with inputs 'c' and 'd' going into a module
called "TopModule". This "TopModule" has four outputs, mux_in[3:0], that
connect to a four input mux. The mux takes as input {a,b} and ab = 00 is
connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You
are implementing in Verilog just the portion labelled "TopModule", such
that the entire circuit (including the 4-to-1 mux) implements the K-map.

Here is the enhanced specification which might be useful to you:
                **Module Name**: `TopModule`

**Interface Specification**:
- **Inputs**:
  - `input wire c`: Single-bit input signal.
  - `input wire d`: Single-bit input signal.
  - `input wire a`: Single-bit input signal used as the high-order select line for multiplexers.
  - `input wire b`: Single-bit input signal used as the low-order select line for multiplexers.

- **Outputs**:
  - `output wire [3:0] mux_in`: 4-bit output vector, where `mux_in[0]` corresponds to `ab=00`, `mux_in[1]` to `ab=01`, and so on.

**Behavior Specification**:
- The module `TopModule` is purely combinational, with no clock or reset inputs.
- The output `mux_in` is determined based on the inputs `c` and `d` according to the provided Karnaugh map:

      ab
  cd  00  01  11  10
  00 | 0 | 0 | 0 | 1 |
  01 | 1 | 0 | 0 | 0 |
  11 | 1 | 0 | 1 | 1 |
  10 | 1 | 0 | 0 | 1 |

- Each cell in the Karnaugh map corresponds to a specific combination of `c` and `d`, determining the value of `mux_in` for each `ab` combination.

**Implementation Notes**:
- Implement the logic using exactly one 4-to-1 multiplexer with `mux_in` as its input, and `a` and `b` as select lines.
- Use as many 2-to-1 multiplexers as necessary to derive `mux_in[3:0]` from `c` and `d`, but minimize the count of such multiplexers.
- The implementation should strictly adhere to the combinational logic implied by the Karnaugh map, ensuring no additional gates are used.

**Boundary Conditions**:
- As this is a combinational logic circuit, it does not require a defined behavior for undefined or invalid states beyond those specified by the Karnaugh map.
                