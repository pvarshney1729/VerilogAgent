{
    "code": "module TopModule (\n    input logic clk,         // Clock signal\n    input logic load,        // Synchronous active high load signal\n    input logic [1:0] ena,   // 2-bit synchronous enable for rotation\n    input logic [99:0] data, // 100-bit input data, MSB: data[99], LSB: data[0]\n    output logic [99:0] q    // 100-bit output, MSB: q[99], LSB: q[0]\n);\n\n    always @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else begin\n            case (ena)\n                2'b01: q <= {q[0], q[99:1]};  // Rotate right\n                2'b10: q <= {q[98:0], q[99]}; // Rotate left\n                default: q <= q;              // No rotation\n            endcase\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations": [
        {
            "iteration": 0,
            "code": "module TopModule (\n    input logic clk,         // Clock signal\n    input logic load,        // Synchronous active high load signal\n    input logic [1:0] ena,   // 2-bit synchronous enable for rotation\n    input logic [99:0] data, // 100-bit input data, MSB: data[99], LSB: data[0]\n    output logic [99:0] q    // 100-bit output, MSB: q[99], LSB: q[0]\n);\n\n    always @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else begin\n            case (ena)\n                2'b01: q <= {q[0], q[99:1]};  // Rotate right\n                2'b10: q <= {q[98:0], q[99]}; // Rotate left\n                default: q <= q;              // No rotation\n            endcase\n        end\n    end\n\nendmodule",
            "issues": []
        }
    ],
    "refinement_count": 0,
    "remaining_issues": []
}