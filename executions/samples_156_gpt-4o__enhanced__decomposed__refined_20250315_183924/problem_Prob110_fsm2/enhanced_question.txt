
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  areset
 - input  j
 - input  k
 - output out

The module should implement a Moore state machine with two states, two
inputs, and one output according to diagram described below. Reset is an
active-high asynchronous reset to state OFF.

  OFF (out=0) --j=0--> OFF
  OFF (out=0) --j=1--> ON
  ON  (out=1) --k=0--> ON
  ON  (out=1) --k=1--> OFF

Here is the enhanced specification which might be useful to you:
                ### Enhanced Specification for `TopModule`

#### 1. Interface
- **Clock and Reset:**
  - `input wire clk;`  // Clock signal
  - `input wire areset;`  // Active-high asynchronous reset signal

- **Inputs:**
  - `input wire j;`  // Input signal 'j'
  - `input wire k;`  // Input signal 'k'

- **Output:**
  - `output reg out;`  // Output signal 'out', determined by the current state

#### 2. States
The module implements a Moore state machine with the following states:
- **State OFF**: Output `out` is 0.
- **State ON**: Output `out` is 1.

#### 3. Reset Behavior
- The reset (`areset`) is active-high and asynchronous:
  - When `areset` is asserted, the state machine transitions immediately to the OFF state, and `out` is set to 0.

#### 4. State Transition Table
| Current State | j | k | Next State | Output |
|---------------|---|---|------------|--------|
| OFF           | 0 | X | OFF        | 0      |
| OFF           | 1 | X | ON         | 0      |
| ON            | X | 0 | ON         | 1      |
| ON            | X | 1 | OFF        | 1      |

- X denotes a "don't care" condition.

#### 5. Timing Behavior
- State transitions occur on the rising edge of `clk`.
- The output `out` is determined solely by the current state and is updated at the same time as the state transition, characteristic of a Moore machine.

#### 6. Implementation Notes
- The module assumes that both `j` and `k` are not asserted simultaneously. If both are asserted, the behavior defaults to the state transition determined by the current state and the non-don't-care input.
- Assumes binary state encoding for simplicity, with `OFF` as 0 and `ON` as 1.

#### 7. Initial States
- Upon power-up, the module should initialize to the OFF state if no reset is applied.

#### 8. Verilog Implementation Template
```verilog
module TopModule (
    input wire clk,
    input wire areset,
    input wire j,
    input wire k,
    output reg out
);
    // State encoding
    typedef enum reg {OFF = 1'b0, ON = 1'b1} state_t;
    state_t current_state, next_state;

    // State transition logic
    always @(posedge clk or posedge areset) begin
        if (areset) begin
            current_state <= OFF;
        end else begin
            current_state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (current_state)
            OFF: begin
                if (j)
                    next_state = ON;
                else
                    next_state = OFF;
            end
            ON: begin
                if (k)
                    next_state = OFF;
                else
                    next_state = ON;
            end
        endcase
    end

    // Output logic
    always @(*) begin
        case (current_state)
            OFF: out = 1'b0;
            ON: out = 1'b1;
        endcase
    end
endmodule
```
                