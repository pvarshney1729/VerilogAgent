
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  reset
 - input  in
 - output out

Implement the following Moore state machine with two states, one input,
and one output. The reset state is B and reset is active-high
synchronous.

  B (out=1) --in=0--> A
  B (out=1) --in=1--> B
  A (out=0) --in=0--> B
  A (out=0) --in=1--> A

Here is the enhanced specification which might be useful to you:
                **Module Name**: TopModule

**Interface**:
```verilog
module TopModule (
    input wire clk,       // Clock signal
    input wire reset,     // Active-high synchronous reset
    input wire in,        // Input signal
    output reg out        // Output signal, driven by state
);
```

**State Machine Description**:
- **State Definitions**:
  - `B`: Output `out` is `1`.
  - `A`: Output `out` is `0`.

- **Initial State**:
  - Upon reset, the state is `B` and `out` is `1`.

- **State Transitions (Moore Machine)**:
  - From state `B`:
    - If `in == 0`, transition to state `A`.
    - If `in == 1`, remain in state `B`.
  - From state `A`:
    - If `in == 0`, transition to state `B`.
    - If `in == 1`, remain in state `A`.

**Timing Behavior**:
- State transitions occur on the rising edge of the `clk` signal.
- The `reset` is synchronous; state transitions and output updates occur immediately following the rising edge of `clk` when `reset` is asserted.

**Reset Behavior**:
- When `reset` is asserted (`reset == 1`), the state machine enters state `B` and the output `out` is set to `1`, regardless of the `in` signal.

**Implementation Notes**:
- Ensure that the state transitions and output logic are implemented in a non-blocking manner within a sequential always block triggered by the rising edge of `clk` and `reset`.

**Formal Representation** (State Transition Table):
| Current State | Input `in` | Next State | Output `out` |
|---------------|------------|------------|--------------|
| B             | 0          | A          | 1            |
| B             | 1          | B          | 1            |
| A             | 0          | B          | 0            |
| A             | 1          | A          | 0            |

**Edge Case Handling**:
- Ensure that all state transitions are deterministic based on the input `in` and the current state.
- Confirm that no invalid state transitions or outputs occur due to edge cases or glitches.
                