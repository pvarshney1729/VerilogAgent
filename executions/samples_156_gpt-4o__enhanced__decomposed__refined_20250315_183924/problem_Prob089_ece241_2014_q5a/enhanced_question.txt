
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  areset
 - input  x
 - output z

The module should implement a one-input one-output serial 2's
complementer Moore state machine. The input (x) is a series of bits (one
per clock cycle) beginning with the least-significant bit of the number,
and the output (Z) is the 2's complement of the input. The machine will
accept input numbers of arbitrary length. The circuit requires a positive
edge triggered asynchronous reset. The conversion begins when Reset is
released and stops when Reset is asserted. Assume all sequential logic is
triggered on the positive edge of the clock.

Here is the enhanced specification which might be useful to you:
                **Module Name: TopModule**

**Interface:**
- **Inputs:**
  - `input wire clk`: Clock signal; positive edge-triggered.
  - `input wire areset`: Asynchronous reset signal, active high.
  - `input wire x`: Serial input bit stream representing a binary number in least-significant bit first order.

- **Outputs:**
  - `output reg z`: Serial output bit stream representing the 2's complement of the input number.

**Signal Characteristics:**
- All ports are 1-bit wide.
- All signals are unsigned.

**Behavioral Specification:**
- The module implements a Moore state machine for serial 2’s complement conversion.
- **State Machine:**
  - **Initial State**: Upon asserting `areset` (active high), the state machine returns to its initial state where it awaits the start of a new input series upon deassertion of `areset`.
  - **Transition**: On each positive clock edge, the state machine transitions based on the current state and the input `x`.
  - **2’s Complement Operation**:
    - The output `z` is generated by inverting the `x` input bit and adding a carry from the previous bit when necessary.

**Timing and Reset Behavior:**
- The `areset` signal is asynchronous and active high. When `areset` is deasserted, the state machine begins processing from the initial state.
- The `clk` signal triggers all state transitions and output updates on its positive edge.
- The state machine resets to an initial state upon `areset`.

**Implementation Notes:**
- The 2's complement operation is performed over multiple clock cycles with `z` being produced in the same bit order as received.
- The conversion process is paused when `areset` is asserted and resumed when it’s deasserted.

**Boundary Conditions:**
- The module assumes continuous operation; if the input series is interrupted or prematurely terminated, the behavior is undefined until a new series is introduced.
- Proper operation assumes valid input data are provided on each clock cycle.
                