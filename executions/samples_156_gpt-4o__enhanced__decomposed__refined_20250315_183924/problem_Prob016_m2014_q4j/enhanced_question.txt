
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  x   (4 bits)
 - input  y   (4 bits)
 - output sum (5 bits)

Implement a 4-bit adder with full adders. The output sum should include
the overflow bit.

Here is the enhanced specification which might be useful to you:
                **Module Name**: `TopModule`

**Interface**:
```verilog
module TopModule (
    input  wire [3:0] x,    // 4-bit input vector x, interpreted as unsigned
    input  wire [3:0] y,    // 4-bit input vector y, interpreted as unsigned
    output wire [4:0] sum   // 5-bit output vector sum, where sum[4] is the overflow bit
);
```

**Behavior**:
- The module implements a combinational 4-bit adder using full adders.
- The input signals `x` and `y` are treated as unsigned 4-bit binary numbers.
- The output `sum` is a 5-bit vector, where:
  - `sum[3:0]` represents the 4-bit binary sum of `x` and `y`.
  - `sum[4]` is the overflow bit, set when the addition of `x` and `y` exceeds the 4-bit range.

**Bit-Ordering**:
- The inputs `x` and `y` are indexed from 0 to 3, where `x[0]` and `y[0]` are the least significant bits (LSB), and `x[3]` and `y[3]` are the most significant bits (MSB).
- Similarly, `sum[0]` is the LSB of the sum, and `sum[4]` is the MSB, representing the overflow.

**Combinational Logic**:
- This module is entirely combinational and does not involve any clocked elements or sequential logic components.

**Overflow Handling**:
- Overflow occurs when the sum of `x` and `y` produces a carry out from the most significant bit, which is captured in `sum[4]`.

**Implementation Notes**:
- The adder is implemented using four full adder components. Each full adder takes two input bits and a carry-in bit, producing a sum bit and a carry-out bit.
- The carry-out from each full adder is connected as the carry-in to the next most significant full adder.

**Boundary Conditions**:
- The module correctly handles all possible 4-bit input combinations for `x` and `y`.
- The outputs are valid for all possible input combinations within the specified range.
                