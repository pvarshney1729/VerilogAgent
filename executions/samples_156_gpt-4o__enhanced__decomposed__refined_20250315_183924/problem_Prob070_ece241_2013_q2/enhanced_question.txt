
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

  - input  a
  - input  b
  - input  c
  - input  d
  - output out_sop
  - output out_pos

The module should implement a digital system with four inputs (a,b,c,d)
that generates a logic-1 when 2, 7, or 15 appears on the inputs, and a
logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input
conditions for the numbers 3, 8, 11, and 12 never occur in this system.
For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively.
Determine the output out_sop in minimum sum-of-products form, and the
output out_pos in minimum product-of-sums form.

Here is the enhanced specification which might be useful to you:
                ### Module Specification: TopModule

#### Interface Definition
- **Inputs**:
  - `input [3:0] in`: A 4-bit input vector where bits are {`a`, `b`, `c`, `d`}, with `a` as MSB and `d` as LSB.
    - `bit[3]` (`a`): Most significant bit
    - `bit[2]` (`b`)
    - `bit[1]` (`c`)
    - `bit[0]` (`d`): Least significant bit

- **Outputs**:
  - `output out_sop`: Result in minimum sum-of-products form.
  - `output out_pos`: Result in minimum product-of-sums form.

#### Functional Behavior
- **Output Logic**:
  - `out_sop` should be high (logic-1) if the input vector `in` represents decimal values 2, 7, or 15.
  - `out_sop` should be low (logic-0) if the input vector `in` represents decimal values 0, 1, 4, 5, 6, 9, 10, 13, or 14.
  - Inputs representing decimal values 3, 8, 11, and 12 are considered don't-care conditions for `out_sop` and `out_pos`.

- **Logic Expressions**:
  - **Minimum Sum-of-Products (SOP) Expression**:
    - `out_sop = (~a & ~b & c & ~d) | (~a & b & c & d) | (a & b & c & d)`
  - **Minimum Product-of-Sums (POS) Expression**:
    - `out_pos = (a | b | c | ~d) & (a | ~b | ~c | d) & (~a | ~b | ~c | ~d)`

#### Timing and Combinational Logic
- This module is purely combinational; there are no clock or reset signals.
- The outputs are determined solely by the current values of the inputs without any delay.

#### Implementation Notes
- Ensure consistent bit ordering and indexing in the implementation to prevent logic errors.
- Use the defined logic expressions directly in the Verilog implementation for `out_sop` and `out_pos`.
- Treat unspecified input conditions (3, 8, 11, 12) as don't-cares to potentially simplify the logic further.
                