
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  L
 - input  q_in
 - input  r_in
 - output Q

Consider this Verilog module "full_module":

  module full_module (
      input [2:0] r,
      input L,
      input clk,
      output reg [2:0] q);

    always @(posedge clk) begin
      if (L) begin
        q <= r;
      end else begin
        q <= {q[1] ^ q[2], q[0], q[2]};
      end
    end

  endmodule

Note that q[2:0] is three bits wide, representing three flip-flops that can be
loaded from r when L is asserted. You want to factor full_module into a hierarchical
design, flipflop and 2:1 multiplexer are in a submodule "TopModule", and that submodule
will be instantiated three times in full_module code. Create the submodule called "TopModule".
You do not have to provide the revised full_module.

Here is the enhanced specification which might be useful to you:
                **TopModule Specification**

**1. Interface:**
- **Inputs:**
  - `clk`: Clock signal, 1-bit, active on the rising edge.
  - `L`: Load signal, 1-bit, active high.
  - `q_in`: Data input for the flip-flop, 1-bit.
  - `r_in`: Data input for the multiplexer, 1-bit.
- **Outputs:**
  - `Q`: Output of the module, 1-bit.

**2. Behavior:**
- **Functionality**: 
  - The "TopModule" implements a 2:1 multiplexer and a D-type flip-flop.
  - On each rising edge of the clock (`clk`), if the load (`L`) signal is high, the output (`Q`) is set to the value of `r_in`.
  - If `L` is low, the output (`Q`) is set to the value of `q_in`.
  
**3. Timing Behavior:**
- The module is sequential, with operations triggered on the rising edge of the `clk` signal.
- The multiplexer selects between `r_in` and `q_in` based on the `L` signal.

**4. Reset Behavior:**
- The specification does not include a reset signal, thus assuming no explicit reset behavior. Initial values should be defined in the full module that instantiates "TopModule".

**5. Bit-Ordering:**
- The input and output are single bits, so bit-ordering and indexing are not applicable here.

**6. Implementation Notes:**
- Ensure that the design avoids race conditions by clearly defining the precedence of the multiplexer operations relative to the clock edge.
- The "TopModule" should be implemented such that it can be instantiated three times in the `full_module`, with each instance managing one bit of the 3-bit `q` register.

**7. Boundary Conditions:**
- The module does not inherently handle any specific edge cases due to its single-bit nature. Boundary conditions should be managed at the system level where the module is instantiated.

**Example Verilog Implementation of "TopModule":**

```verilog
module TopModule (
    input wire clk,
    input wire L,
    input wire q_in,
    input wire r_in,
    output reg Q
);

    always @(posedge clk) begin
        if (L) begin
            Q <= r_in;
        end else begin
            Q <= q_in;
        end
    end

endmodule
```

**End of Enhanced Specification**
                