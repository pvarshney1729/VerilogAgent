
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  reset
 - input  s (3 bits)
 - output fr2
 - output fr1
 - output fr0
 - output dfr

A large reservior of water serves several users. In order to keep the
level of water succificently high, three sensors are placed vertically at
5-inch intervals. When the water level is above the highest sensor s[2],
the input flow rate should be zero. When the level is below the lowest
sensor s[0], the flow rate should be at maximum (both Nominal flow valve
and Supplemental flow valve opened). The flow rate when the level is
between the upper and lower sensors is determined by two factors: the
water level and the level previous to the last sensor change. Each water
level has a nominal flow rate associated with it as show in the table
below. If the sensor change indicates that the previous level was lower
than the current level, the flow rate should be increased by opening the
Supplemental flow valve (controlled by dfr).

  Water Level           | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted
  Above s[2]            | s[0], s[1], s[2] | None
  Between s[2] and s[1] | s[0], s[1]       | fr0
  Between s[1] and s[0] | s[0]             | fr0, fr1
  Below s[0]            | None             | fr0, fr1, fr2

Also include an active-high synchronous reset that resets the state
machine to a state equivalent to if the water level had been low for a
long time (no sensors asserted, and all four outputs asserted).

Here is the enhanced specification which might be useful to you:
                **Module Interface:**
```verilog
module TopModule (
    input wire clk,              // Clock signal, positive edge triggered
    input wire reset,            // Active-high synchronous reset
    input wire [2:0] s,          // 3-bit unsigned sensor input, s[2]: MSB, s[0]: LSB
    output reg fr2,              // Output for flow control, 1-bit
    output reg fr1,              // Output for flow control, 1-bit
    output reg fr0,              // Output for flow control, 1-bit
    output reg dfr               // Output for supplemental flow control, 1-bit
);
```

**Behavior and Logic Description:**

1. **Water Level and Flow Control Logic:**

   - **Above s[2]**: If all sensors `s[2:0]` are high, set `fr2 = 0`, `fr1 = 0`, `fr0 = 0`, `dfr = 0`.
   - **Between s[2] and s[1]**: If `s[2:1]` are high and `s[0]` is low, set `fr0 = 1`, `fr1 = 0`, `fr2 = 0`.
   - **Between s[1] and s[0]**: If `s[1]` is high and `s[2]` and `s[0]` are low, set `fr0 = 1`, `fr1 = 1`, `fr2 = 0`.
   - **Below s[0]**: If all sensors `s[2:0]` are low, set `fr0 = 1`, `fr1 = 1`, `fr2 = 1`.

2. **Supplemental Flow Control (`dfr`)**:
   - `dfr` is asserted (`1`) if the previous water level was lower than the current level and at least one sensor status has changed, indicating an increase in water level between clock cycles.

**Timing Behavior:**

- **Sequential Logic**: The control logic for flow rates is synchronous with the clock. State transitions and output changes occur on the rising edge of `clk`.

- **Reset Behavior**: On the rising edge of `clk` and if `reset` is asserted (`1`), the system resets to the state where:
  - All sensors are unasserted (`s[2:0]` = `000`).
  - All flow outputs `fr2`, `fr1`, `fr0`, and `dfr` are asserted (`1`).

**Implementation Notes:**

- **State History**: Maintain a register to track the previous sensor state to determine changes in water level. This is necessary for correctly setting `dfr`.

- **Edge Cases**: Ensure glitch filtering or debounce logic is implemented if sensor inputs are noisy.

- **Bit Indexing**: Follow a convention where `s[2]` is the most significant bit (highest sensor), and `s[0]` is the least significant bit (lowest sensor).

- **Assumptions**: It is assumed that sensor inputs are stable between clock cycles and that no simultaneous changes in multiple sensors occur.

**Boundary Conditions:**

- Handle transitions smoothly between states when sensors change due to water level fluctuation.
- Consider adding hysteresis or filtering to prevent rapid toggling of outputs if sensor readings fluctuate near thresholds.
                