
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  enable
 - input  S
 - input  A
 - input  B
 - input  C
 - output Z

The module should implement a circuit for an 8x1 memory, where writing to
the memory is accomplished by shifting-in bits, and reading is "random
access", as in a typical RAM. You will then use the circuit to realize a
3-input logic function. First, create an 8-bit shift register with 8
D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The
shift register input should be called S, which feeds the input of Q[0]
(MSB is shifted in first). The enable input is synchronous active high
and controls whether to shift. Extend the circuit to have 3 additional
inputs A,B,C and an output Z. The circuit's behaviour should be as
follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on.
Your circuit should contain ONLY the 8-bit shift register, and
multiplexers. Assume all sequential logic is triggered on the positive
edge of the clock.

Here is the enhanced specification which might be useful to you:
                **Module Name:**
- `TopModule`

**Interface:**
- **Inputs:**
  - `input wire clk;` // Clock input, positive edge-triggered
  - `input wire enable;` // Synchronous active-high enable for shifting
  - `input wire S;` // Serial data input for shift register
  - `input wire A;` // Address input for multiplexer
  - `input wire B;` // Address input for multiplexer
  - `input wire C;` // Address input for multiplexer
- **Outputs:**
  - `output wire Z;` // Output of the multiplexer based on the address input

**Behavior:**

- **Shift Register:**
  - Implement an 8-bit shift register using D-type flip-flops.
  - Label outputs as `Q[0]` to `Q[7]`, where `Q[0]` is the least significant bit and `Q[7]` is the most significant bit.
  - Data is shifted in from `S` to `Q[0]` (LSB).

- **Multiplexer:**
  - Use a 3-to-8 line decoder or equivalent logic to select one of the bits `Q[0]` through `Q[7]` based on the 3-bit address `ABC`.
  - Output `Z` reflects the selected bit from the shift register.

**Timing and Control:**

- **Clocking:**
  - All sequential elements are triggered on the positive edge of `clk`.
  
- **Enable and Reset:**
  - The `enable` signal is synchronous and controls the shifting operation. When `enable` is high, shifting occurs on each positive clock edge.
  - A reset signal could be added for initialization purposes, although not explicitly required. If added, it should be synchronous and reset the shift register to a known state (e.g., all zeros).

- **Initial States:**
  - Upon reset or initialization, all bits in the shift register should be set to `0`.

**Implementation Notes:**

- **Bit-Ordering:**
  - `Q[0]` is the least significant bit (LSB) and `Q[7]` is the most significant bit (MSB).
  
- **Address Mapping:**
  - When `ABC` is `000`, `Z = Q[0]`.
  - When `ABC` is `001`, `Z = Q[1]`.
  - ...
  - When `ABC` is `111`, `Z = Q[7]`.

**Boundary Conditions:**

- Ensure that the multiplexer operates correctly when `enable` is low; the output `Z` should still reflect the current state of `Q[ABC]`.
                