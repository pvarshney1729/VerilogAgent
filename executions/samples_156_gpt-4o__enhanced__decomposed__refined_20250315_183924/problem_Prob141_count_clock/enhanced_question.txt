
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  reset
 - input  ena
 - output pm
 - output hh (8 bits)
 - output mm (8 bits)
 - output ss (8 bits)

Create a set of counters suitable for use as a 12-hour clock (with am/pm
indicator). Your counters are clocked by a fast-running clk, with a pulse
on ena whenever your clock should increment (i.e., once per second, while
"clk" is much faster than once per second). The signal "pm" is asserted
if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD
(Binary- Coded Decimal) digits each for hours (01-12), minutes (00-59),
and seconds (00-59). Reset is the active high synchronous signal that
resets the clock to "12:00 AM." Reset has higher priority than enable and
can occur even when not enabled. Assume all sequential logic is triggered
on the positive edge of the clock.

Here is the enhanced specification which might be useful to you:
                **Analysis of Ambiguities and Issues:**

1. **Signal Interfaces:**
   - Input and output ports are not explicitly defined for bit widths and signedness. This can lead to confusion in implementation.
   - The naming convention for signals is not fully consistent or descriptive.

2. **Bit-Ordering:**
   - There is no explicit mention of the bit-ordering (e.g., MSB/LSB) for multi-bit signals like `hh`, `mm`, and `ss`.

3. **Timing Behavior:**
   - The specification mentions that the "clk" is faster than the enable signal, but it doesn't specify how "ena" is generated relative to "clk".

4. **Reset Behavior:**
   - The reset is described as active high and synchronous, but the behavior of the clock post-reset is not comprehensively detailed.

5. **Initial States:**
   - The initial state post-reset is described as "12:00 AM," but the exact binary values for `hh`, `mm`, and `ss` are not specified.

6. **Dependencies:**
   - The specification does not clearly define the operation precedence when both `reset` and `ena` are active.

7. **Logical Descriptions:**
   - The specification lacks details on the counting logic for hours, minutes, and seconds, particularly the transition from 12 hours to 1 hour and from 59 minutes/seconds to 0.

8. **Boundary Conditions:**
   - There is no explicit description of the behavior when transitioning from AM to PM and vice versa.

**<ENHANCED_SPEC>**

**Enhanced Specification for TopModule:**

**Module Interface:**
- Module Name: `TopModule`
- Ports:
  - `input wire clk`: Clock signal, positive edge-triggered.
  - `input wire reset`: Active high, synchronous reset.
  - `input wire ena`: Enable signal, asserted once per second.
  - `output reg pm`: PM indicator, 1 if PM, 0 if AM.
  - `output reg [7:0] hh`: Hours in BCD, range `01` to `12`.
  - `output reg [7:0] mm`: Minutes in BCD, range `00` to `59`.
  - `output reg [7:0] ss`: Seconds in BCD, range `00` to `59`.

**Bit-Ordering:**
- All multi-bit outputs are defined with `bit[7:4]` as the tens digit and `bit[3:0]` as the units digit, with `bit[0]` as the least significant bit.

**Behavior:**
- **Reset Behavior:**
  - On the assertion of `reset`, the module initializes to "12:00:00 AM":
    - `hh` = `8'b00010010` (BCD for `12`)
    - `mm` = `8'b00000000` (BCD for `00`)
    - `ss` = `8'b00000000` (BCD for `00`)
    - `pm` = `0` (AM)
- **Counting Behavior:**
  - When `ena` is asserted:
    - Increment `ss` by 1.
    - If `ss` reaches `8'b01011001` (BCD for `59`), it resets to `8'b00000000` and increments `mm`.
    - If `mm` reaches `8'b01011001`, it resets to `8'b00000000` and increments `hh`.
    - If `hh` reaches `8'b00010010` (BCD for `12`), it resets to `8'b00000001` (BCD for `01`) and toggles `pm`.
- **Operational Priorities:**
  - `reset` has the highest priority and is processed before `ena`.

**Timing and Clocking:**
- All operations are synchronized to the positive edge of `clk`.

**Boundary Conditions:**
- Transition from `11:59:59 AM` to `12:00:00 PM` and vice versa is handled by toggling `pm` appropriately.

**Implementation Notes:**
- Ensure the BCD representation is maintained throughout the counting logic.
- Implement appropriate logic to handle the transitions between AM and PM correctly.

**<ENHANCED_SPEC>**
                