
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  in  (8  bits)
 - output out (32 bits)

One common place to see a replication operator is when sign-extending a
smaller number to a larger one, while preserving its signed value. This
is done by replicating the sign bit (the most significant bit) of the
smaller number to the left. For example, sign-extending 4'b0101 (5) to 8
bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8
bits results in 8'b11111101 (-3). Implement a module that sign-extends an
8-bit number to 32 bits. This requires a concatenation of 24 copies of
the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit
number itself.

Here is the enhanced specification which might be useful to you:
                #### Module Interface

- **Module Name**: `TopModule`
- **Inputs**:
  - `input [7:0] in;` // 8-bit input signal, treated as signed for sign-extension purposes.
- **Outputs**:
  - `output [31:0] out;` // 32-bit output signal.

#### Signal Properties

- **Signedness**: The 8-bit input is treated as a signed number for the purpose of sign extension.
- **Bit-Ordering**: The input uses a standard 0-based index from least significant bit (LSB, bit 0) to most significant bit (MSB, bit 7).

#### Functional Behavior

- **Sign-Extension Description**:
  - The module performs a sign-extension on the 8-bit input to produce a 32-bit output.
  - The most significant bit (bit 7) of the input is replicated 24 times for the upper bits of the output.
  - The lower 8 bits of the output directly correspond to the input bits.
  
  **Formal Expression**:
  ```verilog
  assign out = {{24{in[7]}}, in[7:0]};
  ```

#### Timing and Logic Type

- **Logic Type**: The module is purely combinational with no internal state or sequential logic elements.
- **Timing**: The output `out` is immediately updated with any change in input `in`.

#### Reset and Initial State

- **Reset**: Not applicable, as the module is purely combinational and does not store state.
- **Initial State**: Not applicable for combinational logic.

#### Additional Notes

- **Boundary Conditions**: The module correctly handles all input values from `8'b00000000` to `8'b11111111`, ensuring proper sign extension for both positive and negative numbers within the 8-bit signed range.

#### Implementation Notes

- **Synthesis Considerations**: Ensure the target synthesis tool supports the concatenation operation as described. The design should be compatible with both simulation and synthesis environments.
                