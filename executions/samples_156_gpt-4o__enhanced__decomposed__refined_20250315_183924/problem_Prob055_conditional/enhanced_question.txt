
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  a   (8 bits)
 - input  b   (8 bits)
 - input  c   (8 bits)
 - input  d   (8 bits)
 - output min (8 bits)

The module should find the minimum of the four input values. Unsigned
numbers can be compared with standard comparison operators (a < b).

Here is the enhanced specification which might be useful to you:
                **Module Name:**
- `TopModule`

**Signal Interfaces:**
- **Inputs:**
  - `input [7:0] a`: 8-bit unsigned input representing one of the values to compare.
  - `input [7:0] b`: 8-bit unsigned input representing one of the values to compare.
  - `input [7:0] c`: 8-bit unsigned input representing one of the values to compare.
  - `input [7:0] d`: 8-bit unsigned input representing one of the values to compare.

- **Outputs:**
  - `output [7:0] min_value`: 8-bit unsigned output representing the minimum of the four input values.

**Bit-Ordering:**
- All inputs (`a`, `b`, `c`, `d`) and output (`min_value`) are treated as 8-bit unsigned integers, with bit[7] as the most significant bit (MSB) and bit[0] as the least significant bit (LSB).

**Behavior:**
- The module will calculate the minimum value among the four inputs (`a`, `b`, `c`, `d`) and assign this value to the output `min_value`.
- If two or more inputs have the same minimum value, any one of the minimum values can be assigned to `min_value`.

**Timing Behavior:**
- The module is purely combinational and does not incorporate any clock signal or sequential elements.

**Reset Behavior and Initial States:**
- Not applicable as the module is combinational.

**Boundary Conditions:**
- Ensure correct functionality when all inputs have the same value. The output `min_value` should match any of the input values.
- Handle the maximum possible input values (255 for each input) correctly.

**Implementation Notes:**
- Use standard comparison operators for unsigned integers to determine the minimum value.
- Ensure that the output `min_value` is correctly driven based on the comparisons of all four inputs.

**Example:**
```verilog
module TopModule (
    input [7:0] a,
    input [7:0] b,
    input [7:0] c,
    input [7:0] d,
    output reg [7:0] min_value
);
    always @(*) begin
        if (a <= b && a <= c && a <= d) begin
            min_value = a;
        end else if (b <= a && b <= c && b <= d) begin
            min_value = b;
        end else if (c <= a && c <= b && c <= d) begin
            min_value = c;
        end else begin
            min_value = d;
        end
    end
endmodule
```
                