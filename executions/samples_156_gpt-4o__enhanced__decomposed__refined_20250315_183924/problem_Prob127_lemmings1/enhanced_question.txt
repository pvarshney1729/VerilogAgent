
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  areset
 - input  bump_left
 - input  bump_right
 - output walk_left
 - output walk_right

The module should implement a simple game called Lemmings which involves
critters with fairly simple brains. So simple that we are going to model
it using a finite state machine. In the Lemmings' 2D world, Lemmings can
be in one of two states: walking left (walk_left is 1) or walking right
(walk_right is 1). It will switch directions if it hits an obstacle. In
particular, if a Lemming is bumped on the left (by receiving a 1 on
bump_left), it will walk right. If it's bumped on the right (by receiving
a 1 on bump_right), it will walk left. If it's bumped on both sides at
the same time, it will still switch directions.

The module should implement a Moore state machine with two states, two
inputs, and one output (internal to the module) that models this
behaviour. areset is positive edge triggered asynchronous resetting the
Lemming machine to walk left. Assume all sequential logic is triggered on
the positive edge of the clock.

Here is the enhanced specification which might be useful to you:
                ### Module Interface

```verilog
module TopModule (
    input wire clk,            // Clock signal, assumed positive edge triggered
    input wire areset,         // Asynchronous reset, active high
    input wire bump_left,      // Input signal indicating an obstacle on the left
    input wire bump_right,     // Input signal indicating an obstacle on the right
    output reg walk_left,      // Output signal indicating the Lemming is walking left
    output reg walk_right      // Output signal indicating the Lemming is walking right
);
```

### Behavior Specification

- **State Encoding**: 
  - `STATE_LEFT` (0): Lemming walks left.
  - `STATE_RIGHT` (1): Lemming walks right.

- **Initial State**: 
  - On `areset`, the Lemming should be in `STATE_LEFT`, with `walk_left` set to 1 and `walk_right` set to 0.

- **State Transitions**:
  - From `STATE_LEFT`:
    - If `bump_left` is high, transition to `STATE_RIGHT`.
    - If both `bump_left` and `bump_right` are high, transition to `STATE_RIGHT`.
  - From `STATE_RIGHT`:
    - If `bump_right` is high, transition to `STATE_LEFT`.
    - If both `bump_left` and `bump_right` are high, transition to `STATE_LEFT`.

- **Output Logic**:
  - In `STATE_LEFT`, `walk_left` shall be 1, and `walk_right` shall be 0.
  - In `STATE_RIGHT`, `walk_left` shall be 0, and `walk_right` shall be 1.

### Timing and Reset Behavior

- **Clocking**: All state transitions occur on the positive edge of `clk`.
- **Asynchronous Reset**: `areset` is level-sensitive and asynchronously sets the state to `STATE_LEFT` and outputs `walk_left` = 1, `walk_right` = 0 when high.

### Implementation Notes

- Ensure mutual exclusivity of `walk_left` and `walk_right`.
- Handle simultaneous `bump_left` and `bump_right` inputs by prioritizing a switch in direction as described in the state transitions.
- The module should operate continuously with the described behavior, responding to inputs at each clock cycle.

```verilog
// Additional internal logic and state machine implementation would follow.
endmodule
```
                