
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  code (8 bits)
 - output out  (4 bits)
 - output valid

The module should recognize 8-bit keyboard scancodes for keys 0 through
9. It should indicate whether one of the 10 cases were recognized
(valid), and if so, which key was detected. If the 8-bit input is 8'h45,
8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the
4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively,
the 1-bit valid would be set to 1. If the input does not match any of the
cases, both output signals would be set to 0.

Here is the enhanced specification which might be useful to you:
                ### Module Name:
- **TopModule**

### Interface:
- **Inputs**:
  - `input [7:0] code`: 8-bit unsigned input representing keyboard scancodes.
- **Outputs**:
  - `output [3:0] out`: 4-bit unsigned output representing the recognized key (0-9).
  - `output valid`: 1-bit output indicating if a valid key was recognized.

### Signal Naming Conventions:
- All signals are named using lower_snake_case with descriptive names.

### Bit-Ordering and Indexing:
- The `code` input uses MSB to LSB indexing, with `code[7]` being the most significant bit.

### Timing Behavior:
- The module is intended to function as combinational logic, with outputs updating immediately based on input changes.

### Reset Behavior:
- Since the logic is combinational, no reset behavior is necessary.

### Initial States:
- Initial states are not applicable to combinational logic; however, the output `out` and `valid` should default to 0 for undefined scancodes.

### Logical Description:
- The module uses a combinational logic structure to map specific 8-bit scancodes to 4-bit numeric outputs. The mapping is defined as follows:

| Scancode (Hex) | Output | Valid |
|----------------|--------|-------|
| 8'h45          | 0      | 1     |
| 8'h16          | 1      | 1     |
| 8'h1e          | 2      | 1     |
| 8'h26          | 3      | 1     |
| 8'h25          | 4      | 1     |
| 8'h2e          | 5      | 1     |
| 8'h36          | 6      | 1     |
| 8'h3d          | 7      | 1     |
| 8'h3e          | 8      | 1     |
| 8'h46          | 9      | 1     |
| Others         | 0      | 0     |

### Boundary Conditions:
- Scancodes not listed in the table result in `out = 4'b0000` and `valid = 1'b0`.

### Implementation Notes:
- This specification assumes purely combinational logic, hence no clock or reset signals are involved. If sequential logic is required, the specification needs to be updated to include clock and reset details.
- Edge cases such as simultaneous input changes are resolved naturally by the combinational logic paradigm, where outputs are determined solely by the current input values.
                