
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  reset
 - input  data
 - output start_shifting

The module should implement a finite-state machine that searches for the
sequence 1101 in an input bit stream. When the sequence is found, it
should set start_shifting to 1, forever, until reset. Reset is active
high synchronous. Assume all sequential logic is triggered on the
positive edge of the clock.

Here is the enhanced specification which might be useful to you:
                **

**Module Interface:**
```verilog
module TopModule(
    input wire clk,             // Clock signal, positive edge-triggered
    input wire reset,           // Active high, synchronous reset
    input wire data,            // Input data stream, 1-bit
    output reg start_shifting   // Output signal, set to 1 when sequence 1101 is detected
);
```

**FSM Behavior:**
- The module implements a finite-state machine (FSM) that detects the sequence `1101` in the serial input data stream.
- The FSM has the following states:
  - `IDLE`: Initial state, waiting for the first `1` of the sequence.
  - `S1`: First `1` detected.
  - `S11`: Sequence `11` detected.
  - `S110`: Sequence `110` detected.
  - `S1101`: Complete sequence `1101` detected, sets `start_shifting` to 1.
- **State Transitions:**
  - `IDLE` -> `S1` on `data = 1`
  - `S1` -> `S11` on `data = 1`
  - `S11` -> `S110` on `data = 0`
  - `S110` -> `S1101` on `data = 1`
  - `S1101` remains in `S1101` indefinitely until reset.
  - Any unexpected input causes the FSM to reset to the appropriate state to continue searching.

**Timing and Reset Behavior:**
- All state transitions occur on the positive edge of the clock.
- On reset (`reset = 1`), the FSM returns to the `IDLE` state, and `start_shifting` is reset to 0.
- `start_shifting` remains 1 once set, until a reset occurs.

**Initial States:**
- On power-up or reset, the FSM starts in the `IDLE` state.
- `start_shifting` is initialized to 0.

**Boundary Conditions and Overlaps:**
- The FSM correctly handles overlapping sequences:
  - Example: For input `1110101`, `start_shifting` is set after detecting the first `1101` and does not reset unless explicitly reset externally.

**Implementation Notes:**
- Ensure the FSM is designed to minimize latency and power consumption.
- Consider implementing the FSM using a `case` statement for clarity and efficiency.

**
                