
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  reset
 - input  in
 - output out

The module should implement a Moore state machine with the following
state transition table with one input, one output, and four states.
Include a synchronous active high reset that resets the FSM to state A.
Assume all sequential logic is triggered on the positive edge of the
clock.

  State | Next state in=0, Next state in=1 | Output
  A     | A, B                             | 0
  B     | C, B                             | 0
  C     | A, D                             | 0
  D     | C, B                             | 1

Here is the enhanced specification which might be useful to you:
                **Module Interface:**
```verilog
module TopModule (
    input wire clk,       // Clock signal, positive edge triggered
    input wire reset,     // Synchronous active high reset
    input wire in,        // FSM input signal
    output reg out        // FSM output signal
);
```

**Behavioral Specification:**
- The module implements a Moore state machine with four states: A, B, C, and D.
- The FSM transitions between states based on the current state and the value of the input signal `in`.
- The output `out` is determined solely by the current state, as per Moore machine characteristics.

**State Transition Table:**
- **State A**:
  - Next state: A if `in = 0`, B if `in = 1`.
  - Output: 0.
- **State B**:
  - Next state: C if `in = 0`, B if `in = 1`.
  - Output: 0.
- **State C**:
  - Next state: A if `in = 0`, D if `in = 1`.
  - Output: 0.
- **State D**:
  - Next state: C if `in = 0`, B if `in = 1`.
  - Output: 1.

**Timing and Reset Behavior:**
- All state transitions and output updates occur on the positive edge of the `clk`.
- The `reset` signal is synchronous and active high. When asserted, the FSM transitions to state A on the next clock edge, and the output `out` is set to 0.

**Initial States:**
- On power-up or reset assertion, the FSM initializes to state A, and the output `out` is 0.

**Implementation Notes:**
- The design assumption is that all signals are unsigned.
- Ensure the FSM does not transition on the same clock edge as the reset is de-asserted.
- Consider the potential for input signal glitches and ensure robustness against such scenarios.
- The implementation should be robust against race conditions and ensure a deterministic output response.

**Boundary Conditions:**
- The FSM should handle rapid toggling of the `in` signal without entering undefined states.
- Ensure that the reset condition takes precedence over input changes.
                