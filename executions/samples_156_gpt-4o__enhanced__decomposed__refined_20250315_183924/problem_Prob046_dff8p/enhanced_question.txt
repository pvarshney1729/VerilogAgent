
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  reset
 - input  d (8 bits)
 - output q (8 bits)

Implement a module that includes 8 D flip-flops with active high
synchronous reset. The flip-flops must be reset to 0x34 rather than zero.
All DFFs should be triggered by the negative edge of clk.

Here is the enhanced specification which might be useful to you:
                ### Enhanced Specification for TopModule

**Module Interface:**

- **Inputs:**
  - `input wire clk`: 1-bit clock signal, triggers on the negative edge.
  - `input wire reset`: 1-bit active high synchronous reset signal.
  - `input wire [7:0] d`: 8-bit data input, where `d[0]` is the least significant bit (LSB).

- **Outputs:**
  - `output reg [7:0] q`: 8-bit data output, where `q[0]` is the least significant bit (LSB).

**Behavior:**

- **Flip-Flop Operation:**
  - This module consists of 8 D-type flip-flops.
  - On the negative edge of the `clk`, if `reset` is asserted (high), the output `q` will be set to `8'b00110100` (binary equivalent of 0x34).
  - If `reset` is not asserted, the output `q` will capture the value of input `d` on the negative edge of `clk`.

**Timing and Signal Behavior:**

- **Clock and Reset:**
  - `clk`: All operations are triggered on the negative edge of this signal.
  - `reset`: The reset is synchronous, meaning it will only take effect on the negative edge of `clk`.

- **Data Handling:**
  - Input `d` is sampled on the negative edge of `clk`, ensuring that `d` meets setup and hold time requirements relative to `clk`.

**Implementation Notes:**

- **Initial State:**
  - Upon assertion of `reset`, irrespective of the state of input `d`, `q` will be set to `8'b00110100`.
  
- **Boundary Conditions:**
  - The behavior is defined for when `reset` is asserted. It is assumed that once `reset` is de-asserted, `q` will continue to capture `d` on subsequent negative edges of `clk`.

This enhanced specification ensures clarity in the implementation of the `TopModule` by detailing all interfaces, behaviors, and timing relations.
                