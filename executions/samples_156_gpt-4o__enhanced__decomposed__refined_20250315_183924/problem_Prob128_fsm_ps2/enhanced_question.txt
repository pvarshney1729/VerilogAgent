
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  reset
 - input  in (8 bits)
 - output done

The PS/2 mouse protocol sends messages that are three bytes long.
However, within a continuous byte stream, it's not obvious where messages
start and end. The only indication is that the first byte of each three
byte message always has in[3]=1 (but in[3] of the other two bytes may be
1 or 0 depending on data).

The module should implement a finite state machine that will search for
message boundaries when given an input byte stream. The algorithm we'll
use is to discard bytes until we see one with in[3]=1. We then assume
that this is byte 1 of a message, and signal the receipt of a message
once all 3 bytes have been received (done). The FSM should signal done in
the cycle immediately after the third byte of each message was
successfully received. Reset should be active high synchronous. Assume
all sequential logic is triggered on the positive edge of the clock.

Here is the enhanced specification which might be useful to you:
                **Analysis of Ambiguities and Issues:**

1. **Signal Widths and Signedness:** The specification correctly mentions that all I/O ports are one bit unless specified, but it does not explicitly define whether the input `in` is signed or unsigned.

2. **Bit Indexing and Order:** The specification implies a bit-ordering by referring to `in[3]`, but it doesn't explicitly state the indexing convention (e.g., whether `in[0]` is the least significant bit).

3. **FSM States and Transitions:** There is an implicit assumption regarding the FSM state transitions and how it should handle streams of bytes. The description should be more explicit about the initial state and transitions between states upon receiving valid bytes.

4. **Timing Behavior:** The specification mentions that the FSM should signal `done` in the cycle immediately after the third byte is received, but it doesn't provide details on how the FSM transitions between states within one clock cycle.

5. **Reset Behavior:** Although the reset is mentioned as active high synchronous, the initial state or condition of the FSM after reset is not explicitly defined.

6. **Output Signal Timing:** The specification lacks clarity on how long the `done` signal should remain high after being asserted.

7. **Boundary Conditions:** The specification should clarify the behavior when invalid data or unexpected conditions occur, such as consecutive bytes with `in[3]=1`.

**<ENHANCED_SPEC>**

**Module Name:** TopModule

**Interface:**
- **Inputs:**
  - `input wire clk`: Clock signal, positive edge-triggered.
  - `input wire reset`: Active high synchronous reset signal.
  - `input wire [7:0] in`: 8-bit unsigned input data stream.
- **Outputs:**
  - `output reg done`: Output signal indicating the successful receipt of a 3-byte message.

**Signal Indexing and Bit Order:**
- The input `in` is indexed from 0 to 7, where `in[0]` is the least significant bit (LSB) and `in[7]` is the most significant bit (MSB).
- The condition `in[3]=1` refers to the fourth bit of the input stream.

**Finite State Machine (FSM) Behavior:**
- **FSM States:**
  - **IDLE:** Initial state where the FSM waits for a byte with `in[3]=1`.
  - **BYTE1:** First byte of a message has been detected (`in[3]=1`).
  - **BYTE2:** Second byte of a message is being processed.
  - **BYTE3:** Third byte of a message is being processed, after which the `done` signal will be asserted.

- **State Transitions:**
  - On `reset`: Transition to `IDLE` state.
  - From `IDLE` to `BYTE1`: Transition when `in[3]=1`.
  - From `BYTE1` to `BYTE2`: Transition upon receiving the next byte.
  - From `BYTE2` to `BYTE3`: Transition upon receiving the next byte.
  - From `BYTE3` to `IDLE`: Transition and assert `done` for one clock cycle after the third byte.

**Timing Behavior:**
- The `done` signal is asserted high for one clock cycle immediately after the third byte is received in the `BYTE3` state.
- All state transitions and signal updates occur on the positive edge of the `clk`.

**Reset Behavior:**
- The FSM initializes to the `IDLE` state upon a synchronous active high `reset`.

**Boundary Conditions and Error Handling:**
- If a byte with `in[3]=1` is detected in states `BYTE2` or `BYTE3`, assume it is the start of a new message, and transition back to `BYTE1`.
- Continuous invalid data (e.g., bytes without `in[3]=1` in `IDLE` state) are safely ignored without altering the FSM state.

**Implementation Notes:**
- Ensure that the FSM design is robust against noise and glitches by possibly incorporating debouncing logic if required in the specific application context.

**<ENHANCED_SPEC>**
                