
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  reset
 - output q (10 bits)

The module should implement a counter that counts from 0 to 999,
inclusive, with a period of 1000 cycles. Assume all sequential logic is
triggered on the positive edge of the clock. The reset input is active
high synchronous, and should reset the counter to 0.

Here is the enhanced specification which might be useful to you:
                ### Enhanced Specification for TopModule

#### Module Interface
```verilog
module TopModule (
    input wire clk,                      // Clock signal, triggers on positive edge
    input wire reset,                    // Active high, synchronous reset
    output reg [9:0] q                   // 10-bit counter output, q[9] is MSB, q[0] is LSB
);
```

#### Behavior and Functionality
- **Counter Operation**: The module implements a 10-bit binary counter that counts sequentially from 0 to 999. Upon reaching 999, the counter wraps back to 0 on the next clock cycle.
- **Reset Behavior**: The `reset` input is active high and synchronous. When `reset` is asserted, the counter is reset to 0 on the rising edge of the `clk`.
- **Initial State**: On power-up, the counter initializes to 0, ensuring a known starting state.

#### Timing and Sequential Logic
- **Clock Edge**: All sequential logic, including counter increments and reset operations, occurs on the positive edge of the `clk`.
- **Reset Timing**: The reset is synchronous, meaning that the counter resets to 0 at the next rising edge of `clk` when `reset` is high.

#### Implementation Notes
- **Bit-ordering**: The output `q` is defined with `q[9]` as the most significant bit (MSB) and `q[0]` as the least significant bit (LSB), following the standard convention for binary counters.
- **Boundary Conditions**: When the counter reaches 999 (`q` = 10'b1111100111), the subsequent count will wrap to 0 (`q` = 10'b0000000000) on the next rising edge of `clk`.

### End of Specification
                