
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  a
 - input  b
 - input  c
 - input  d
 - input  e
 - output out (25 bits)

Implement a module that given five 1-bit signals (a, b, c, d, and e),
compute all 25 pairwise one-bit comparisons in the 25-bit output vector.
The output should be 1 if the two bits being compared are equal. Example:
out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ...
out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.

Here is the enhanced specification which might be useful to you:
                **Module Name:** `TopModule`

**Interface:**
```verilog
module TopModule (
    input wire a,    // 1-bit input signal
    input wire b,    // 1-bit input signal
    input wire c,    // 1-bit input signal
    input wire d,    // 1-bit input signal
    input wire e,    // 1-bit input signal
    output wire [24:0] out // 25-bit output vector
);
```

**Bit-Ordering and Indexing:**
- The output vector `out` is indexed from `[24]` down to `[0]`, where `out[24]` corresponds to the first comparison, and `out[0]` corresponds to the last.

**Behavior:**
- The module performs pairwise comparisons of the input signals `(a, b, c, d, e)`.
- For each pair `(x, y)`, if `x == y`, the corresponding bit in `out` is set to `1`. Otherwise, it is set to `0`.
- The comparisons are ordered as follows:
  - `out[24] = (a == a);`
  - `out[23] = (a == b);`
  - `out[22] = (a == c);`
  - `out[21] = (a == d);`
  - `out[20] = (a == e);`
  - `out[19] = (b == a);`
  - `out[18] = (b == b);`
  - `out[17] = (b == c);`
  - `out[16] = (b == d);`
  - `out[15] = (b == e);`
  - `out[14] = (c == a);`
  - `out[13] = (c == b);`
  - `out[12] = (c == c);`
  - `out[11] = (c == d);`
  - `out[10] = (c == e);`
  - `out[ 9] = (d == a);`
  - `out[ 8] = (d == b);`
  - `out[ 7] = (d == c);`
  - `out[ 6] = (d == d);`
  - `out[ 5] = (d == e);`
  - `out[ 4] = (e == a);`
  - `out[ 3] = (e == b);`
  - `out[ 2] = (e == c);`
  - `out[ 1] = (e == d);`
  - `out[ 0] = (e == e);`

**Timing:**
- This module is purely combinational. It does not depend on any clock signal or involve any sequential logic elements.

**Implementation Notes:**
- Ensure that this module is implemented such that it is purely combinational without any latches or flip-flops.
- The design assumes binary inputs (0 or 1) for all signals.

**Boundary Conditions:**
- The module assumes that inputs will be binary (0 or 1). Non-binary inputs are not handled, as they are outside the specification scope.
                