{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    output logic shift_ena\n);\n\n    // State encoding\n    typedef enum logic [0:0] {\n        IDLE  = 1'b0,\n        SHIFT = 1'b1\n    } state_t;\n\n    // State registers\n    state_t state, next_state;\n    logic [2:0] shift_counter;\n\n    // State transition and output logic\n    always @(posedge clk) begin\n        if (reset) begin\n            state <= SHIFT;\n            shift_counter <= 3'd4; // Initialize counter to 4\n            shift_ena <= 1'b1;     // Assert shift_ena\n        end else begin\n            state <= next_state;\n            if (state == SHIFT) begin\n                if (shift_counter != 3'd0) begin\n                    shift_counter <= shift_counter - 1'b1;\n                    shift_ena <= 1'b1;\n                end else begin\n                    shift_ena <= 1'b0;\n                end\n            end else begin\n                shift_ena <= 1'b0;\n            end\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            IDLE: begin\n                if (reset) begin\n                    next_state = SHIFT;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            SHIFT: begin\n                if (shift_counter == 3'd0) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = SHIFT;\n                end\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 2,
        "passfail": "R"
    }
}