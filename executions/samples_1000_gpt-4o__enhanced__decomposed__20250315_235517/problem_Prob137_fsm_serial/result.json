{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic in,\n    output logic done\n);\n\n    // State encoding\n    typedef enum logic [3:0] {\n        IDLE      = 4'b0000,\n        START_BIT = 4'b0001,\n        DATA_BIT0 = 4'b0010,\n        DATA_BIT1 = 4'b0011,\n        DATA_BIT2 = 4'b0100,\n        DATA_BIT3 = 4'b0101,\n        DATA_BIT4 = 4'b0110,\n        DATA_BIT5 = 4'b0111,\n        DATA_BIT6 = 4'b1000,\n        DATA_BIT7 = 4'b1001,\n        STOP_BIT  = 4'b1010\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n\n    // Sequential logic for state transition\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 3'b000;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DATA_BIT0 || current_state == DATA_BIT1 || \n                current_state == DATA_BIT2 || current_state == DATA_BIT3 || \n                current_state == DATA_BIT4 || current_state == DATA_BIT5 || \n                current_state == DATA_BIT6 || current_state == DATA_BIT7) begin\n                bit_count <= bit_count + 1;\n            end else begin\n                bit_count <= 3'b000;\n            end\n        end\n    end\n\n    // Combinational logic for next state and output\n    always_comb begin\n        next_state = current_state;\n        done = 1'b0;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) // Detect start bit\n                    next_state = START_BIT;\n            end\n            START_BIT: begin\n                next_state = DATA_BIT0;\n            end\n            DATA_BIT0: begin\n                next_state = DATA_BIT1;\n            end\n            DATA_BIT1: begin\n                next_state = DATA_BIT2;\n            end\n            DATA_BIT2: begin\n                next_state = DATA_BIT3;\n            end\n            DATA_BIT3: begin\n                next_state = DATA_BIT4;\n            end\n            DATA_BIT4: begin\n                next_state = DATA_BIT5;\n            end\n            DATA_BIT5: begin\n                next_state = DATA_BIT6;\n            end\n            DATA_BIT6: begin\n                next_state = DATA_BIT7;\n            end\n            DATA_BIT7: begin\n                next_state = STOP_BIT;\n            end\n            STOP_BIT: begin\n                if (in == 1'b1) begin // Verify stop bit\n                    done = 1'b1;\n                    next_state = IDLE;\n                end else begin\n                    next_state = IDLE; // Wait for stop bit\n                end\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 52,
        "passfail": "R"
    }
}