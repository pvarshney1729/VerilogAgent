{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    typedef enum logic [1:0] {\n        STATE_WALK_LEFT,\n        STATE_WALK_RIGHT,\n        STATE_FALLING,\n        STATE_DIGGING\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (areset) begin\n            current_state <= STATE_WALK_LEFT;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            STATE_WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = STATE_FALLING;\n                end else if (dig) begin\n                    next_state = STATE_DIGGING;\n                end else if (bump_right) begin\n                    next_state = STATE_WALK_RIGHT;\n                end else begin\n                    next_state = STATE_WALK_LEFT;\n                end\n            end\n\n            STATE_WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = STATE_FALLING;\n                end else if (dig) begin\n                    next_state = STATE_DIGGING;\n                end else if (bump_left) begin\n                    next_state = STATE_WALK_LEFT;\n                end else begin\n                    next_state = STATE_WALK_RIGHT;\n                end\n            end\n\n            STATE_FALLING: begin\n                if (ground) begin\n                    if (bump_left) begin\n                        next_state = STATE_WALK_RIGHT;\n                    end else if (bump_right) begin\n                        next_state = STATE_WALK_LEFT;\n                    end else begin\n                        next_state = (current_state == STATE_WALK_LEFT) ? STATE_WALK_LEFT : STATE_WALK_RIGHT;\n                    end\n                end else begin\n                    next_state = STATE_FALLING;\n                end\n            end\n\n            STATE_DIGGING: begin\n                if (!ground) begin\n                    next_state = STATE_FALLING;\n                end else begin\n                    next_state = STATE_DIGGING;\n                end\n            end\n\n            default: next_state = STATE_WALK_LEFT;\n        endcase\n    end\n\n    // Output logic\n    assign walk_left = (current_state == STATE_WALK_LEFT);\n    assign walk_right = (current_state == STATE_WALK_RIGHT);\n    assign aaah = (current_state == STATE_FALLING);\n    assign digging = (current_state == STATE_DIGGING);\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}