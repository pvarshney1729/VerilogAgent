{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic ena,\n    output logic pm,\n    output logic [7:0] hh,\n    output logic [7:0] mm,\n    output logic [7:0] ss\n);\n\n    logic [3:0] sec_tens, sec_units;\n    logic [3:0] min_tens, min_units;\n    logic [3:0] hour_tens, hour_units;\n    logic [1:0] state; // 0: AM, 1: PM\n\n    always @(posedge clk) begin\n        if (reset) begin\n            sec_tens <= 4'b0000;\n            sec_units <= 4'b0000;\n            min_tens <= 4'b0000;\n            min_units <= 4'b0000;\n            hour_tens <= 4'b0000;\n            hour_units <= 4'b0000;\n            state <= 2'b00; // AM\n        end else if (ena) begin\n            // Increment seconds\n            if (sec_units == 4'b1001) begin\n                sec_units <= 4'b0000;\n                if (sec_tens == 4'b0101) begin\n                    sec_tens <= 4'b0000;\n                    // Increment minutes\n                    if (min_units == 4'b1001) begin\n                        min_units <= 4'b0000;\n                        if (min_tens == 4'b0101) begin\n                            min_tens <= 4'b0000;\n                            // Increment hours\n                            if (hour_units == 4'b1001) begin\n                                hour_units <= 4'b0000;\n                                if (hour_tens == 4'b0001 && hour_units == 4'b0001) begin\n                                    hour_tens <= 4'b0000; // Reset to 12\n                                    state <= ~state; // Toggle AM/PM\n                                end else if (hour_units == 4'b1001 && hour_tens == 4'b0000) begin\n                                    hour_tens <= 4'b0001; // Set to 1\n                                end else begin\n                                    hour_units <= hour_units + 1;\n                                end\n                            end else begin\n                                hour_units <= hour_units + 1;\n                            end\n                        end else begin\n                            min_units <= min_units + 1;\n                        end\n                    end else begin\n                        sec_units <= sec_units + 1;\n                    end\n                end else begin\n                    sec_units <= sec_units + 1;\n                end\n            end\n        end\n    end\n\n    assign hh = {hour_tens, hour_units};\n    assign mm = {min_tens, min_units};\n    assign ss = {sec_tens, sec_units};\n    assign pm = state[1];\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}