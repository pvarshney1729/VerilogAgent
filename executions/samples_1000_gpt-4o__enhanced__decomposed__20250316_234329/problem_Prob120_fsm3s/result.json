{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic out\n);\n\n    // State encoding\n    localparam logic [1:0] STATE_A = 2'b00;\n    localparam logic [1:0] STATE_B = 2'b01;\n    localparam logic [1:0] STATE_C = 2'b10;\n    localparam logic [1:0] STATE_D = 2'b11;\n\n    // State register\n    logic [1:0] current_state, next_state;\n\n    // State register with synchronous active high reset\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= STATE_A; // Reset to state A\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            STATE_A: begin\n                if (in == 1'b0)\n                    next_state = STATE_A;\n                else\n                    next_state = STATE_B;\n            end\n            STATE_B: begin\n                if (in == 1'b0)\n                    next_state = STATE_C;\n                else\n                    next_state = STATE_B;\n            end\n            STATE_C: begin\n                if (in == 1'b0)\n                    next_state = STATE_A;\n                else\n                    next_state = STATE_D;\n            end\n            STATE_D: begin\n                if (in == 1'b0)\n                    next_state = STATE_C;\n                else\n                    next_state = STATE_B;\n            end\n            default: next_state = STATE_A; // Default to state A for safety\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        case (current_state)\n            STATE_A: out = 1'b0;\n            STATE_B: out = 1'b0;\n            STATE_C: out = 1'b0;\n            STATE_D: out = 1'b1;\n            default: out = 1'b0;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}