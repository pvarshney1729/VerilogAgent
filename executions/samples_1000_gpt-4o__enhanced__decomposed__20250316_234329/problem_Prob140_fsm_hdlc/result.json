{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [2:0] {\n        S_IDLE      = 3'b000,\n        S_0         = 3'b001,\n        S_01        = 3'b010,\n        S_011       = 3'b011,\n        S_0111      = 3'b100,\n        S_01111     = 3'b101,\n        S_011111    = 3'b110,\n        S_0111111   = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State register with synchronous reset\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= S_IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            S_IDLE: begin\n                if (in == 1'b0)\n                    next_state = S_0;\n                else\n                    next_state = S_IDLE;\n            end\n            S_0: begin\n                if (in == 1'b1)\n                    next_state = S_01;\n                else\n                    next_state = S_0;\n            end\n            S_01: begin\n                if (in == 1'b1)\n                    next_state = S_011;\n                else\n                    next_state = S_0;\n            end\n            S_011: begin\n                if (in == 1'b1)\n                    next_state = S_0111;\n                else\n                    next_state = S_0;\n            end\n            S_0111: begin\n                if (in == 1'b1)\n                    next_state = S_01111;\n                else\n                    next_state = S_0;\n            end\n            S_01111: begin\n                if (in == 1'b1)\n                    next_state = S_011111;\n                else\n                    next_state = S_0;\n            end\n            S_011111: begin\n                if (in == 1'b0)\n                    next_state = S_IDLE; // Transition to idle for disc\n                else\n                    next_state = S_0111111;\n            end\n            S_0111111: begin\n                if (in == 1'b0)\n                    next_state = S_IDLE; // Transition to idle for flag\n                else\n                    next_state = S_0111111; // Stay in error state\n            end\n            default: next_state = S_IDLE;\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        // Default assignments\n        disc = 1'b0;\n        flag = 1'b0;\n        err  = 1'b0;\n        \n        case (current_state)\n            S_011111: begin\n                if (in == 1'b0)\n                    disc = 1'b1; // Assert disc for 0111110\n            end\n            S_0111111: begin\n                if (in == 1'b0)\n                    flag = 1'b1; // Assert flag for 01111110\n                else\n                    err = 1'b1; // Assert err for 01111111...\n            end\n            default: begin\n                // No output asserted\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 160,
        "passfail": "R"
    }
}