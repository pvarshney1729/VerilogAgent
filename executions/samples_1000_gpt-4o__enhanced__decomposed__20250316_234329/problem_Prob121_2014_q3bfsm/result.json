{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic x,\n    output logic z\n);\n\n    // State encoding\n    localparam logic [2:0] STATE_000 = 3'b000;\n    localparam logic [2:0] STATE_001 = 3'b001;\n    localparam logic [2:0] STATE_010 = 3'b010;\n    localparam logic [2:0] STATE_011 = 3'b011;\n    localparam logic [2:0] STATE_100 = 3'b100;\n\n    // State registers\n    logic [2:0] state, next_state;\n\n    // State register with synchronous reset\n    always_ff @(posedge clk) begin\n        if (reset)\n            state <= STATE_000; // Reset state to 000\n        else\n            state <= next_state; // Update state\n    end\n\n    // Next state logic\n    always_comb begin\n        case (state)\n            STATE_000: next_state = (x == 1'b0) ? STATE_000 : STATE_001;\n            STATE_001: next_state = (x == 1'b0) ? STATE_001 : STATE_100;\n            STATE_010: next_state = (x == 1'b0) ? STATE_010 : STATE_001;\n            STATE_011: next_state = (x == 1'b0) ? STATE_001 : STATE_010;\n            STATE_100: next_state = (x == 1'b0) ? STATE_011 : STATE_100;\n            default: next_state = STATE_000; // Default case for safety\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        case (state)\n            STATE_000: z = 1'b0;\n            STATE_001: z = 1'b0;\n            STATE_010: z = 1'b0;\n            STATE_011: z = 1'b1;\n            STATE_100: z = 1'b1;\n            default: z = 1'b0;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}