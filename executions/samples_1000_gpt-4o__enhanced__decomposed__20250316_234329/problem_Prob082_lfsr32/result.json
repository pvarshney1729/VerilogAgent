{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    output logic [31:0] q\n);\n\n    logic [31:0] lfsr_state;\n    logic [31:0] next_q;\n\n    // Combinational logic to calculate the next state\n    always @(*) begin\n        next_q[31] = lfsr_state[0]; // Shift right and feedback from q[0]\n        next_q[30] = lfsr_state[31];\n        next_q[29] = lfsr_state[30];\n        next_q[28] = lfsr_state[29];\n        next_q[27] = lfsr_state[28];\n        next_q[26] = lfsr_state[27];\n        next_q[25] = lfsr_state[26];\n        next_q[24] = lfsr_state[25];\n        next_q[23] = lfsr_state[24];\n        next_q[22] = lfsr_state[23] ^ lfsr_state[0]; // Tap at position 22\n        next_q[21] = lfsr_state[22];\n        next_q[20] = lfsr_state[21];\n        next_q[19] = lfsr_state[20];\n        next_q[18] = lfsr_state[19];\n        next_q[17] = lfsr_state[18];\n        next_q[16] = lfsr_state[17];\n        next_q[15] = lfsr_state[16];\n        next_q[14] = lfsr_state[15];\n        next_q[13] = lfsr_state[14];\n        next_q[12] = lfsr_state[13];\n        next_q[11] = lfsr_state[12];\n        next_q[10] = lfsr_state[11];\n        next_q[9]  = lfsr_state[10];\n        next_q[8]  = lfsr_state[9];\n        next_q[7]  = lfsr_state[8];\n        next_q[6]  = lfsr_state[7];\n        next_q[5]  = lfsr_state[6];\n        next_q[4]  = lfsr_state[5];\n        next_q[3]  = lfsr_state[4];\n        next_q[2]  = lfsr_state[3] ^ lfsr_state[0]; // Tap at position 2\n        next_q[1]  = lfsr_state[2] ^ lfsr_state[0]; // Tap at position 1\n        next_q[0]  = lfsr_state[1] ^ lfsr_state[0]; // Tap at position 0 (feedback)\n    end\n\n    // Sequential logic with synchronous reset\n    always @(posedge clk) begin\n        if (reset) begin\n            lfsr_state <= 32'h1;\n        end else begin\n            lfsr_state <= next_q;\n        end\n    end\n\n    // Assign the output\n    assign q = lfsr_state;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}