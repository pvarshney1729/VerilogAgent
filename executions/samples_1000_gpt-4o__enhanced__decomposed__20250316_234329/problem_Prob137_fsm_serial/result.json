{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE  = 2'b00,\n        START = 2'b01,\n        DATA  = 2'b10,\n        STOP  = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_counter; // Counter for 8 data bits\n    logic done_reg;\n\n    // State transition logic\n    always @(*) begin\n        next_state = current_state; // Default to hold state\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) // Detect start bit\n                    next_state = START;\n            end\n            START: begin\n                next_state = DATA;\n            end\n            DATA: begin\n                if (bit_counter == 3'd7) // After 8 data bits\n                    next_state = STOP;\n            end\n            STOP: begin\n                if (in == 1'b1) // Verify stop bit\n                    next_state = IDLE;\n            end\n        endcase\n    end\n\n    // State and counter update logic\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_counter <= 3'd0;\n            done_reg <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DATA) begin\n                bit_counter <= bit_counter + 1;\n            end else begin\n                bit_counter <= 3'd0;\n            end\n\n            if (current_state == STOP && in == 1'b1) begin\n                done_reg <= 1'b1; // Set done high when stop bit is verified\n            end else begin\n                done_reg <= 1'b0;\n            end\n        end\n    end\n\n    assign done = done_reg;\n\nendmodule",
    "test_results": {
        "num_mismatch": 92,
        "passfail": "R"
    }
}