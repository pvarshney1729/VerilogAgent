{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic in,\n    output logic out\n);\n\n    // State encoding using localparam\n    localparam logic [1:0] STATE_A = 2'b00;\n    localparam logic [1:0] STATE_B = 2'b01;\n    localparam logic [1:0] STATE_C = 2'b10;\n    localparam logic [1:0] STATE_D = 2'b11;\n\n    // State register\n    logic [1:0] current_state, next_state;\n\n    // State register with asynchronous reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= STATE_A;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Combinational logic for next state\n    always @(*) begin\n        case (current_state)\n            STATE_A: next_state = (in == 1'b0) ? STATE_A : STATE_B;\n            STATE_B: next_state = (in == 1'b0) ? STATE_C : STATE_B;\n            STATE_C: next_state = (in == 1'b0) ? STATE_A : STATE_D;\n            STATE_D: next_state = (in == 1'b0) ? STATE_C : STATE_B;\n            default: next_state = STATE_A; // Default case for safety\n        endcase\n    end\n\n    // Combinational logic for output\n    always @(*) begin\n        case (current_state)\n            STATE_A: out = 1'b0;\n            STATE_B: out = 1'b0;\n            STATE_C: out = 1'b0;\n            STATE_D: out = 1'b1;\n            default: out = 1'b0;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}