{
    "code": "module TopModule (\n    input wire clk,           // Clock signal, positive edge-triggered\n    input wire areset,        // Asynchronous active-high reset\n    input wire bump_left,     // Input: Lemming bumped from the left\n    input wire bump_right,    // Input: Lemming bumped from the right\n    input wire ground,        // Input: Ground detected (1) or not (0)\n    output reg walk_left,     // Output: Lemming walks left\n    output reg walk_right,    // Output: Lemming walks right\n    output reg aaah           // Output: Lemming falling (ground = 0)\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        WALK_LEFT  = 2'b00,\n        WALK_RIGHT = 2'b01,\n        FALLING    = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n    state_t previous_walking_state;\n\n    // State transition logic\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= WALK_LEFT;\n            previous_walking_state <= WALK_LEFT;\n        end else begin\n            current_state <= next_state;\n            if (next_state == WALK_LEFT || next_state == WALK_RIGHT) begin\n                previous_walking_state <= next_state;\n            end\n        end\n    end\n\n    // Next state logic and output logic\n    always @(*) begin\n        // Default outputs\n        walk_left = 0;\n        walk_right = 0;\n        aaah = 0;\n        \n        case (current_state)\n            WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = FALLING;\n                end else if (bump_left) begin\n                    next_state = WALK_RIGHT;\n                end else begin\n                    next_state = WALK_LEFT;\n                    walk_left = 1;\n                end\n            end\n            WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = FALLING;\n                end else if (bump_right) begin\n                    next_state = WALK_LEFT;\n                end else begin\n                    next_state = WALK_RIGHT;\n                    walk_right = 1;\n                end\n            end\n            FALLING: begin\n                if (ground) begin\n                    next_state = previous_walking_state;\n                end else begin\n                    next_state = FALLING;\n                end\n                aaah = 1;\n            end\n            default: begin\n                next_state = WALK_LEFT;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 128,
        "passfail": "R"
    },
    "iterations_used": 1
}