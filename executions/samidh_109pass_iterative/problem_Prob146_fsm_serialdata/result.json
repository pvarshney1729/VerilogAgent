{
    "code": "module TopModule(\n    input logic clk,\n    input logic in,\n    input logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        START_BIT_DETECTED = 3'b001,\n        DATA_RECEPTION = 3'b010,\n        STOP_BIT_CHECK = 3'b011,\n        DONE = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n    logic [7:0] shift_reg;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_byte <= 8'b0;\n            done <= 1'b0;\n            bit_count <= 3'b0;\n            shift_reg <= 8'b0;\n        end else begin\n            current_state <= next_state;\n            case (current_state)\n                IDLE: begin\n                    if (in == 1'b0) begin\n                        next_state <= START_BIT_DETECTED;\n                    end\n                end\n                START_BIT_DETECTED: begin\n                    next_state <= DATA_RECEPTION;\n                end\n                DATA_RECEPTION: begin\n                    shift_reg <= {in, shift_reg[7:1]};\n                    bit_count <= bit_count + 1;\n                    if (bit_count == 3'b111) begin\n                        next_state <= STOP_BIT_CHECK;\n                    end\n                end\n                STOP_BIT_CHECK: begin\n                    if (in == 1'b1) begin\n                        out_byte <= shift_reg;\n                        done <= 1'b1;\n                        next_state <= DONE;\n                    end else if (in == 1'b0) begin\n                        next_state <= START_BIT_DETECTED;\n                    end\n                end\n                DONE: begin\n                    done <= 1'b0;\n                    next_state <= IDLE;\n                end\n            endcase\n        end\n    end\n\n    always_comb begin\n        case (current_state)\n            IDLE: next_state = (in == 1'b0) ? START_BIT_DETECTED : IDLE;\n            START_BIT_DETECTED: next_state = DATA_RECEPTION;\n            DATA_RECEPTION: next_state = (bit_count == 3'b111) ? STOP_BIT_CHECK : DATA_RECEPTION;\n            STOP_BIT_CHECK: next_state = (in == 1'b1) ? DONE : (in == 1'b0) ? START_BIT_DETECTED : STOP_BIT_CHECK;\n            DONE: next_state = IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    },
    "iterations_used": 2
}