{
    "code": "module TopModule (\n    input  logic clk,        // Clock signal, positive edge-triggered\n    input  logic areset,     // Asynchronous reset, active high\n    input  logic bump_left,  // Bump signal from the left\n    input  logic bump_right, // Bump signal from the right\n    input  logic ground,     // Ground presence indicator\n    input  logic dig,        // Dig command\n    output logic walk_left,  // Lemming is walking left\n    output logic walk_right, // Lemming is walking right\n    output logic aaah,       // Lemming is falling\n    output logic digging     // Lemming is digging\n);\n\n    typedef enum logic [2:0] {\n        WALK_LEFT,\n        WALK_RIGHT,\n        DIGGING,\n        FALLING,\n        SPLATTERED\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [4:0] fall_counter; // 5-bit counter to track falling cycles\n\n    // State transition logic\n    always @(*) begin\n        next_state = current_state;\n        case (current_state)\n            WALK_LEFT: begin\n                if (!ground)\n                    next_state = FALLING;\n                else if (dig && ground)\n                    next_state = DIGGING;\n                else if (bump_left)\n                    next_state = WALK_RIGHT;\n            end\n            WALK_RIGHT: begin\n                if (!ground)\n                    next_state = FALLING;\n                else if (dig && ground)\n                    next_state = DIGGING;\n                else if (bump_right)\n                    next_state = WALK_LEFT;\n            end\n            DIGGING: begin\n                if (!ground)\n                    next_state = FALLING;\n            end\n            FALLING: begin\n                if (ground && fall_counter > 5'd20)\n                    next_state = SPLATTERED;\n                else if (ground)\n                    next_state = WALK_LEFT;\n            end\n            SPLATTERED: begin\n                // Remain in SPLATTERED state until reset\n            end\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = 0;\n        walk_right = 0;\n        aaah = 0;\n        digging = 0;\n        case (current_state)\n            WALK_LEFT: walk_left = 1;\n            WALK_RIGHT: walk_right = 1;\n            DIGGING: digging = 1;\n            FALLING: aaah = 1;\n            SPLATTERED: begin\n                walk_left = 0;\n                walk_right = 0;\n                aaah = 0;\n                digging = 0;\n            end\n        endcase\n    end\n\n    // State and counter update logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= WALK_LEFT;\n            fall_counter <= 0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == FALLING)\n                fall_counter <= fall_counter + 1;\n            else\n                fall_counter <= 0;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 180,
        "passfail": "R"
    },
    "iterations_used": 1
}