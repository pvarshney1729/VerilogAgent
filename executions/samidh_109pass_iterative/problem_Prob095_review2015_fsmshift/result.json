{
    "code": "module TopModule (\n    input  logic clk,       // Clock signal, active on rising edge\n    input  logic reset,     // Active-high synchronous reset\n    output logic shift_ena  // Output signal to enable the shift register\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        SHIFT_ENABLE = 2'b01\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] shift_counter;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= SHIFT_ENABLE;\n            shift_counter <= 3'b100;\n        end else begin\n            current_state <= next_state;\n            if (current_state == SHIFT_ENABLE) begin\n                if (shift_counter != 3'b000) begin\n                    shift_counter <= shift_counter - 1;\n                end\n            end\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        next_state = current_state;\n        shift_ena = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (reset) begin\n                    next_state = SHIFT_ENABLE;\n                    shift_ena = 1'b1;\n                end\n            end\n\n            SHIFT_ENABLE: begin\n                shift_ena = 1'b1;\n                if (shift_counter == 3'b000) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 2,
        "passfail": "R"
    },
    "iterations_used": 2
}