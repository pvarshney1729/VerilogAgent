{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,  // Asynchronous active-high reset\n    input logic predict_valid,\n    input logic [6:0] predict_pc,  // 7-bit unsigned program counter for prediction\n    output logic predict_taken,  // Predicted branch direction\n    output logic [6:0] predict_history,  // Branch history used for prediction\n    input logic train_valid,\n    input logic train_taken,  // Actual branch outcome\n    input logic train_mispredicted,  // Indication of misprediction\n    input logic [6:0] train_history,  // 7-bit branch history for training\n    input logic [6:0] train_pc  // 7-bit unsigned program counter for training\n);\n\n    logic [1:0] PHT [0:127];  // 128-entry table of two-bit saturating counters\n    logic [6:0] global_history;\n    logic [6:0] predict_index;\n    logic [6:0] train_index;\n\n    // Asynchronous reset and initialization\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            global_history <= 7'b0;\n            for (int i = 0; i < 128; i++) begin\n                PHT[i] <= 2'b00;\n            end\n        end else begin\n            if (train_valid) begin\n                train_index = train_pc ^ train_history;\n                if (train_taken) begin\n                    if (PHT[train_index] < 2'b11) begin\n                        PHT[train_index] <= PHT[train_index] + 1;\n                    end\n                end else begin\n                    if (PHT[train_index] > 2'b00) begin\n                        PHT[train_index] <= PHT[train_index] - 1;\n                    end\n                end\n                if (train_mispredicted) begin\n                    global_history <= train_history;\n                end else begin\n                    global_history <= {global_history[5:0], train_taken};\n                end\n            end else if (predict_valid) begin\n                global_history <= {global_history[5:0], predict_taken};\n            end\n        end\n    end\n\n    // Prediction logic\n    always_comb begin\n        predict_index = predict_pc ^ global_history;\n        predict_taken = (PHT[predict_index] >= 2'b10);\n        predict_history = global_history;\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 554,
        "passfail": "R"
    },
    "iterations_used": 2
}