{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic ack,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        LOAD_DELAY = 2'b01,\n        COUNTING = 2'b10,\n        WAIT_ACK = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay;\n    logic [9:0] cycle_counter;\n    logic [3:0] pattern_shift_reg;\n    logic [3:0] delay_shift_reg;\n    logic pattern_detected;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            count <= 4'b0000;\n            counting <= 1'b0;\n            done <= 1'b0;\n            cycle_counter <= 10'b0;\n            pattern_shift_reg <= 4'b0000;\n            delay_shift_reg <= 4'b0000;\n            delay <= 4'b0000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == LOAD_DELAY) begin\n                delay_shift_reg <= {delay_shift_reg[2:0], data};\n            end\n            if (current_state == COUNTING) begin\n                if (cycle_counter == 10'd999) begin\n                    cycle_counter <= 10'b0;\n                    if (count > 0) begin\n                        count <= count - 1;\n                    end\n                end else begin\n                    cycle_counter <= cycle_counter + 1;\n                end\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            pattern_shift_reg <= 4'b0000;\n            pattern_detected <= 1'b0;\n        end else if (current_state == IDLE) begin\n            pattern_shift_reg <= {pattern_shift_reg[2:0], data};\n            if (pattern_shift_reg == 4'b1101) begin\n                pattern_detected <= 1'b1;\n            end else begin\n                pattern_detected <= 1'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        counting = 1'b0;\n        done = 1'b0;\n        case (current_state)\n            IDLE: begin\n                if (pattern_detected) begin\n                    next_state = LOAD_DELAY;\n                end\n            end\n            LOAD_DELAY: begin\n                if (&delay_shift_reg) begin\n                    delay = delay_shift_reg;\n                    count = delay;\n                    next_state = COUNTING;\n                end\n            end\n            COUNTING: begin\n                counting = 1'b1;\n                if (count == 0 && cycle_counter == 10'd999) begin\n                    done = 1'b1;\n                    next_state = WAIT_ACK;\n                end\n            end\n            WAIT_ACK: begin\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    },
    "iterations_used": 1
}