{
    "code": "module TopModule (\n    input logic clk,        // Clock signal, positive edge-triggered\n    input logic load,       // Load signal, active high, synchronous\n    input logic [255:0] data, // 256-bit input data for initial state of grid\n    output logic [255:0] q   // 256-bit output representing the current state of the grid\n);\n\n    logic [255:0] next_state;\n\n    // Function to count the number of neighbors for a given cell\n    function automatic int count_neighbors(input int row, input int col);\n        int count;\n        int r, c;\n        count = 0;\n        for (r = -1; r <= 1; r = r + 1) begin\n            for (c = -1; c <= 1; c = c + 1) begin\n                if (!(r == 0 && c == 0)) begin\n                    int neighbor_row = (row + r + 16) % 16;\n                    int neighbor_col = (col + c + 16) % 16;\n                    count = count + q[neighbor_row * 16 + neighbor_col];\n                end\n            end\n        end\n        return count;\n    endfunction\n\n    // Combinational logic to calculate the next state of the grid\n    always @(*) begin\n        int row, col;\n        for (row = 0; row < 16; row = row + 1) begin\n            for (col = 0; col < 16; col = col + 1) begin\n                int neighbors = count_neighbors(row, col);\n                int index = row * 16 + col;\n                if (neighbors == 3) begin\n                    next_state[index] = 1;\n                end else if (neighbors == 2) begin\n                    next_state[index] = q[index];\n                end else begin\n                    next_state[index] = 0;\n                end\n            end\n        end\n    end\n\n    // Sequential logic to update the grid state\n    always_ff @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else begin\n            q <= next_state;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 5008,
        "passfail": "R"
    },
    "iterations_used": 2
}