{
    "code": "module TopModule (\n    input logic clk,          // Clock signal for sequential logic\n    input logic rst_n,        // Active low reset signal, asynchronous\n    input logic in,           // Input signal, 1 bit\n    input logic [3:0] state,  // Current state, 4 bits, one-hot encoding\n    output logic [3:0] next_state, // Next state, 4 bits, one-hot encoding\n    output logic out           // Output signal, 1 bit\n);\n\nalways @(*) begin\n    // Default next state and output\n    next_state = 4'b0000;\n    out = 1'b0;\n\n    case (state)\n        4'b0001: begin // State A\n            if (in) begin\n                next_state = 4'b0010; // A -> B\n            end else begin\n                next_state = 4'b0001; // A -> A\n            end\n        end\n        4'b0010: begin // State B\n            if (in) begin\n                next_state = 4'b0010; // B -> B\n            end else begin\n                next_state = 4'b0100; // B -> C\n            end\n        end\n        4'b0100: begin // State C\n            if (in) begin\n                next_state = 4'b1000; // C -> D\n            end else begin\n                next_state = 4'b0001; // C -> A\n            end\n        end\n        4'b1000: begin // State D\n            if (in) begin\n                next_state = 4'b0010; // D -> B\n            end else begin\n                next_state = 4'b0100; // D -> C\n            end\n        end\n        default: begin\n            // Undefined state handling\n            next_state = 4'b0000; // Default to an invalid state\n        end\n    endcase\n\n    // Output logic\n    if (state == 4'b1000) begin\n        out = 1'b1; // D produces out=1\n    end else begin\n        out = 1'b0; // A, B, C produce out=0\n    end\nend\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}