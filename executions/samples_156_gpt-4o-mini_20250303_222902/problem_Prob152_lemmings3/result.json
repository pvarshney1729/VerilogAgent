{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    typedef enum logic [1:0] {\n        WALK_LEFT = 2'b00,\n        WALK_RIGHT = 2'b01,\n        FALLING = 2'b10,\n        DIGGING = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= WALK_LEFT;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_comb begin\n        // Default outputs\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (current_state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n                if (bump_left) begin\n                    next_state = WALK_RIGHT;\n                end else if (bump_right) begin\n                    next_state = WALK_LEFT;\n                end else if (dig && ground) begin\n                    next_state = DIGGING;\n                    digging = 1'b1;\n                end else if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end else begin\n                    next_state = WALK_LEFT;\n                end\n            end\n\n            WALK_RIGHT: begin\n                walk_right = 1'b1;\n                if (bump_right) begin\n                    next_state = WALK_LEFT;\n                end else if (bump_left) begin\n                    next_state = WALK_RIGHT;\n                end else if (dig && ground) begin\n                    next_state = DIGGING;\n                    digging = 1'b1;\n                end else if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end else begin\n                    next_state = WALK_RIGHT;\n                end\n            end\n\n            FALLING: begin\n                aaah = 1'b1;\n                if (ground) begin\n                    if (walk_left) begin\n                        next_state = WALK_LEFT;\n                    end else begin\n                        next_state = WALK_RIGHT;\n                    end\n                end else begin\n                    next_state = FALLING;\n                end\n            end\n\n            DIGGING: begin\n                digging = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end else begin\n                    next_state = DIGGING;\n                end\n            end\n\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 135,
        "passfail": "R"
    }
}