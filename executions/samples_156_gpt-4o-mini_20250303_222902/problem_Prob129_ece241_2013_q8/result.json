{
    "code": "module TopModule (\n    input logic clk,       // Clock signal, positive edge-triggered\n    input logic aresetn,   // Asynchronous active-low reset\n    input logic x,         // Input signal to detect the sequence \"101\"\n    output logic z          // Output signal, asserted when sequence \"101\" is detected\n);\n\n    typedef enum logic [1:0] {\n        STATE_0 = 2'b00,\n        STATE_1 = 2'b01,\n        STATE_2 = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Asynchronous reset\n    always_ff @(negedge aresetn or posedge clk) begin\n        if (!aresetn) begin\n            current_state <= STATE_0;\n            z <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_ff @(posedge clk) begin\n        case (current_state)\n            STATE_0: begin\n                if (x) begin\n                    next_state <= STATE_1;\n                end else begin\n                    next_state <= STATE_0;\n                end\n            end\n            STATE_1: begin\n                if (!x) begin\n                    next_state <= STATE_2;\n                end else begin\n                    next_state <= STATE_1;\n                end\n            end\n            STATE_2: begin\n                if (x) begin\n                    next_state <= STATE_0;\n                    z <= 1'b1; // Assert z when transitioning from STATE_2 to STATE_0\n                end else begin\n                    next_state <= STATE_1;\n                end\n            end\n            default: begin\n                next_state <= STATE_0;\n            end\n        endcase\n    end\n\n    // Output logic\n    always_ff @(posedge clk) begin\n        if (current_state == STATE_2 && x) begin\n            z <= 1'b1; // Assert z when transitioning from STATE_2 to STATE_0\n        end else begin\n            z <= 1'b0; // Deassert z otherwise\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 87,
        "passfail": "R"
    }
}