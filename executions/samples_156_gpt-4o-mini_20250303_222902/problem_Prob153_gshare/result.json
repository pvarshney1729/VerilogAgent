{
    "code": "module branch_predictor (\n    logic clk,\n    logic areset,\n    logic predict_valid,\n    logic [6:0] predict_pc,\n    logic train_valid,\n    logic train_taken,\n    logic train_mispredicted,\n    logic [6:0] train_history,\n    logic [6:0] train_pc,\n    logic predict_taken,\n    logic [6:0] predict_history\n);\n\n    logic [6:0] global_history;\n    logic [1:0] PHT [127:0];\n    logic [6:0] index;\n\n    // Asynchronous reset and initialization\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            global_history <= 7'b0000000;\n            for (int i = 0; i < 128; i++) begin\n                PHT[i] <= 2'b01; // Initialize PHT to weakly taken\n            end\n        end else begin\n            if (train_valid) begin\n                index <= train_pc ^ train_history;\n                if (train_taken) begin\n                    if (PHT[index] < 2'b11) begin\n                        PHT[index] <= PHT[index] + 1;\n                    end\n                end else begin\n                    if (PHT[index] > 2'b00) begin\n                        PHT[index] <= PHT[index] - 1;\n                    end\n                end\n                if (train_mispredicted) begin\n                    global_history <= train_history;\n                end\n            end\n        end\n    end\n\n    // Prediction logic\n    always @(*) begin\n        if (predict_valid) begin\n            index = predict_pc ^ global_history;\n            predict_taken = PHT[index][1]; // MSB of the counter\n            predict_history = global_history; // Update predict history\n        end\n    end\n\n    // Update global history on clock edge\n    always @(posedge clk) begin\n        if (!train_valid) begin\n            if (predict_valid) begin\n                global_history <= {global_history[5:0], predict_taken}; // Shift in prediction\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}