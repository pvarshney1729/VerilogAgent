{
    "code": "module TopModule(\n    input logic clk,      // Clock signal, positive-edge triggered\n    input logic reset,    // Synchronous active-high reset\n    input logic w,        // Input signal w, 1-bit\n    output logic z        // Output signal z, 1-bit\n);\n\n    typedef enum logic [2:0] {\n        A = 3'b000,\n        B = 3'b001,\n        C = 3'b010,\n        D = 3'b011,\n        E = 3'b100,\n        F = 3'b101\n    } state_t;\n\n    state_t state, next_state; // State registers\n\n    always @(posedge clk) begin\n        if (reset) begin\n            state <= A;      // Reset to state A\n            z <= 0;          // Ensure z is reset to 0\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    always @(*) begin\n        case(state)\n            A: next_state = (w) ? B : A;\n            B: next_state = (w) ? C : D;\n            C: next_state = (w) ? E : D;\n            D: next_state = (w) ? F : A;\n            E: next_state = (w) ? E : D;\n            F: next_state = (w) ? C : D;\n            default: next_state = A; // Default state\n        endcase\n    end\n\n    always @(*) begin\n        case(state)\n            E, F: z = 1;\n            default: z = 0;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}