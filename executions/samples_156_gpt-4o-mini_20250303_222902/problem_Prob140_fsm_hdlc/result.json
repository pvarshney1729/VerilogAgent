{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [3:0] {\n        STATE_0 = 4'b0000,\n        STATE_1 = 4'b0001,\n        STATE_2 = 4'b0010,\n        STATE_3 = 4'b0011,\n        STATE_4 = 4'b0100,\n        STATE_5 = 4'b0101,\n        STATE_6 = 4'b0110,\n        STATE_7 = 4'b0111,\n        STATE_8 = 4'b1000,\n        STATE_9 = 4'b1001,\n        STATE_ERR = 4'b1010\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= STATE_0;\n            count <= 4'b0000;\n        end else begin\n            current_state <= next_state;\n            if (current_state >= STATE_2 && current_state <= STATE_ERR) begin\n                count <= count + (in ? 1 : 0);\n            end else begin\n                count <= (in ? 4'b0001 : 4'b0000);\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        disc <= 1'b0;\n        flag <= 1'b0;\n        err <= 1'b0;\n\n        case (current_state)\n            STATE_0: begin\n                if (in == 1'b0) next_state <= STATE_1;\n                else next_state <= STATE_0;\n            end\n            STATE_1: begin\n                if (in == 1'b1) next_state <= STATE_2;\n                else next_state <= STATE_0;\n            end\n            STATE_2: next_state <= (in ? STATE_3 : STATE_0);\n            STATE_3: next_state <= (in ? STATE_4 : STATE_0);\n            STATE_4: next_state <= (in ? STATE_5 : STATE_0);\n            STATE_5: next_state <= (in ? STATE_6 : STATE_0);\n            STATE_6: next_state <= (in ? STATE_7 : STATE_0);\n            STATE_7: begin\n                if (in == 1'b0) begin\n                    disc <= 1'b1;\n                    next_state <= STATE_8;\n                end else begin\n                    flag <= 1'b1;\n                    next_state <= STATE_9;\n                end\n            end\n            STATE_8: begin\n                next_state <= STATE_0;\n            end\n            STATE_9: begin\n                next_state <= STATE_0;\n            end\n            default: begin\n                if (count >= 4'b0111) begin\n                    err <= 1'b1;\n                    next_state <= STATE_0;\n                end else begin\n                    next_state <= STATE_0;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 238,
        "passfail": "R"
    }
}