{
    "code": "module TopModule (\n    input logic clk,\n    input logic load,\n    input logic [255:0] data,\n    output logic [255:0] q\n);\n\n    logic [255:0] next_q;\n\n    always @(*) begin\n        if (load) begin\n            next_q = data;\n        end else begin\n            next_q = q; // Default to current state\n            for (int i = 0; i < 16; i++) begin\n                for (int j = 0; j < 16; j++) begin\n                    int alive_neighbors = 0;\n                    for (int di = -1; di <= 1; di++) begin\n                        for (int dj = -1; dj <= 1; dj++) begin\n                            if (di == 0 && dj == 0) continue; // Skip the cell itself\n                            int ni = (i + di + 16) % 16; // Toroidal wrapping\n                            int nj = (j + dj + 16) % 16; // Toroidal wrapping\n                            alive_neighbors += q[ni * 16 + nj];\n                        end\n                    end\n                    // Apply the rules\n                    if (q[i * 16 + j] == 1) begin\n                        if (alive_neighbors < 2 || alive_neighbors > 3) begin\n                            next_q[i * 16 + j] = 0; // Cell dies\n                        end else begin\n                            next_q[i * 16 + j] = 1; // Cell lives\n                        end\n                    end else begin\n                        if (alive_neighbors == 3) begin\n                            next_q[i * 16 + j] = 1; // Cell becomes alive\n                        end else begin\n                            next_q[i * 16 + j] = 0; // Cell remains dead\n                        end\n                    end\n                end\n            end\n        end\n    end\n\n    always @(posedge clk) begin\n        q <= next_q; // Update state on clock edge\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}