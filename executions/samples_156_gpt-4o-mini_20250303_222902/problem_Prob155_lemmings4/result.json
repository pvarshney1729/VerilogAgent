{
    "code": "module LemmingFSM (\n    input logic clk,             // Clock signal for sequential logic\n    input logic areset,          // Asynchronous reset, active high\n    input logic bump_left,       // Input signal indicating a bump from the left\n    input logic bump_right,      // Input signal indicating a bump from the right\n    input logic ground,          // Input signal indicating ground presence\n    input logic dig,             // Input signal to command digging\n    \n    output logic walk_left,      // Output signal indicating walking left\n    output logic walk_right,     // Output signal indicating walking right\n    output logic aaah,           // Output signal indicating falling\n    output logic digging          // Output signal indicating digging\n);\n\n    typedef enum logic [2:0] {\n        WALK_LEFT,\n        WALK_RIGHT,\n        FALLING,\n        DIGGING,\n        SPLATTERED\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [4:0] fall_counter; // 5 bits to count up to 20\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= WALK_LEFT;\n            fall_counter <= 5'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == FALLING) begin\n                fall_counter <= fall_counter + 1;\n            end else begin\n                fall_counter <= 5'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (current_state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n                if (bump_right) next_state = WALK_RIGHT;\n                if (!ground) next_state = FALLING;\n                if (dig && ground) next_state = DIGGING;\n            end\n            \n            WALK_RIGHT: begin\n                walk_right = 1'b1;\n                if (bump_left) next_state = WALK_LEFT;\n                if (!ground) next_state = FALLING;\n                if (dig && ground) next_state = DIGGING;\n            end\n            \n            FALLING: begin\n                aaah = 1'b1;\n                if (ground) begin\n                    if (fall_counter >= 5'd20) next_state = SPLATTERED;\n                    else next_state = (walk_left) ? WALK_LEFT : WALK_RIGHT;\n                end\n            end\n            \n            DIGGING: begin\n                digging = 1'b1;\n                if (!ground) next_state = FALLING;\n            end\n            \n            SPLATTERED: begin\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n                aaah = 1'b0;\n                digging = 1'b0;\n            end\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    }
}