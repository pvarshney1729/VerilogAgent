{
    "code": "module TopModule (\n    input logic clk,            // Clock signal, positive edge-triggered\n    input logic async_reset,    // Asynchronous reset, active high\n    input logic train_valid,    // Indicates if training data is valid\n    input logic train_taken,    // Indicates if training is taken\n    output logic [1:0] state    // 2-bit counter state output\n);\n\n    // Asynchronous reset\n    always_ff @(posedge async_reset) begin\n        state <= 2'b01; // Reset state\n    end\n\n    // Synchronous logic\n    always_ff @(posedge clk) begin\n        if (train_valid) begin\n            if (train_taken) begin\n                if (state < 2'b11) begin\n                    state <= state + 1; // Increment state\n                end\n            end else begin\n                if (state > 2'b00) begin\n                    state <= state - 1; // Decrement state\n                end\n            end\n        end\n    end\n\n    // Initial state\n    initial begin\n        state = 2'b01; // Set initial state\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    }
}