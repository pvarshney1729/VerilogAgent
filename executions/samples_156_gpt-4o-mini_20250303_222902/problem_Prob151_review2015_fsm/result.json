{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic done_counting,\n    input logic ack,\n    output logic shift_ena,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        SEARCHING,\n        SHIFT,\n        COUNTING,\n        DONE\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] shift_counter;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= SEARCHING;\n            shift_ena <= 0;\n            counting <= 0;\n            done <= 0;\n            shift_counter <= 0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == SHIFT) begin\n                if (shift_counter < 4) begin\n                    shift_counter <= shift_counter + 1;\n                end else begin\n                    shift_counter <= 0;\n                end\n            end else begin\n                shift_counter <= 0;\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        case (current_state)\n            SEARCHING: begin\n                shift_ena <= 0;\n                counting <= 0;\n                done <= 0;\n                if (data == 1 && /* previous data bits indicate pattern */) begin\n                    next_state <= SHIFT;\n                end else begin\n                    next_state <= SEARCHING;\n                end\n            end\n            SHIFT: begin\n                shift_ena <= 1;\n                if (shift_counter == 3) begin\n                    next_state <= COUNTING;\n                end else begin\n                    next_state <= SHIFT;\n                end\n            end\n            COUNTING: begin\n                counting <= 1;\n                if (done_counting) begin\n                    next_state <= DONE;\n                end else begin\n                    next_state <= COUNTING;\n                end\n            end\n            DONE: begin\n                done <= 1;\n                if (ack) begin\n                    next_state <= SEARCHING;\n                end else begin\n                    next_state <= DONE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}