{
    "code": "module TopModule (\n    input logic clk,       // Clock signal, positive-edge triggered\n    input logic resetn,    // Active-low synchronous reset\n    input logic [2:0] r,   // 3-bit request input\n    output logic [2:0] g    // 3-bit grant output\n);\n\n    typedef enum logic [1:0] {\n        A = 2'b00,\n        B = 2'b01,\n        C = 2'b10,\n        D = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            A: begin\n                if (r[0]) \n                    next_state = B;\n                else if (r[1]) \n                    next_state = C;\n                else if (r[2]) \n                    next_state = D;\n                else \n                    next_state = A;\n            end\n            B: begin\n                if (r[0]) \n                    next_state = B;\n                else \n                    next_state = A;\n            end\n            C: begin\n                if (r[1]) \n                    next_state = C;\n                else \n                    next_state = A;\n            end\n            D: begin\n                if (r[2]) \n                    next_state = D;\n                else \n                    next_state = A;\n            end\n            default: next_state = A;\n        endcase\n    end\n\n    // State register with synchronous reset\n    always @(posedge clk) begin\n        if (!resetn) \n            current_state <= A;\n        else \n            current_state <= next_state;\n    end\n\n    // Grant output logic\n    always @(*) begin\n        g = 3'b000; // Default to no grants\n        case (current_state)\n            B: g[0] = 1'b1; // Grant for state B\n            C: g[1] = 1'b1; // Grant for state C\n            D: g[2] = 1'b1; // Grant for state D\n            default: g = 3'b000; // No grants\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}