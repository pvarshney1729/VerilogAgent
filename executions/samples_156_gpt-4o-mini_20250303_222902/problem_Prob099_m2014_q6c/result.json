{
    "code": "module TopModule (\n    input logic [5:0] y,\n    input logic w,\n    output logic Y1,\n    output logic Y2,\n    output logic Y3,\n    output logic Y4\n);\n\n    typedef enum logic [2:0] {\n        A = 3'b000,\n        B = 3'b001,\n        C = 3'b010,\n        D = 3'b011,\n        E = 3'b100,\n        F = 3'b101\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Synchronous reset and state transition\n    always @(posedge w or posedge y) begin\n        if (y != 6'b000001 && y != 6'b000010 && y != 6'b000100 && \n            y != 6'b001000 && y != 6'b010000 && y != 6'b100000) begin\n            current_state <= A; // Reset to state A on invalid y\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            A: next_state = (w == 0) ? B : A;\n            B: next_state = (w == 0) ? C : D;\n            C: next_state = (w == 0) ? E : D;\n            D: next_state = (w == 0) ? F : A;\n            E: next_state = (w == 0) ? E : D;\n            F: next_state = (w == 0) ? C : D;\n            default: next_state = A; // Default to state A\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        Y1 = (current_state == E || current_state == F);\n        Y3 = (current_state == D);\n        Y2 = (current_state == B);\n        Y4 = (current_state == D);\n    end\n\n    // Initialize outputs\n    initial begin\n        Y1 = 0;\n        Y2 = 0;\n        Y3 = 0;\n        Y4 = 0;\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}