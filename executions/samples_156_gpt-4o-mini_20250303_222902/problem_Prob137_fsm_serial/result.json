{
    "code": "module TopModule (\n    input  logic clk,       // Clock signal\n    input  logic reset,     // Active-high synchronous reset\n    input  logic in,        // Serial data input\n    output logic done       // Byte received indication\n);\n\n    typedef enum logic [2:0] {\n        IDLE   = 3'b000,\n        START  = 3'b001,\n        DATA   = 3'b010,\n        STOP   = 3'b011,\n        ERROR  = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] data;\n    logic [2:0] bit_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            done <= 1'b0;\n            bit_count <= 3'b000;\n            data <= 8'b00000000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == STOP) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = START;\n                end\n            end\n            START: begin\n                next_state = DATA;\n                bit_count = 3'b000;\n            end\n            DATA: begin\n                if (bit_count < 3'b111) begin\n                    data[bit_count] = in;\n                    bit_count = bit_count + 1;\n                end else begin\n                    next_state = STOP;\n                end\n            end\n            STOP: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = ERROR;\n                end\n            end\n            ERROR: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 82,
        "passfail": "R"
    }
}