{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic [7:0] in,\n    output logic [23:0] out_bytes,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        BYTE1_RECEIVED,\n        BYTE2_RECEIVED,\n        BYTE3_RECEIVED\n    } state_t;\n\n    state_t current_state, next_state;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_bytes <= 24'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == BYTE3_RECEIVED) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            out_bytes <= 24'b0;\n        end else begin\n            case (current_state)\n                IDLE: begin\n                    if (in[3] == 1'b1) begin\n                        out_bytes[23:16] <= in;\n                        next_state <= BYTE1_RECEIVED;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                BYTE1_RECEIVED: begin\n                    out_bytes[15:8] <= in;\n                    next_state <= BYTE2_RECEIVED;\n                end\n                BYTE2_RECEIVED: begin\n                    out_bytes[7:0] <= in;\n                    next_state <= BYTE3_RECEIVED;\n                end\n                BYTE3_RECEIVED: begin\n                    next_state <= IDLE;\n                end\n                default: next_state <= IDLE;\n            endcase\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            out_bytes <= 24'b0;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "R"
    }
}