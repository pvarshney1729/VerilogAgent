{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [2:0] {\n        S0, // Initial state, expect 0\n        S1, // First 1 received\n        S2, // Second 1 received\n        S3, // Third 1 received\n        S4, // Fourth 1 received\n        S5, // Fifth 1 received\n        S6, // Sixth 1 received (flag)\n        ERR // Error state for 7 or more 1s\n    } state_t;\n\n    state_t current_state, next_state;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= S0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        disc = 0;\n        flag = 0;\n        err = 0;\n\n        case (current_state)\n            S0: begin\n                if (in) next_state = S1;\n            end\n            S1: begin\n                if (in) next_state = S2;\n                else next_state = S0;\n            end\n            S2: begin\n                if (in) next_state = S3;\n                else next_state = S0;\n            end\n            S3: begin\n                if (in) next_state = S4;\n                else next_state = S0;\n            end\n            S4: begin\n                if (in) next_state = S5;\n                else next_state = S0;\n            end\n            S5: begin\n                if (in) next_state = S6;\n                else next_state = S0;\n            end\n            S6: begin\n                if (in) begin\n                    next_state = ERR; // Error state\n                    err = 1; // Set error\n                end else begin\n                    disc = 1; // Discard on 0111110\n                    next_state = S0;\n                end\n                flag = 1; // Found flag\n            end\n            ERR: begin\n                if (!in) next_state = S0; // Reset on 0\n            end\n            default: next_state = S0;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 268,
        "passfail": "R"
    }
}