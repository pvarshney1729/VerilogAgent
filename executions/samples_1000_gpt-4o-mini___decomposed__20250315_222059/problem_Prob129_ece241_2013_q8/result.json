{
    "code": "module TopModule (\n    input logic clk,\n    input logic aresetn,\n    input logic x,\n    output logic z\n);\n    // State encoding\n    typedef enum logic [1:0] {\n        S0 = 2'b00, // Initial state\n        S1 = 2'b01, // '1' seen\n        S2 = 2'b10  // '10' seen\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Asynchronous reset and state transition\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresetn) begin\n            current_state <= S0;\n            z <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always @(*) begin\n        case (current_state)\n            S0: begin\n                z = 1'b0;\n                if (x) \n                    next_state = S1; // '1' seen\n                else \n                    next_state = S0; // stay in S0\n            end\n            S1: begin\n                z = 1'b0;\n                if (!x) \n                    next_state = S2; // '10' seen\n                else \n                    next_state = S1; // stay in S1\n            end\n            S2: begin\n                z = 1'b1; // '101' detected\n                if (x) \n                    next_state = S1; // '1' seen again\n                else \n                    next_state = S0; // reset to S0\n            end\n            default: begin\n                next_state = S0; // default case\n                z = 1'b0;\n            end\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 40,
        "passfail": "R"
    }
}