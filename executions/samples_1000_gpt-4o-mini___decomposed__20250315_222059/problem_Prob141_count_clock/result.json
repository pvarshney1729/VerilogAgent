{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic ena,\n    output logic pm,\n    output logic [7:0] hh,\n    output logic [7:0] mm,\n    output logic [7:0] ss\n);\n    \n    reg [3:0] sec_cnt;\n    reg [3:0] min_cnt;\n    reg [3:0] hour_ones;\n    reg [3:0] hour_tens;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            hh <= 8'b00001100; // Reset to 12\n            mm <= 8'b00000000; // Reset to 00\n            ss <= 8'b00000000; // Reset to 00\n            pm <= 0; // Reset to AM\n            sec_cnt <= 0;\n            min_cnt <= 0;\n            hour_ones <= 0;\n            hour_tens <= 0;\n        end else if (ena) begin\n            if (sec_cnt == 4'd9) begin\n                sec_cnt <= 0;\n                if (ss == 8'd59) begin\n                    ss <= 0;\n                    if (min_cnt == 4'd9) begin\n                        min_cnt <= 0;\n                        if (hour_ones == 4'b1001) begin // If hours are 09\n                            hour_ones <= 0; // Reset ones to 0\n                            if (hour_tens == 4'b0001) begin // If tens are 1 (10-12)\n                                hour_tens <= 0; // Reset tens to 0\n                                pm <= ~pm; // Toggle PM/AM\n                            end else begin\n                                hour_tens <= hour_tens + 1; // Increment tens\n                            end\n                        end else begin\n                            hour_ones <= hour_ones + 1; // Increment ones\n                        end\n                    end else begin\n                        min_cnt <= min_cnt + 1; // Increment minutes\n                    end\n                end else begin\n                    ss <= ss + 1; // Increment seconds\n                end\n            end else begin\n                sec_cnt <= sec_cnt + 1; // Increment seconds counter\n            end\n        end\n    end\n\n    assign hh = {hour_tens, hour_ones}; // Assign BCD hours output\n    assign mm = {4'b0000, min_cnt}; // Assign BCD minutes output\n    assign ss = {4'b0000, sec_cnt}; // Assign BCD seconds output\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    }
}