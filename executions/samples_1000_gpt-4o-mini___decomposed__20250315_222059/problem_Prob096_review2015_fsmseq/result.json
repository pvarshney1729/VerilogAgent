{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic data,\n    output logic start_shifting\n);\n    typedef enum logic [1:0] {\n        S0, // Initial state\n        S1, // Found '1'\n        S2, // Found '11'\n        S3  // Found '110'\n    } state_t;\n\n    state_t current_state, next_state;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= S0;\n            start_shifting <= 0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always @(*) begin\n        case (current_state)\n            S0: begin\n                if (data) next_state = S1;\n                else next_state = S0;\n                start_shifting = 0;\n            end\n            S1: begin\n                if (data) next_state = S2;\n                else next_state = S0;\n                start_shifting = 0;\n            end\n            S2: begin\n                if (~data) next_state = S3;\n                else next_state = S2;\n                start_shifting = 0;\n            end\n            S3: begin\n                next_state = S3; // Stay in S3 once sequence is found\n                start_shifting = 1; // Set output to 1\n            end\n            default: begin\n                next_state = S0;\n                start_shifting = 0;\n            end\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 170,
        "passfail": "R"
    }
}