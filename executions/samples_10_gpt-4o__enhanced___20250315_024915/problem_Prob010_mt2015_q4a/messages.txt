[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  x\n - input  y\n - output z\n\nThe module should implement the boolean function z = (x^y) & x.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - input logic x;  // 1-bit input (x[0] refers to the least significant bit)\n  - input logic y;  // 1-bit input (y[0] refers to the least significant bit)\n  \n- Output Ports:\n  - output logic z;  // 1-bit output (z[0] refers to the least significant bit)\n\nFunctional Specification:\n- The module implements the boolean function defined by the equation:\n  z = (x XOR y) AND x\n- The operations are to be performed based on the following precedence:\n  1. XOR operation between inputs x and y.\n  2. AND operation between the result of the XOR and input x.\n\nSignal Dependencies:\n- The output z is combinationally dependent on inputs x and y.\n- There are no sequential elements or clock cycles involved in this module.\n\nEdge Cases and Input Boundaries:\n- The module is designed for binary inputs; therefore, inputs x and y will only take values of 0 or 1.\n- The output z will also strictly be either 0 or 1 based on the provided boolean function.\n\nReset Conditions:\n- No reset conditions are applicable for this module as it purely implements combinational logic.\n                    "
    }
]