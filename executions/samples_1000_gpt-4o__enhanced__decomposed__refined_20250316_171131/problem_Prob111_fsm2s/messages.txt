[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  j\n - input  k\n - output out\n\nThe module should implement a Moore state machine with two states, two\ninputs, and one output according to diagram described below. Reset is an\nactive-high synchronous reset to state OFF.\n\n  OFF (out=0) --j=0--> OFF\n  OFF (out=0) --j=1--> ON\n  ON  (out=1) --k=0--> ON\n  ON  (out=1) --k=1--> OFF\n\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input clk`: Clock signal for clocking sequential logic elements. Active on the rising edge.\n  - `input reset`: Active-high synchronous reset signal. Resets the state machine to the initial state, OFF.\n  - `input j`: Input signal for state transition from OFF to ON.\n  - `input k`: Input signal for state transition from ON to OFF.\n- Output Port:\n  - `output out`: Output signal representing the current state's output value.\n\nPort Characteristics:\n- All input and output ports are 1-bit wide.\n- The reset signal is synchronous and active-high, meaning it is asserted with the clock edge.\n\nState Machine Description:\n- This module implements a Moore state machine with two states: OFF and ON.\n- State Definitions:\n  - State OFF: Output `out` is '0'.\n  - State ON: Output `out` is '1'.\n\nState Transition Diagram:\n- From State OFF (out=0):\n  - If `j=0`, remain in state OFF.\n  - If `j=1`, transition to state ON.\n- From State ON (out=1):\n  - If `k=0`, remain in state ON.\n  - If `k=1`, transition to state OFF.\n\nInitial Conditions and Reset Behavior:\n- Upon the assertion of the reset signal, the state machine transitions to the OFF state regardless of the values of `j` and `k`. The output `out` will be '0' during and after the reset is applied.\n- The reset is synchronous; transitions caused by the reset occur at the clock edge.\n\nBit Indexing and Conventions:\n- All signals are single-bit and thus do not require specific bit indexing.\n\nEdge Cases and Input Boundaries:\n- The behavior for synchronous reset has been specified: it resets to state OFF.\n- Transitions only occur on the rising clock edge, ensuring no race conditions between `j` and `k` inputs.\n                    "
    },
    {
        "role": "user",
        "content": "Now using ALL the research you have done so far, please implement the Verilog module for the original specification:\n<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  j\n - input  k\n - output out\n\nThe module should implement a Moore state machine with two states, two\ninputs, and one output according to diagram described below. Reset is an\nactive-high synchronous reset to state OFF.\n\n  OFF (out=0) --j=0--> OFF\n  OFF (out=0) --j=1--> ON\n  ON  (out=1) --k=0--> ON\n  ON  (out=1) --k=1--> OFF\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n"
    }
]