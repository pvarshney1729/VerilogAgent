[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  in\n - output out\n\nThe module should implement a Moore machine with the diagram described\nbelow:\n\n  B (1) --0--> A\n  B (1) --1--> B\n  A (0) --0--> B\n  A (0) --1--> A\n\nIt should asynchronously reset into state B if reset if high.\n\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- **Inputs:**\n  - `input wire clk` : Clock signal for sequencing.\n  - `input wire areset` : Asynchronous reset signal, active high.\n  - `input wire in` : Input signal to the state machine.\n  \n- **Outputs:**\n  - `output reg out` : Output signal based on the current state.\n\nSpecifications:\n- **State Machine Type:** Moore machine.\n- **States and Transitions:**\n  - **State B**: Output `out` is 1.\n    - Transition to State A on `in == 0`.\n    - Remain in State B on `in == 1`.\n  - **State A**: Output `out` is 0.\n    - Transition to State B on `in == 0`.\n    - Remain in State A on `in == 1`.\n  \n- **Reset Behavior:**\n  - Asynchronous reset (`areset`) will immediately set the state to State B regardless of the clock.\n  - The reset is active high, meaning the state transitions to B when `areset` is 1.\n  \n- **Initial Conditions:**\n  - On power-up or reset event, the initial state is State B.\n  \n- **Clock and Timing:**\n  - State transitions occur on the rising edge of the clock signal (`clk`).\n  \n- **Signal Conventions:**\n  - All signals are 1-bit wide.\n  - Bit[0] refers to the least significant bit if applicable.\n  \n- **Race Conditions:**\n  - Ensure that the `areset` signal is appropriately synchronized to avoid indeterminate states on reset.\n  \n- **Edge Cases and Boundaries:**\n  - All transitions must be clearly defined for both `in = 0` and `in = 1` scenarios.\n  - The module must handle any spurious spikes on the `clk` and `areset` inputs to prevent unintended state transitions.\n                    "
    },
    {
        "role": "user",
        "content": "Now using ALL the research you have done so far, please implement the Verilog module for the original specification:\n<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  in\n - output out\n\nThe module should implement a Moore machine with the diagram described\nbelow:\n\n  B (1) --0--> A\n  B (1) --1--> B\n  A (0) --0--> B\n  A (0) --1--> A\n\nIt should asynchronously reset into state B if reset if high.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n"
    }
]