[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output shift_ena\n\nThis module is a part of the FSM for controlling a shift register, we\nwant the ability to enable the shift register for exactly 4 clock cycles\nwhenever the proper bit pattern is detected. Whenever the FSM is reset,\nassert shift_ena for 4 cycles, then 0 forever (until reset). Reset should\nbe active high synchronous.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input: \n  - `clk`: 1-bit clock signal. All sequential logic is triggered on the positive edge.\n  - `reset`: 1-bit active-high synchronous reset signal.\n- Output:\n  - `shift_ena`: 1-bit control signal for enabling the shift register.\n\nFunctional Description:\n- The TopModule is designed to interface with a shift register. It controls the enable signal (`shift_ena`) for the shift register based on the state of an internal Finite State Machine (FSM).\n- Upon detecting a predetermined bit pattern (details of the pattern detection are beyond the scope of this specification), the FSM will enable `shift_ena` for exactly 4 consecutive clock cycles.\n- Following a reset event (active high), the FSM will immediately assert `shift_ena` for 4 clock cycles, after which `shift_ena` will remain de-asserted (0) indefinitely until another reset occurs.\n- The reset is synchronous, meaning it only affects the FSM state and `shift_ena` on the rising edge of `clk`.\n\nSignal and Logic Details:\n- `shift_ena` must be initialized to 0 upon reset completion.\n- The module's behavior is fully defined by synchronous logic; no asynchronous logic is employed.\n- Edge cases include:\n  - If reset is applied during the assertion of `shift_ena`, the output immediately transitions to the reset behavior, asserting for 4 cycles post-reset.\n  - Ensure that no glitches occur on the `shift_ena` output during state transitions.\n\nInitial Conditions:\n- On power-up, assume an implicit reset condition, ensuring `shift_ena` is 0 until a reset is explicitly applied and released, allowing the FSM to start in a known state.\n\nBit Indexing:\n- All specified signals are single bit; no multi-bit indexing is required. Any future extensions involving multi-bit signals should follow the convention where `bit[0]` is the least significant bit.\n\nNote: The specific bit pattern detection mechanism is not detailed in this specification and should be defined based on system-level requirements.\n                    "
    },
    {
        "role": "user",
        "content": "Now using ALL the research you have done so far, please implement the Verilog module for the original specification:\n<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output shift_ena\n\nThis module is a part of the FSM for controlling a shift register, we\nwant the ability to enable the shift register for exactly 4 clock cycles\nwhenever the proper bit pattern is detected. Whenever the FSM is reset,\nassert shift_ena for 4 cycles, then 0 forever (until reset). Reset should\nbe active high synchronous.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n"
    }
]