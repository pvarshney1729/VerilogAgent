[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (32 bits)\n\nA linear feedback shift register is a shift register usually with a few\nXOR gates to produce the next state of the shift register. A Galois LFSR\nis one particular arrangement that shifts right, where a bit position with\na \"tap\" is XORed with the LSB output bit (q[0]) to produce its next value,\nwhile bit positions without a tap shift right unchanged. \n\nThe module should implement a 32-bit Galois LFSR with taps at bit\npositions 32, 22, 2, and 1. Reset should be active high synchronous, and\nshould reset the output q to 32'h1. Assume all sequential logic is\ntriggered on the positive edge of the clock.\n\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Inputs:\n  - clk: 1-bit clock signal. All sequential logic operations are triggered on the positive edge of this clock.\n  - reset: 1-bit active-high synchronous reset signal. When asserted, the LFSR output q is set to its initial state.\n\n- Output:\n  - q: 32-bit output representing the current state of the LFSR. Bit 0 (q[0]) is the least significant bit (LSB) and bit 31 (q[31]) is the most significant bit (MSB).\n\nFunctional Description:\n- The module implements a 32-bit Galois Linear Feedback Shift Register (LFSR).\n- The LFSR shifts right, with feedback applied to specific tap positions.\n- The taps are located at bit positions 31, 21, 1, and 0. Note that bit positions are zero-indexed.\n- During each clock cycle, the next state of the LFSR is computed as follows:\n  - The new value of q[31] is calculated as the XOR of the current value of q[0] with the current values of the tapped positions (q[31], q[21], q[1], and q[0]).\n  - All other bits shift right, where each bit q[i] takes the value of q[i+1] from the previous state.\n- The reset operation is synchronous and takes effect at the next rising edge of clk.\n- When reset is asserted, the LFSR is initialized to the state q = 32'h00000001.\n\nEdge Cases and Behavior:\n- Ensure that when reset is deasserted, the LFSR operates normally according to the feedback logic.\n- The LFSR repeats its sequence every 2^32 - 1 cycles, assuming the correct implementation of the taps and initial value.\n\nInitial Conditions:\n- At power-up or after reset is asserted, the LFSR output q is initialized to 32'h00000001.\n\nTiming:\n- All operations are synchronized to the rising edge of the clk signal.\n- The reset signal is sampled on the rising edge of clk, ensuring synchronous reset behavior.\n\nAdditional Notes:\n- Ensure that the LFSR logic is designed to avoid race conditions and to guarantee a maximal length sequence.\n- Verify that the feedback logic is correctly implemented to maintain the integrity of the LFSR operation.\n                    "
    },
    {
        "role": "user",
        "content": "Now using ALL the research you have done so far, please implement the Verilog module for the original specification:\n<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (32 bits)\n\nA linear feedback shift register is a shift register usually with a few\nXOR gates to produce the next state of the shift register. A Galois LFSR\nis one particular arrangement that shifts right, where a bit position with\na \"tap\" is XORed with the LSB output bit (q[0]) to produce its next value,\nwhile bit positions without a tap shift right unchanged. \n\nThe module should implement a 32-bit Galois LFSR with taps at bit\npositions 32, 22, 2, and 1. Reset should be active high synchronous, and\nshould reset the output q to 32'h1. Assume all sequential logic is\ntriggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n"
    }
]