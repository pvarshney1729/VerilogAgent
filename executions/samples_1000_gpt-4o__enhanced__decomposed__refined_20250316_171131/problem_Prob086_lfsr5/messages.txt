[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (5 bits)\n\nA linear feedback shift register is a shift register usually with a few\nXOR gates to produce the next state of the shift register. A Galois LFSR\nis one particular arrangement that shifts right, where a bit position with\na \"tap\" is XORed with the LSB output bit (q[0]) to produce its next value,\nwhile bit positions without a tap shift right unchanged.  If the taps positions\nare carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length\nLFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is\nnever reached).\n\nThe module should implement a 5-bit maximal-length Galois LFSR with taps\nat bit positions 5 and 3. The active-high synchronous reset should reset\nthe LFSR output to 1. Assume all sequential logic is triggered on the\npositive edge of the clock.\n\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `clk`: 1-bit clock input, positive edge-triggered.\n  - `reset`: 1-bit active-high synchronous reset input.\n\n- Output Ports:\n  - `q`: 5-bit output representing the current state of the LFSR. Bit indexing is from `q[4]` (most significant bit) to `q[0]` (least significant bit).\n\nFunctional Description:\n1. The module implements a 5-bit maximal-length Galois Linear Feedback Shift Register (LFSR). \n2. The LFSR operates by shifting its bits to the right on every positive edge of the clock.\n3. Taps are applied at bit positions 4 and 2 (using zero-based indexing).\n4. The new value of `q[4]` is determined by XORing `q[0]` (least significant bit) with `q[2]` and `q[4]` (tap positions).\n5. The rest of the bits (`q[3:0]`) shift right by one position.\n\nReset Behavior:\n- Upon an active-high synchronous reset, the LFSR output (`q`) will be initialized to the binary value `00001`.\n\nSequential Logic:\n- All changes to the LFSR occur on the positive edge of the `clk`.\n- The reset is synchronous, meaning the initialization of `q` to `00001` occurs on the next rising edge of `clk` when `reset` is high.\n\nEdge Cases:\n- The LFSR is designed to cycle through all possible non-zero states (31 states for a 5-bit LFSR) before repeating.\n- The all-zero state is not considered within the operational sequence of the LFSR.\n\nNote on Bit Indexing and Conventions:\n- Bit `q[0]` is the least significant bit of the output.\n- Bit `q[4]` is the most significant bit and determines the next state based on the LFSR feedback logic.\n\nOperational Constraints:\n- Ensure that no race conditions occur by maintaining the specified clock and reset conditions.\n- The initial state after reset ensures that the LFSR never enters the all-zero state, hence maintaining maximum-length cycling.\n\nThis specification ensures a clear understanding of the LFSR's functional intent, reset behavior, and operational constraints for correct implementation in Verilog.\n                    "
    },
    {
        "role": "user",
        "content": "Now using ALL the research you have done so far, please implement the Verilog module for the original specification:\n<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (5 bits)\n\nA linear feedback shift register is a shift register usually with a few\nXOR gates to produce the next state of the shift register. A Galois LFSR\nis one particular arrangement that shifts right, where a bit position with\na \"tap\" is XORed with the LSB output bit (q[0]) to produce its next value,\nwhile bit positions without a tap shift right unchanged.  If the taps positions\nare carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length\nLFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is\nnever reached).\n\nThe module should implement a 5-bit maximal-length Galois LFSR with taps\nat bit positions 5 and 3. The active-high synchronous reset should reset\nthe LFSR output to 1. Assume all sequential logic is triggered on the\npositive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n"
    }
]