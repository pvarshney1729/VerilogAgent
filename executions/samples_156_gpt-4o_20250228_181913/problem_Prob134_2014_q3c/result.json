{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset_n,\n    input logic x,\n    input logic [2:0] y,\n    output logic Y0,\n    output logic z\n);\n\n    logic [2:0] Y; // Next state\n\n    // State transition logic\n    always_ff @(posedge clk or negedge reset_n) begin\n        if (!reset_n) begin\n            Y <= 3'b000;\n        end else begin\n            case (y)\n                3'b000: Y <= (x == 1'b0) ? 3'b000 : 3'b001;\n                3'b001: Y <= (x == 1'b0) ? 3'b001 : 3'b100;\n                3'b010: Y <= (x == 1'b0) ? 3'b010 : 3'b001;\n                3'b011: Y <= (x == 1'b0) ? 3'b001 : 3'b010;\n                3'b100: Y <= (x == 1'b0) ? 3'b011 : 3'b100;\n                default: Y <= 3'b000; // Safe state for undefined states\n            endcase\n        end\n    end\n\n    // Output logic\n    always_comb begin\n        Y0 = Y[0];\n        case (y)\n            3'b000, 3'b001, 3'b010: z = 1'b0;\n            3'b011, 3'b100: z = 1'b1;\n            default: z = 1'b0; // Safe output for undefined states\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 56,
        "passfail": "r"
    }
}