{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [2:0] {\n        Idle    = 3'b000,\n        Count1  = 3'b001,\n        Count2  = 3'b010,\n        Count3  = 3'b011,\n        Count4  = 3'b100,\n        Count5  = 3'b101,\n        Count6  = 3'b110,\n        Error   = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= Idle;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_comb begin\n        // Default output values\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n        next_state = current_state;\n\n        case (current_state)\n            Idle: begin\n                if (in) next_state = Count1;\n            end\n            Count1: begin\n                if (in) next_state = Count2;\n                else next_state = Idle;\n            end\n            Count2: begin\n                if (in) next_state = Count3;\n                else next_state = Idle;\n            end\n            Count3: begin\n                if (in) next_state = Count4;\n                else next_state = Idle;\n            end\n            Count4: begin\n                if (in) next_state = Count5;\n                else next_state = Idle;\n            end\n            Count5: begin\n                if (in) next_state = Count6;\n                else begin\n                    next_state = Idle;\n                    disc = 1'b1;\n                end\n            end\n            Count6: begin\n                if (in) next_state = Error;\n                else begin\n                    next_state = Idle;\n                    flag = 1'b1;\n                end\n            end\n            Error: begin\n                err = 1'b1;\n                if (!in) next_state = Idle;\n            end\n            default: next_state = Idle;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 29,
        "passfail": "R"
    }
}