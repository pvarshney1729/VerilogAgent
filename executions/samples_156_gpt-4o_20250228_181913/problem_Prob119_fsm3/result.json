{
    "code": "module TopModule (\n    input logic clk,       // Clock input, positive edge triggered, 1-bit wide\n    input logic areset,    // Asynchronous active-high reset input, 1-bit wide\n    input logic in,        // State machine input, 1-bit wide\n    output logic out       // State machine output, 1-bit wide, registered\n);\n\n    typedef enum logic [1:0] {\n        A = 2'b00,\n        B = 2'b01,\n        C = 2'b10,\n        D = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A; // Handle undefined states\n        endcase\n    end\n\n    // State register and output logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= A;\n            out <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            case (next_state)\n                A: out <= 1'b0;\n                B: out <= 1'b0;\n                C: out <= 1'b0;\n                D: out <= 1'b1;\n                default: out <= 1'b0; // Default output for safety\n            endcase\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}