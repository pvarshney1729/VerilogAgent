{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic pattern_detected,\n    output logic shift_ena\n);\n    // State encoding\n    typedef enum logic [2:0] {\n        RESET = 3'b000, ENABLE1 = 3'b001, ENABLE2 = 3'b010,\n        ENABLE3 = 3'b011, ENABLE4 = 3'b100, IDLE = 3'b101\n    } state_t;\n    \n    state_t state, next_state;\n    \n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) \n            state <= RESET;\n        else \n            state <= next_state;\n    end\n    \n    // Next state and output logic\n    always_comb begin\n        shift_ena = 0;\n        case (state)\n            RESET: begin\n                shift_ena = 1;\n                next_state = ENABLE1;\n            end\n            ENABLE1: begin\n                shift_ena = 1;\n                next_state = ENABLE2;\n            end\n            ENABLE2: begin\n                shift_ena = 1;\n                next_state = ENABLE3;\n            end\n            ENABLE3: begin\n                shift_ena = 1;\n                next_state = ENABLE4;\n            end\n            ENABLE4: begin\n                shift_ena = 1;\n                next_state = IDLE;\n            end\n            IDLE: begin\n                if (pattern_detected) \n                    next_state = ENABLE1;\n                else \n                    next_state = IDLE;\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 2,
        "passfail": "R"
    }
}