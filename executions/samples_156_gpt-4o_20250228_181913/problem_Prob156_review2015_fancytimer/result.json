{
    "code": "module TopModule(\n    input logic clk,          // Clock input, triggers sequential logic on rising edge\n    input logic reset,        // Synchronous active high reset\n    input logic data,         // Serial data input\n    output logic [3:0] count, // 4-bit output, represents remaining time in 1000-cycle increments\n    output logic counting,    // 1-bit output, asserted when counting\n    output logic done,        // 1-bit output, asserted when counting is complete\n    input logic ack           // 1-bit input, acknowledgment from user\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        DETECT_1,\n        DETECT_11,\n        DETECT_110,\n        DETECT_1101,\n        LOAD_DELAY,\n        COUNTING,\n        WAIT_ACK\n    } state_t;\n\n    state_t state, next_state;\n    logic [3:0] delay;\n    logic [9:0] cycle_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            state <= IDLE;\n            count <= 4'bxxxx;\n            counting <= 1'b0;\n            done <= 1'b0;\n            cycle_count <= 10'b0;\n        end else begin\n            state <= next_state;\n            if (state == LOAD_DELAY) begin\n                delay <= {delay[2:0], data};\n            end\n            if (state == COUNTING) begin\n                if (cycle_count == 10'd999) begin\n                    cycle_count <= 10'b0;\n                    count <= count - 1;\n                end else begin\n                    cycle_count <= cycle_count + 1;\n                end\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = state;\n        counting = 1'b0;\n        done = 1'b0;\n        \n        case (state)\n            IDLE: begin\n                if (data) next_state = DETECT_1;\n            end\n            DETECT_1: begin\n                if (data) next_state = DETECT_11;\n                else next_state = IDLE;\n            end\n            DETECT_11: begin\n                if (!data) next_state = DETECT_110;\n                else next_state = IDLE;\n            end\n            DETECT_110: begin\n                if (data) next_state = DETECT_1101;\n                else next_state = IDLE;\n            end\n            DETECT_1101: begin\n                if (data) next_state = LOAD_DELAY;\n                else next_state = IDLE;\n            end\n            LOAD_DELAY: begin\n                if (delay == 4'b1111) begin\n                    next_state = COUNTING;\n                    count = delay;\n                end\n            end\n            COUNTING: begin\n                counting = 1'b1;\n                if (count == 4'b0000 && cycle_count == 10'd999) begin\n                    next_state = WAIT_ACK;\n                    done = 1'b1;\n                end\n            end\n            WAIT_ACK: begin\n                if (ack) next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}