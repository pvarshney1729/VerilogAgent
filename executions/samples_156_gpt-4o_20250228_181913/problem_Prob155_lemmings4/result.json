{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    typedef enum logic [2:0] {\n        STATE_WALK_LEFT,\n        STATE_WALK_RIGHT,\n        STATE_FALLING,\n        STATE_DIGGING,\n        STATE_SPLATTERED\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [4:0] fall_counter;\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= STATE_WALK_LEFT;\n            fall_counter <= 5'd0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == STATE_FALLING && ground == 0)\n                fall_counter <= fall_counter + 1;\n            else\n                fall_counter <= 5'd0;\n        end\n    end\n\n    always_comb begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n        next_state = current_state;\n\n        case (current_state)\n            STATE_WALK_LEFT: begin\n                walk_left = 1'b1;\n                if (ground == 0)\n                    next_state = STATE_FALLING;\n                else if (dig == 1)\n                    next_state = STATE_DIGGING;\n                else if (bump_left == 1)\n                    next_state = STATE_WALK_RIGHT;\n            end\n\n            STATE_WALK_RIGHT: begin\n                walk_right = 1'b1;\n                if (ground == 0)\n                    next_state = STATE_FALLING;\n                else if (dig == 1)\n                    next_state = STATE_DIGGING;\n                else if (bump_right == 1)\n                    next_state = STATE_WALK_LEFT;\n            end\n\n            STATE_FALLING: begin\n                aaah = 1'b1;\n                if (ground == 1) begin\n                    if (fall_counter > 5'd20)\n                        next_state = STATE_SPLATTERED;\n                    else if (walk_left == 1)\n                        next_state = STATE_WALK_LEFT;\n                    else\n                        next_state = STATE_WALK_RIGHT;\n                end\n            end\n\n            STATE_DIGGING: begin\n                digging = 1'b1;\n                if (ground == 0)\n                    next_state = STATE_FALLING;\n            end\n\n            STATE_SPLATTERED: begin\n                // Remain in splattered state\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 193,
        "passfail": "R"
    }
}