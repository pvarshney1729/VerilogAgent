{
    "code": "```verilog\nmodule TopModule (\n    input logic clk,\n    input logic areset,\n    input logic predict_valid,\n    input logic [6:0] predict_pc,\n    input logic train_valid,\n    input logic train_taken,\n    input logic train_mispredicted,\n    input logic [6:0] train_history,\n    input logic [6:0] train_pc,\n    output logic predict_taken,\n    output logic [6:0] predict_history\n);\n\n    logic [6:0] global_history;\n    logic [1:0] PHT [0:127];\n    logic [6:0] predict_index, train_index;\n\n    // Initialize PHT to weakly not-taken state (2'b01)\n    initial begin\n        integer i;\n        for (i = 0; i < 128; i = i + 1) begin\n            PHT[i] = 2'b01;\n        end\n    end\n\n    // Asynchronous reset and global history update\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            global_history <= 7'b0000000;\n        end else if (train_valid && train_mispredicted) begin\n            global_history <= train_history;\n        end else if (predict_valid || train_valid) begin\n            global_history <= {global_history[5:0], (train_valid ? train_taken : predict_taken)};\n        end\n    end\n\n    // Compute indices for prediction and training\n    always_comb begin\n        predict_index = predict_pc ^ global_history;\n        train_index = train_pc ^ global_history;\n    end\n\n    // Prediction logic\n    always_comb begin\n        if (predict_valid) begin\n            case (PHT[predict_index])\n                2'b00, 2'b01: predict_taken = 1'b0;\n                2'b10, 2'b11: predict_taken = 1'b1;\n            endcase\n            predict_history = global_history;\n        end\n    end\n\n    // Training logic\n    always_ff @(posedge clk) begin\n        if (train_valid) begin\n            case ({train_taken, PHT[train_index]})\n                3'b100: PHT[train_index] <= 2'b10; // 01 -> 10\n                3'b101: PHT[train_index] <= 2'b11; // 10 -> 11\n                3'b110: PHT[train_index] <= 2'b11; // 11 -> 11\n                3'b111: PHT[train_index] <= 2'b11; // 11 -> 11\n                3'b000: PHT[train_index] <= 2'b00; // 00 -> 00\n                3'b001: PHT[train_index] <= 2'b00; // 01 -> 00\n                3'b010: PHT[train_index] <= 2'b01; // 10 -> 01\n                3'b011: PHT[train_index] <= 2'b10; // 11 -> 10\n            endcase\n        end\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}