{
    "code": "module TopModule (\n    input logic clk,         // Clock signal, triggers all sequential logic on the positive edge\n    input logic in,          // Serial data input, receives the bit stream\n    input logic reset,       // Active-high synchronous reset signal\n    output logic [7:0] out_byte,  // 8-bit output representing the received data byte\n    output logic done        // Output signal asserted when a valid byte is received\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        RECEIVE = 3'b001,\n        VERIFY = 3'b010,\n        OUTPUT = 3'b011,\n        ERROR_RECOVERY = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n    logic [7:0] shift_reg;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_byte <= 8'b0;\n            done <= 1'b0;\n            bit_count <= 3'b0;\n            shift_reg <= 8'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == RECEIVE) begin\n                shift_reg <= {in, shift_reg[7:1]};\n                bit_count <= bit_count + 1;\n            end\n            if (current_state == OUTPUT) begin\n                out_byte <= shift_reg;\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = RECEIVE;\n                end\n            end\n            RECEIVE: begin\n                if (bit_count == 3'b111) begin\n                    next_state = VERIFY;\n                end\n            end\n            VERIFY: begin\n                if (in == 1'b1) begin\n                    next_state = OUTPUT;\n                end else begin\n                    next_state = ERROR_RECOVERY;\n                end\n            end\n            OUTPUT: begin\n                next_state = IDLE;\n            end\n            ERROR_RECOVERY: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 76,
        "passfail": "R"
    }
}