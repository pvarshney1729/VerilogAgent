{
    "code": "module ModuleA (\n    input logic x,\n    input logic y,\n    output logic z\n);\n    always @(*) begin\n        z = (x ^ y) & x;\n    end\nendmodule\n\nmodule ModuleB (\n    input logic x,\n    input logic y,\n    input logic clk,\n    input logic rst,\n    output logic z\n);\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            z <= 1'b1;\n        end else begin\n            z <= (~x & ~y) | (x & y);\n        end\n    end\nendmodule\n\nmodule TopLevel (\n    input logic x,\n    input logic y,\n    input logic clk,\n    input logic rst,\n    output logic z\n);\n    logic a1_out, a2_out, b1_out, b2_out;\n    logic or_out, and_out;\n\n    ModuleA u1 (\n        .x(x),\n        .y(y),\n        .z(a1_out)\n    );\n\n    ModuleB u2 (\n        .x(x),\n        .y(y),\n        .clk(clk),\n        .rst(rst),\n        .z(b1_out)\n    );\n\n    ModuleA u3 (\n        .x(x),\n        .y(y),\n        .z(a2_out)\n    );\n\n    ModuleB u4 (\n        .x(x),\n        .y(y),\n        .clk(clk),\n        .rst(rst),\n        .z(b2_out)\n    );\n\n    always @(*) begin\n        or_out = a1_out | b1_out;\n        and_out = a2_out & b2_out;\n        z = or_out ^ and_out;\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    }
}