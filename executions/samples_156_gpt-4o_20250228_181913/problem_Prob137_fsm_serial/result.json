{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        RECEIVE = 2'b01,\n        VERIFY_STOP = 2'b10\n    } state_t;\n\n    state_t state, next_state;\n    logic [7:0] data_shift;\n    logic [3:0] bit_count;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            state <= IDLE;\n            data_shift <= 8'b0;\n            bit_count <= 4'b0;\n            done <= 1'b0;\n        end else begin\n            state <= next_state;\n            if (state == RECEIVE) begin\n                data_shift <= {in, data_shift[7:1]};\n                bit_count <= bit_count + 1;\n            end\n            if (state == VERIFY_STOP && in == 1'b1) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = state;\n        case (state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = RECEIVE;\n                end\n            end\n            RECEIVE: begin\n                if (bit_count == 4'd8) begin\n                    next_state = VERIFY_STOP;\n                end\n            end\n            VERIFY_STOP: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 70,
        "passfail": "R"
    }
}