{
    "code": "module TopModule (\n    input logic clk,               // Clock input, positive edge-triggered\n    input logic areset,            // Asynchronous active-high reset\n    input logic bump_left,         // Input signal indicating left obstacle\n    input logic bump_right,        // Input signal indicating right obstacle\n    output logic walk_left,        // Output signal indicating walking left\n    output logic walk_right        // Output signal indicating walking right\n);\n\n    typedef enum logic [1:0] {\n        STATE_WALK_LEFT  = 2'b01,\n        STATE_WALK_RIGHT = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            STATE_WALK_LEFT: begin\n                if (bump_left) \n                    next_state = STATE_WALK_RIGHT;\n                else \n                    next_state = STATE_WALK_LEFT;\n            end\n            STATE_WALK_RIGHT: begin\n                if (bump_right) \n                    next_state = STATE_WALK_LEFT;\n                else \n                    next_state = STATE_WALK_RIGHT;\n            end\n            default: next_state = STATE_WALK_LEFT;\n        endcase\n    end\n\n    // State flip-flops with asynchronous reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= STATE_WALK_LEFT;\n        else\n            current_state <= next_state;\n    end\n\n    // Output logic\n    always @(*) begin\n        case (current_state)\n            STATE_WALK_LEFT: begin\n                walk_left = 1'b1;\n                walk_right = 1'b0;\n            end\n            STATE_WALK_RIGHT: begin\n                walk_left = 1'b0;\n                walk_right = 1'b1;\n            end\n            default: begin\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}