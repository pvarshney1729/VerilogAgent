{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        IDLE    = 3'b000,\n        ONE     = 3'b001,\n        TWO     = 3'b010,\n        THREE   = 3'b011,\n        FOUR    = 3'b100,\n        FIVE    = 3'b101,\n        SIX     = 3'b110,\n        SEVEN   = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State register with synchronous reset\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always @(*) begin\n        // Default outputs\n        disc = 1'b0;\n        flag = 1'b0;\n        err  = 1'b0;\n        next_state = current_state;\n\n        case (current_state)\n            IDLE: begin\n                if (in) next_state = ONE;\n            end\n            ONE: begin\n                if (in) next_state = TWO;\n                else next_state = IDLE;\n            end\n            TWO: begin\n                if (in) next_state = THREE;\n                else next_state = IDLE;\n            end\n            THREE: begin\n                if (in) next_state = FOUR;\n                else next_state = IDLE;\n            end\n            FOUR: begin\n                if (in) next_state = FIVE;\n                else next_state = IDLE;\n            end\n            FIVE: begin\n                if (in) next_state = SIX;\n                else begin\n                    disc = 1'b1; // 0111110 detected\n                    next_state = IDLE;\n                end\n            end\n            SIX: begin\n                if (in) next_state = SEVEN;\n                else begin\n                    flag = 1'b1; // 01111110 detected\n                    next_state = IDLE;\n                end\n            end\n            SEVEN: begin\n                if (in) begin\n                    err = 1'b1; // Error: 7 or more 1s\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 54,
        "passfail": "R"
    }
}