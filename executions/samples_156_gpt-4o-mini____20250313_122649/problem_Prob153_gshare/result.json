{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic predict_valid,\n    input logic [6:0] predict_pc,\n    output logic predict_taken,\n    output logic [6:0] predict_history,\n    input logic train_valid,\n    input logic train_taken,\n    input logic train_mispredicted,\n    input logic [6:0] train_history,\n    input logic [6:0] train_pc\n);\n\n    logic [1:0] PHT [127:0]; // Pattern History Table\n    logic [6:0] global_history; // Global History Register\n    logic [6:0] index; // Index for PHT\n    logic [1:0] counter_state; // State of the counter for prediction\n    logic training; // Flag for training operation\n    logic [1:0] next_counter_state; // Next state for the counter\n\n    // Asynchronous reset for global history\n    always @(posedge clk) begin\n        if (areset) begin\n            global_history <= 7'b0;\n            for (int i = 0; i < 128; i++) begin\n                PHT[i] <= 2'b00; // Initialize PHT to 0\n            end\n        end else begin\n            if (train_valid) begin\n                // Update PHT based on training\n                index <= train_pc ^ train_history; // Compute index\n                if (train_taken) begin\n                    next_counter_state <= (PHT[index] == 2'b11) ? 2'b11 : PHT[index] + 1; // Increment\n                end else begin\n                    next_counter_state <= (PHT[index] == 2'b00) ? 2'b00 : PHT[index] - 1; // Decrement\n                end\n                PHT[index] <= next_counter_state; // Update PHT\n                if (train_mispredicted) begin\n                    global_history <= train_history; // Recover history\n                end\n            end\n        end\n    end\n\n    // Prediction logic\n    always @(*) begin\n        if (predict_valid) begin\n            index = predict_pc ^ global_history; // Compute index\n            counter_state = PHT[index]; // Read current state\n            predict_taken = (counter_state[1] == 1'b1); // Predict taken if MSB is 1\n            predict_history = global_history; // Output current history\n        end else begin\n            predict_taken = 1'b0; // Default output\n            predict_history = 7'b0; // Default output\n        end\n    end\n\n    // Update global history on prediction\n    always @(posedge clk) begin\n        if (!areset && predict_valid) begin\n            global_history <= {global_history[5:0], predict_taken}; // Shift in the prediction\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 545,
        "passfail": "R"
    }
}