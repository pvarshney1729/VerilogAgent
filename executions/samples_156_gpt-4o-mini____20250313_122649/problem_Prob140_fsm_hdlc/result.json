{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [2:0] {\n        S0, // Initial state\n        S1, // 0\n        S2, // 01\n        S3, // 011\n        S4, // 0111\n        S5, // 01111\n        S6, // 011111\n        S7  // 0111111 (error state)\n    } state_t;\n\n    state_t state, next_state;\n\n    // State transition\n    always @(posedge clk) begin\n        if (reset) begin\n            state <= S0;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            S0: next_state = (in == 1'b0) ? S1 : S0;\n            S1: next_state = (in == 1'b1) ? S2 : S1;\n            S2: next_state = (in == 1'b1) ? S3 : S1;\n            S3: next_state = (in == 1'b1) ? S4 : S1;\n            S4: next_state = (in == 1'b1) ? S5 : S1;\n            S5: next_state = (in == 1'b1) ? S6 : S1;\n            S6: next_state = (in == 1'b1) ? S7 : S1;\n            S7: next_state = (in == 1'b1) ? S7 : S1; // Stay in error state\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n\n        case (state)\n            S6: disc = 1'b1; // 0111110 detected\n            S5: flag = 1'b1; // 01111110 detected\n            S7: err = 1'b1;  // 01111111 detected\n            default: ;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}