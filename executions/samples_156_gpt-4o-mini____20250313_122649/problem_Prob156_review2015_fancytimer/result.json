{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic data,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done,\n    input  logic ack\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        WAIT_PATTERN,\n        SHIFT_DELAY,\n        COUNTING,\n        DONE_STATE\n    } state_t;\n\n    state_t state, next_state;\n    logic [3:0] delay;\n    logic [9:0] counter; // 1000 cycles max\n    logic [3:0] remaining_time;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            state <= IDLE;\n            counter <= 10'b0;\n            delay <= 4'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            state <= next_state;\n            if (state == COUNTING) begin\n                if (counter < (delay + 4'b1) * 10'd1000 - 1) begin\n                    counter <= counter + 10'b1;\n                end else begin\n                    counter <= 10'b0;\n                end\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (state == COUNTING) begin\n            if (counter < 10'd1000) begin\n                remaining_time <= delay;\n            end else if (counter < 10'd2000) begin\n                remaining_time <= delay - 4'b1;\n            end else if (counter < 10'd3000) begin\n                remaining_time <= delay - 4'b2;\n            end else if (counter < 10'd4000) begin\n                remaining_time <= delay - 4'b3;\n            end else if (counter < 10'd5000) begin\n                remaining_time <= delay - 4'b4;\n            end else if (counter < 10'd6000) begin\n                remaining_time <= delay - 4'b5;\n            end else begin\n                remaining_time <= 4'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = state;\n        count = 4'b0; // Don't care when not counting\n        done = 1'b0;\n\n        case (state)\n            IDLE: begin\n                if (data == 1'b1) begin\n                    next_state = WAIT_PATTERN;\n                end\n            end\n            WAIT_PATTERN: begin\n                // Detect pattern 1101\n                if (data == 1'b1) begin\n                    next_state = SHIFT_DELAY;\n                end\n            end\n            SHIFT_DELAY: begin\n                // Shift in 4 bits for delay\n                delay = {delay[2:0], data};\n                if (delay[3] == 1'b1) begin\n                    next_state = COUNTING;\n                    counting = 1'b1;\n                end\n            end\n            COUNTING: begin\n                if (counter >= (delay + 4'b1) * 10'd1000 - 1) begin\n                    next_state = DONE_STATE;\n                    done = 1'b1;\n                end\n            end\n            DONE_STATE: begin\n                if (ack == 1'b1) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}