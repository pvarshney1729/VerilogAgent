{
    "code": "module TopModule (\n    input  logic        clk,                // Clock signal, positive edge-triggered\n    input  logic        areset,             // Asynchronous active-high reset\n    input  logic        predict_valid,      // Valid signal for prediction request\n    input  logic [6:0]  predict_pc,         // 7-bit program counter for prediction, unsigned, LSB is bit[0]\n    output logic        predict_taken,      // Predicted branch direction\n    output logic [6:0]  predict_history,    // Branch history used for the prediction, unsigned\n    input  logic        train_valid,        // Valid signal for training request\n    input  logic        train_taken,        // Actual branch outcome\n    input  logic        train_mispredicted, // Indicates if the branch was mispredicted\n    input  logic [6:0]  train_history,      // 7-bit branch history used during training, unsigned\n    input  logic [6:0]  train_pc            // 7-bit program counter used during training, unsigned\n);\n\n    // 128-entry table of 2-bit saturating counters\n    logic [1:0] saturating_counters [0:127];\n    logic [6:0] global_history;\n    logic [6:0] predict_index, train_index;\n\n    // Initialize saturating counters and global history\n    initial begin\n        integer i;\n        for (i = 0; i < 128; i = i + 1) begin\n            saturating_counters[i] = 2'b10; // Weakly not taken\n        end\n        global_history = 7'b0000000;\n    end\n\n    // Calculate indices\n    assign predict_index = predict_pc ^ global_history;\n    assign train_index = train_pc ^ train_history;\n\n    // Predict operation\n    always @(*) begin\n        if (predict_valid) begin\n            predict_taken = saturating_counters[predict_index][1];\n            predict_history = global_history;\n        end\n    end\n\n    // Sequential logic for training and updating global history\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            global_history <= 7'b0000000;\n        end else begin\n            if (train_valid) begin\n                // Update saturating counter\n                if (train_taken) begin\n                    if (saturating_counters[train_index] != 2'b11) begin\n                        saturating_counters[train_index] <= saturating_counters[train_index] + 1;\n                    end\n                end else begin\n                    if (saturating_counters[train_index] != 2'b00) begin\n                        saturating_counters[train_index] <= saturating_counters[train_index] - 1;\n                    end\n                end\n\n                // Restore global history if mispredicted\n                if (train_mispredicted) begin\n                    global_history <= train_history;\n                end else begin\n                    global_history <= {global_history[5:0], train_taken};\n                end\n            end else if (predict_valid) begin\n                // Update global history if not training\n                global_history <= {global_history[5:0], predict_taken};\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 600,
        "passfail": "R"
    }
}