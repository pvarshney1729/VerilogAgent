{
    "code": "module TopModule (\n    input logic clk,        // Clock signal, positive edge-triggered\n    input logic resetn,     // Active-low synchronous reset\n    input logic [2:0] r,    // Request signals from three devices\n    output logic [2:0] g    // Grant signals to three devices\n);\n\n    typedef enum logic [1:0] {\n        A = 2'b00,  // Initial state\n        B = 2'b01,  // Grant to device 0\n        C = 2'b10,  // Grant to device 1\n        D = 2'b11   // Grant to device 2\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            A: begin\n                if (r[0])\n                    next_state = B;\n                else if (r[1])\n                    next_state = C;\n                else if (r[2])\n                    next_state = D;\n                else\n                    next_state = A;\n            end\n            B: begin\n                if (r[0])\n                    next_state = B;\n                else\n                    next_state = A;\n            end\n            C: begin\n                if (r[1])\n                    next_state = C;\n                else\n                    next_state = A;\n            end\n            D: begin\n                if (r[2])\n                    next_state = D;\n                else\n                    next_state = A;\n            end\n            default: next_state = A;\n        endcase\n    end\n\n    // State update logic\n    always_ff @(posedge clk) begin\n        if (!resetn)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\n\n    // Output logic\n    always @(*) begin\n        case (current_state)\n            A: g = 3'b000;\n            B: g = 3'b001;\n            C: g = 3'b010;\n            D: g = 3'b100;\n            default: g = 3'b000;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}