{
    "code": "module TopModule (\n    input logic clk,           // Clock signal, positive edge-triggered\n    input logic areset,        // Asynchronous reset, active high\n    input logic bump_left,     // Indicates bump on the left\n    input logic bump_right,    // Indicates bump on the right\n    input logic ground,        // Indicates if ground is present\n    input logic dig,           // Command to start digging\n    output logic walk_left,    // Active when walking left\n    output logic walk_right,   // Active when walking right\n    output logic aaah,         // Active when falling\n    output logic digging       // Active when digging\n);\n\n    typedef enum logic [2:0] {\n        S_WALK_LEFT,\n        S_WALK_RIGHT,\n        S_FALLING_LEFT,\n        S_FALLING_RIGHT,\n        S_DIGGING_LEFT,\n        S_DIGGING_RIGHT,\n        S_SPLATTERED\n    } state_t;\n\n    state_t state, next_state;\n    logic [4:0] fall_counter;\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= S_WALK_LEFT;\n            fall_counter <= 5'd0;\n        end else begin\n            state <= next_state;\n            if (state == S_FALLING_LEFT || state == S_FALLING_RIGHT) begin\n                fall_counter <= fall_counter + 5'd1;\n            end else begin\n                fall_counter <= 5'd0;\n            end\n        end\n    end\n\n    always_comb begin\n        // Default outputs\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n        next_state = state;\n\n        case (state)\n            S_WALK_LEFT: begin\n                walk_left = 1'b1;\n                if (!ground) begin\n                    next_state = S_FALLING_LEFT;\n                end else if (dig) begin\n                    next_state = S_DIGGING_LEFT;\n                end else if (bump_left) begin\n                    next_state = S_WALK_RIGHT;\n                end\n            end\n            S_WALK_RIGHT: begin\n                walk_right = 1'b1;\n                if (!ground) begin\n                    next_state = S_FALLING_RIGHT;\n                end else if (dig) begin\n                    next_state = S_DIGGING_RIGHT;\n                end else if (bump_right) begin\n                    next_state = S_WALK_LEFT;\n                end\n            end\n            S_FALLING_LEFT: begin\n                aaah = 1'b1;\n                if (ground) begin\n                    if (fall_counter > 5'd20) begin\n                        next_state = S_SPLATTERED;\n                    end else begin\n                        next_state = S_WALK_LEFT;\n                    end\n                end\n            end\n            S_FALLING_RIGHT: begin\n                aaah = 1'b1;\n                if (ground) begin\n                    if (fall_counter > 5'd20) begin\n                        next_state = S_SPLATTERED;\n                    end else begin\n                        next_state = S_WALK_RIGHT;\n                    end\n                end\n            end\n            S_DIGGING_LEFT: begin\n                digging = 1'b1;\n                if (!ground) begin\n                    next_state = S_FALLING_LEFT;\n                end\n            end\n            S_DIGGING_RIGHT: begin\n                digging = 1'b1;\n                if (!ground) begin\n                    next_state = S_FALLING_RIGHT;\n                end\n            end\n            S_SPLATTERED: begin\n                // All outputs remain 0\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 156,
        "passfail": "R"
    }
}