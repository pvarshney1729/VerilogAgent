{
    "code": "module TopModule (\n    input logic clk,           // Clock signal, positive edge-triggered\n    input logic areset,        // Asynchronous reset, active high\n    input logic bump_left,     // Indicates obstacle on the left\n    input logic bump_right,    // Indicates obstacle on the right\n    input logic ground,        // 1 when on ground, 0 when falling\n    input logic dig,           // 1 to initiate digging\n    output logic walk_left,    // 1 when walking left\n    output logic walk_right,   // 1 when walking right\n    output logic aaah,         // 1 when falling\n    output logic digging       // 1 when digging\n);\n\n    typedef enum logic [2:0] {\n        WALK_LEFT,\n        WALK_RIGHT,\n        FALLING,\n        DIGGING_LEFT,\n        DIGGING_RIGHT\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            WALK_LEFT: begin\n                if (!ground)\n                    next_state = FALLING;\n                else if (dig)\n                    next_state = DIGGING_LEFT;\n                else if (bump_left || bump_right)\n                    next_state = WALK_RIGHT;\n                else\n                    next_state = WALK_LEFT;\n            end\n            WALK_RIGHT: begin\n                if (!ground)\n                    next_state = FALLING;\n                else if (dig)\n                    next_state = DIGGING_RIGHT;\n                else if (bump_left || bump_right)\n                    next_state = WALK_LEFT;\n                else\n                    next_state = WALK_RIGHT;\n            end\n            FALLING: begin\n                if (ground)\n                    next_state = (walk_left) ? WALK_LEFT : WALK_RIGHT;\n                else\n                    next_state = FALLING;\n            end\n            DIGGING_LEFT: begin\n                if (!ground)\n                    next_state = FALLING;\n                else\n                    next_state = DIGGING_LEFT;\n            end\n            DIGGING_RIGHT: begin\n                if (!ground)\n                    next_state = FALLING;\n                else\n                    next_state = DIGGING_RIGHT;\n            end\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    // State register\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= WALK_LEFT;\n        else\n            current_state <= next_state;\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left = (current_state == WALK_LEFT);\n        walk_right = (current_state == WALK_RIGHT);\n        aaah = (current_state == FALLING);\n        digging = (current_state == DIGGING_LEFT || current_state == DIGGING_RIGHT);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}