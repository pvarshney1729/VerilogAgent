{
    "code": "module TopModule(\n    input logic clk,               // Clock signal\n    input logic reset,             // Active high synchronous reset\n    input logic data,              // Serial data input\n    output logic [3:0] count,      // 4-bit output indicating remaining time\n    output logic counting,         // Indicates active counting\n    output logic done,             // Indicates timer completion\n    input logic ack                // Acknowledge signal from the user\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        PATTERN_DETECT,\n        DELAY_CAPTURE,\n        COUNTING,\n        WAIT_ACK\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay;\n    logic [13:0] cycle_counter; // To count up to 16000 cycles (14 bits)\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            count <= 4'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n            cycle_counter <= 14'b0;\n            delay <= 4'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == COUNTING) begin\n                if (cycle_counter == 14'd999) begin\n                    cycle_counter <= 14'b0;\n                    if (count > 0) begin\n                        count <= count - 1;\n                    end\n                end else begin\n                    cycle_counter <= cycle_counter + 1;\n                end\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        counting = 1'b0;\n        done = 1'b0;\n        case (current_state)\n            IDLE: begin\n                if (data == 1'b1) begin\n                    next_state = PATTERN_DETECT;\n                end\n            end\n            PATTERN_DETECT: begin\n                if (data == 1'b1) begin\n                    next_state = DELAY_CAPTURE;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            DELAY_CAPTURE: begin\n                delay = {delay[2:0], data};\n                if (&delay) begin // After capturing 4 bits\n                    count = delay;\n                    next_state = COUNTING;\n                end\n            end\n            COUNTING: begin\n                counting = 1'b1;\n                if (count == 0 && cycle_counter == 14'd999) begin\n                    done = 1'b1;\n                    next_state = WAIT_ACK;\n                end\n            end\n            WAIT_ACK: begin\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}