{
    "code": "```verilog\nmodule TopModule (\n    input logic clk,\n    input logic rst_n,\n    input logic x,\n    input logic [2:0] y,\n    output logic Y0,\n    output logic z\n);\n\n    logic [2:0] next_state;\n\n    // Combinational logic for next state and output z\n    always @(*) begin\n        case (y)\n            3'b000: begin\n                next_state = (x == 1'b0) ? 3'b000 : 3'b001;\n                z = 1'b0;\n            end\n            3'b001: begin\n                next_state = (x == 1'b0) ? 3'b001 : 3'b100;\n                z = 1'b0;\n            end\n            3'b010: begin\n                next_state = (x == 1'b0) ? 3'b010 : 3'b001;\n                z = 1'b0;\n            end\n            3'b011: begin\n                next_state = (x == 1'b0) ? 3'b001 : 3'b010;\n                z = 1'b1;\n            end\n            3'b100: begin\n                next_state = (x == 1'b0) ? 3'b011 : 3'b100;\n                z = 1'b1;\n            end\n            default: begin\n                next_state = y;\n                z = 1'b0;\n            end\n        endcase\n    end\n\n    // Sequential logic for state transition\n    always_ff @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            next_state <= 3'b000;\n        else\n            y <= next_state;\n    end\n\n    // Output logic for Y0\n    assign Y0 = next_state[0];\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}