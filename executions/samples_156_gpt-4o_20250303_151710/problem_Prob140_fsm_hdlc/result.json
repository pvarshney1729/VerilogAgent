{
    "code": "module TopModule (\n    input  logic clk,       // Clock input, positive edge triggered\n    input  logic reset,     // Synchronous active-high reset\n    input  logic in,        // Input data stream\n    output logic disc,      // Output signal to indicate a bit to discard\n    output logic flag,      // Output signal to indicate a frame boundary\n    output logic err        // Output signal to indicate an error condition\n);\n\n    typedef enum logic [3:0] {\n        S_IDLE   = 4'd0,\n        S_ONE    = 4'd1,\n        S_TWO    = 4'd2,\n        S_THREE  = 4'd3,\n        S_FOUR   = 4'd4,\n        S_FIVE   = 4'd5,\n        S_SIX    = 4'd6,\n        S_FLAG   = 4'd7,\n        S_DISC   = 4'd8,\n        S_ERROR  = 4'd9\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= S_IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        // Default assignments\n        next_state = current_state;\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n\n        case (current_state)\n            S_IDLE: begin\n                if (in) next_state = S_ONE;\n            end\n            S_ONE: begin\n                if (in) next_state = S_TWO;\n                else next_state = S_IDLE;\n            end\n            S_TWO: begin\n                if (in) next_state = S_THREE;\n                else next_state = S_IDLE;\n            end\n            S_THREE: begin\n                if (in) next_state = S_FOUR;\n                else next_state = S_IDLE;\n            end\n            S_FOUR: begin\n                if (in) next_state = S_FIVE;\n                else next_state = S_IDLE;\n            end\n            S_FIVE: begin\n                if (in) next_state = S_SIX;\n                else next_state = S_DISC;\n            end\n            S_SIX: begin\n                if (in) next_state = S_ERROR;\n                else next_state = S_FLAG;\n            end\n            S_FLAG: begin\n                flag = 1'b1;\n                next_state = S_IDLE;\n            end\n            S_DISC: begin\n                disc = 1'b1;\n                next_state = S_IDLE;\n            end\n            S_ERROR: begin\n                err = 1'b1;\n                next_state = S_IDLE;\n            end\n            default: next_state = S_IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 170,
        "passfail": "R"
    }
}