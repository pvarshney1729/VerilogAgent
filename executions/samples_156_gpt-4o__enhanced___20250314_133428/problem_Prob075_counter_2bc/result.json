{
    "code": "```verilog\nmodule TopModule (\n    input logic clk,          // Clock input, positive edge-triggered\n    input logic areset,       // Asynchronous reset input, active high\n    input logic train_valid,  // Indicates valid training data\n    input logic train_taken,  // Indicates training data was taken\n    output logic [1:0] state  // 2-bit counter representing state\n);\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= 2'b01; // Reset to weakly not-taken\n        end else if (train_valid) begin\n            if (train_taken) begin\n                if (state < 2'b11) begin\n                    state <= state + 2'b01; // Increment, saturate at 3\n                end\n            end else begin\n                if (state > 2'b00) begin\n                    state <= state - 2'b01; // Decrement, saturate at 0\n                end\n            end\n        end\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}