{
    "code": "```verilog\nmodule TopModule (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    output logic walk_left,\n    output logic walk_right\n);\n\n    typedef enum logic [1:0] {\n        STATE_L = 2'b01,\n        STATE_R = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            STATE_L: begin\n                if (bump_left || bump_right)\n                    next_state = STATE_R;\n                else\n                    next_state = STATE_L;\n            end\n            STATE_R: begin\n                if (bump_right || bump_left)\n                    next_state = STATE_L;\n                else\n                    next_state = STATE_R;\n            end\n            default: next_state = STATE_L;\n        endcase\n    end\n\n    // State register with asynchronous reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= STATE_L;\n        else\n            current_state <= next_state;\n    end\n\n    // Output logic\n    always @(*) begin\n        case (current_state)\n            STATE_L: begin\n                walk_left = 1'b1;\n                walk_right = 1'b0;\n            end\n            STATE_R: begin\n                walk_left = 1'b0;\n                walk_right = 1'b1;\n            end\n            default: begin\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n            end\n        endcase\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}