{
    "code": "```verilog\nmodule TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        IDLE       = 3'b000,\n        START      = 3'b001,\n        DATA       = 3'b010,\n        STOP_CHECK = 3'b011,\n        ERROR      = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n    logic [7:0] data_reg;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 3'b000;\n            data_reg <= 8'b00000000;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DATA) begin\n                data_reg <= {in, data_reg[7:1]};\n                bit_count <= bit_count + 1;\n            end\n            if (current_state == STOP_CHECK && in == 1'b1) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = START;\n                end\n            end\n            START: begin\n                next_state = DATA;\n            end\n            DATA: begin\n                if (bit_count == 3'b111) begin\n                    next_state = STOP_CHECK;\n                end\n            end\n            STOP_CHECK: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = ERROR;\n                end\n            end\n            ERROR: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}