{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic data,\n    output logic start_shifting\n);\n\n    typedef enum logic [2:0] {\n        IDLE  = 3'b000,\n        S1    = 3'b001,\n        S2    = 3'b010,\n        S3    = 3'b011,\n        FOUND = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                if (data)\n                    next_state = S1;\n                else\n                    next_state = IDLE;\n            end\n            S1: begin\n                if (data)\n                    next_state = S2;\n                else\n                    next_state = IDLE;\n            end\n            S2: begin\n                if (!data)\n                    next_state = S3;\n                else\n                    next_state = S2;\n            end\n            S3: begin\n                if (data)\n                    next_state = FOUND;\n                else\n                    next_state = IDLE;\n            end\n            FOUND: begin\n                next_state = FOUND;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // State register logic\n    always_ff @(posedge clk) begin\n        if (reset)\n            current_state <= IDLE;\n        else\n            current_state <= next_state;\n    end\n\n    // Output logic\n    always_ff @(posedge clk) begin\n        if (reset)\n            start_shifting <= 1'b0;\n        else if (current_state == FOUND)\n            start_shifting <= 1'b1;\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 12,
        "passfail": "R"
    }
}