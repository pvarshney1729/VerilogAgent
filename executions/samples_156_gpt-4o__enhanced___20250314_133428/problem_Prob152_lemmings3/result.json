{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    typedef enum logic [1:0] {\n        STATE_WALK_LEFT = 2'b00,\n        STATE_WALK_RIGHT = 2'b01,\n        STATE_FALL = 2'b10,\n        STATE_DIG = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            STATE_WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = STATE_FALL;\n                end else if (dig) begin\n                    next_state = STATE_DIG;\n                end else if (bump_left || bump_right) begin\n                    next_state = STATE_WALK_RIGHT;\n                end else begin\n                    next_state = STATE_WALK_LEFT;\n                end\n            end\n            STATE_WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = STATE_FALL;\n                end else if (dig) begin\n                    next_state = STATE_DIG;\n                end else if (bump_right || bump_left) begin\n                    next_state = STATE_WALK_LEFT;\n                end else begin\n                    next_state = STATE_WALK_RIGHT;\n                end\n            end\n            STATE_FALL: begin\n                if (ground) begin\n                    next_state = (current_state == STATE_WALK_LEFT) ? STATE_WALK_LEFT : STATE_WALK_RIGHT;\n                end else begin\n                    next_state = STATE_FALL;\n                end\n            end\n            STATE_DIG: begin\n                if (!ground) begin\n                    next_state = STATE_FALL;\n                end else begin\n                    next_state = STATE_DIG;\n                end\n            end\n            default: begin\n                next_state = STATE_WALK_LEFT;\n            end\n        endcase\n    end\n\n    // State register\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= STATE_WALK_LEFT;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = (current_state == STATE_WALK_LEFT);\n        walk_right = (current_state == STATE_WALK_RIGHT);\n        aaah = (current_state == STATE_FALL);\n        digging = (current_state == STATE_DIG);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}