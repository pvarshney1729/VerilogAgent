{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic ack,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        PATTERN_DETECT,\n        LOAD_DELAY,\n        COUNTING,\n        WAIT_ACK\n    } state_t;\n\n    state_t state, next_state;\n    logic [3:0] delay;\n    logic [3:0] bit_count;\n    logic [9:0] cycle_count;\n    logic [3:0] shift_reg;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            state <= IDLE;\n            count <= 4'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n            delay <= 4'b0;\n            bit_count <= 4'b0;\n            cycle_count <= 10'b0;\n            shift_reg <= 4'b0;\n        end else begin\n            state <= next_state;\n            if (state == LOAD_DELAY) begin\n                shift_reg <= {shift_reg[2:0], data};\n            end\n            if (state == COUNTING) begin\n                if (cycle_count == 10'd999) begin\n                    cycle_count <= 10'b0;\n                    count <= count - 1;\n                end else begin\n                    cycle_count <= cycle_count + 1;\n                end\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = state;\n        counting = 1'b0;\n        done = 1'b0;\n        case (state)\n            IDLE: begin\n                if (data == 1'b1) begin\n                    shift_reg = {shift_reg[2:0], data};\n                    if (shift_reg == 4'b1101) begin\n                        next_state = LOAD_DELAY;\n                        bit_count = 4'b0;\n                    end\n                end\n            end\n            LOAD_DELAY: begin\n                if (bit_count < 4) begin\n                    bit_count = bit_count + 1;\n                end else begin\n                    delay = shift_reg;\n                    count = shift_reg;\n                    next_state = COUNTING;\n                end\n            end\n            COUNTING: begin\n                counting = 1'b1;\n                if (count == 4'b0 && cycle_count == 10'd999) begin\n                    next_state = WAIT_ACK;\n                end\n            end\n            WAIT_ACK: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}