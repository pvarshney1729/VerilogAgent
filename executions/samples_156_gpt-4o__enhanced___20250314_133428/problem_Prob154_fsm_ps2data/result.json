{
    "code": "module TopModule(\n    input logic clk,             // Clock input, positive edge triggered\n    input logic reset,           // Synchronous active high reset, 1-bit\n    input logic [7:0] in,        // 8-bit input byte stream\n    output logic [23:0] out_bytes, // 24-bit output representing three received message bytes\n    output logic done            // 1-bit output indicating message reception\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        IDLE  = 2'b00,\n        BYTE1 = 2'b01,\n        BYTE2 = 2'b10,\n        BYTE3 = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [23:0] message_buffer;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            message_buffer <= 24'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == BYTE1) begin\n                message_buffer[23:16] <= in;\n            end else if (current_state == BYTE2) begin\n                message_buffer[15:8] <= in;\n            end else if (current_state == BYTE3) begin\n                message_buffer[7:0] <= in;\n            end\n            done <= (current_state == BYTE3);\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                if (in[3] == 1'b1)\n                    next_state = BYTE1;\n                else\n                    next_state = IDLE;\n            end\n            BYTE1: next_state = BYTE2;\n            BYTE2: next_state = BYTE3;\n            BYTE3: next_state = IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        if (done) begin\n            out_bytes = message_buffer;\n        end else begin\n            out_bytes = 24'bx; // Don't care when done is not asserted\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 676,
        "passfail": "R"
    }
}