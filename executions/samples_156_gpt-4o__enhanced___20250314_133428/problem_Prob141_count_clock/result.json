{
    "code": "module TopModule (\n    input logic clk,          // Fast-running clock signal\n    input logic reset,        // Active high synchronous reset\n    input logic ena,          // Enable signal, pulses once per second\n    output logic pm,          // AM/PM indicator (0 for AM, 1 for PM)\n    output logic [7:0] hh,    // Hours in BCD, range 01-12\n    output logic [7:0] mm,    // Minutes in BCD, range 00-59\n    output logic [7:0] ss     // Seconds in BCD, range 00-59\n);\n\n    // Internal signals for BCD counting\n    logic [3:0] hh_units, hh_tens;\n    logic [3:0] mm_units, mm_tens;\n    logic [3:0] ss_units, ss_tens;\n\n    // Sequential logic for clock counting\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            // Reset to 12:00:00 AM\n            hh_units <= 4'd2;\n            hh_tens <= 4'd1;\n            mm_units <= 4'd0;\n            mm_tens <= 4'd0;\n            ss_units <= 4'd0;\n            ss_tens <= 4'd0;\n            pm <= 1'b0;\n        end else if (ena) begin\n            // Increment seconds\n            if (ss_units == 4'd9) begin\n                ss_units <= 4'd0;\n                if (ss_tens == 4'd5) begin\n                    ss_tens <= 4'd0;\n                    // Increment minutes\n                    if (mm_units == 4'd9) begin\n                        mm_units <= 4'd0;\n                        if (mm_tens == 4'd5) begin\n                            mm_tens <= 4'd0;\n                            // Increment hours\n                            if (hh_units == 4'd9 || (hh_tens == 4'd1 && hh_units == 4'd2)) begin\n                                hh_units <= 4'd1;\n                                hh_tens <= (hh_tens == 4'd1) ? 4'd0 : hh_tens;\n                                pm <= ~pm; // Toggle AM/PM\n                            end else begin\n                                hh_units <= hh_units + 4'd1;\n                            end\n                        end else begin\n                            mm_tens <= mm_tens + 4'd1;\n                        end\n                    end else begin\n                        mm_units <= mm_units + 4'd1;\n                    end\n                end else begin\n                    ss_tens <= ss_tens + 4'd1;\n                end\n            end else begin\n                ss_units <= ss_units + 4'd1;\n            end\n        end\n    end\n\n    // Assign BCD values to outputs\n    assign hh = {hh_tens, hh_units};\n    assign mm = {mm_tens, mm_units};\n    assign ss = {ss_tens, ss_units};\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}