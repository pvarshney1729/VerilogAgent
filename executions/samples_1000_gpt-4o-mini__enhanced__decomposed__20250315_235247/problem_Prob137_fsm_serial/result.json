{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic done\n);\n    typedef enum logic [1:0] {\n        IDLE,\n        START,\n        DATA,\n        STOP\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count; // To count the number of received data bits\n\n    // State register\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 3'b000;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        next_state = current_state; // Default to hold current state\n        done = 1'b0; // Default done signal\n\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) // Start bit detected\n                    next_state = START;\n            end\n            START: begin\n                next_state = DATA; // Move to data bits after start bit\n                bit_count = 3'b000; // Reset bit count\n            end\n            DATA: begin\n                if (bit_count < 3'b111) begin // If less than 8 bits received\n                    bit_count = bit_count + 1; // Increment bit count\n                    next_state = DATA; // Stay in DATA state\n                end else begin\n                    next_state = STOP; // Move to STOP state after 8 bits\n                end\n            end\n            STOP: begin\n                if (in == 1'b1) begin // Stop bit detected\n                    done = 1'b1; // Byte received successfully\n                end\n                next_state = IDLE; // Go back to IDLE state\n            end\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 57,
        "passfail": "R"
    }
}