{
    "code": "module TopModule(\n    input clk,\n    input in,\n    input reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n    typedef enum logic [1:0] {\n        IDLE,\n        START,\n        DATA,\n        STOP\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] bit_count;\n    logic [7:0] data_buffer;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_byte <= 8'b0;\n            done <= 1'b0;\n            bit_count <= 4'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always @(*) begin\n        next_state = current_state;\n        done = 1'b0; // Default done signal\n\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin // Start bit detected\n                    next_state = START;\n                end\n            end\n            START: begin\n                bit_count = 4'b0; // Reset bit count\n                next_state = DATA; // Move to data reception\n            end\n            DATA: begin\n                if (bit_count < 4'd8) begin\n                    data_buffer[bit_count] = in; // Capture data bit\n                    bit_count = bit_count + 1; // Increment bit count\n                end else begin\n                    next_state = STOP; // Move to stop bit check\n                end\n            end\n            STOP: begin\n                if (in == 1'b1) begin // Stop bit detected\n                    done = 1'b1; // Assert done\n                    out_byte = data_buffer; // Output the received byte\n                    next_state = IDLE; // Return to IDLE state\n                end else begin\n                    // Wait for a correct stop bit\n                    next_state = STOP; // Stay in STOP until valid stop bit\n                end\n            end\n            default: next_state = IDLE; // Default case\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 84,
        "passfail": "R"
    }
}