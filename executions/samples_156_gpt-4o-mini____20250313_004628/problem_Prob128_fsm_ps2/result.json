{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic [7:0] in,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        WAIT_FOR_FIRST_BYTE,\n        RECEIVE_BYTE_1,\n        RECEIVE_BYTE_2,\n        RECEIVE_BYTE_3\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [1:0] byte_count;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            byte_count <= 2'b00;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == RECEIVE_BYTE_3) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                if (in[3] == 1'b1) begin\n                    next_state = RECEIVE_BYTE_1;\n                    byte_count = 2'b01;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            RECEIVE_BYTE_1: begin\n                next_state = RECEIVE_BYTE_2;\n                byte_count = 2'b10;\n            end\n            RECEIVE_BYTE_2: begin\n                next_state = RECEIVE_BYTE_3;\n                byte_count = 2'b11;\n            end\n            RECEIVE_BYTE_3: begin\n                next_state = IDLE;\n                byte_count = 2'b00;\n            end\n            default: begin\n                next_state = IDLE;\n                byte_count = 2'b00;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    }
}