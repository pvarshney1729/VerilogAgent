{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic data,\n    input  logic done_counting,\n    input  logic ack,\n    output logic shift_ena,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        WAIT_PATTERN,\n        SHIFT,\n        COUNTING,\n        DONE\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] shift_counter;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            shift_counter <= 4'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == SHIFT) begin\n                shift_counter <= shift_counter + 1;\n            end else if (current_state == DONE && ack) begin\n                shift_counter <= 4'b0;\n            end\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                if (data == 1'b1) begin\n                    next_state = WAIT_PATTERN;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            WAIT_PATTERN: begin\n                if (data == 1'b1) begin\n                    next_state = WAIT_PATTERN;\n                end else if (data == 1'b0) begin\n                    next_state = IDLE;\n                end else if (data == 1'b1) begin\n                    next_state = SHIFT;\n                end\n            end\n            SHIFT: begin\n                if (shift_counter < 4'b0011) begin\n                    next_state = SHIFT;\n                end else begin\n                    next_state = COUNTING;\n                end\n            end\n            COUNTING: begin\n                if (done_counting) begin\n                    next_state = DONE;\n                end else begin\n                    next_state = COUNTING;\n                end\n            end\n            DONE: begin\n                if (ack) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = DONE;\n                end\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    assign shift_ena = (current_state == SHIFT);\n    assign counting = (current_state == COUNTING);\n    assign done = (current_state == DONE);\n\nendmodule",
    "test_results": {
        "num_mismatch": 4152,
        "passfail": "R"
    }
}