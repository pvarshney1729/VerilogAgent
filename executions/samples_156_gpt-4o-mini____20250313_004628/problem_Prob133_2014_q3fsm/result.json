{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic s,\n    input  logic w,\n    output logic z\n);\n\n    typedef enum logic [1:0] {\n        A = 2'b00,\n        B = 2'b01\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] w_count;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= A;\n            w_count <= 3'b000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == B) begin\n                w_count <= {w_count[1:0], w}; // Shift in the new w value\n            end\n        end\n    end\n\n    always @(*) begin\n        case (current_state)\n            A: begin\n                if (s) begin\n                    next_state = B;\n                end else begin\n                    next_state = A;\n                end\n            end\n            B: begin\n                if (w_count == 3'b010 || w_count == 3'b001 || w_count == 3'b100) begin\n                    z = 1'b1; // Exactly two 1's detected\n                end else begin\n                    z = 1'b0; // Otherwise\n                end\n                next_state = B; // Stay in state B\n            end\n            default: begin\n                next_state = A;\n            end\n        endcase\n    end\n\n    assign z = (current_state == B) ? (w_count == 3'b010 || w_count == 3'b001 || w_count == 3'b100) : 1'b0;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    }
}