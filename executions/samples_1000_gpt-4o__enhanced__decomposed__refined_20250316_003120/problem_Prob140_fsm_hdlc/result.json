{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        S1   = 3'b001,\n        S2   = 3'b010,\n        S3   = 3'b011,\n        S4   = 3'b100,\n        S5   = 3'b101,\n        S6   = 3'b110,\n        ERROR = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always @(*) begin\n        // Default outputs\n        disc = 1'b0;\n        flag = 1'b0;\n        err  = 1'b0;\n        next_state = current_state;\n\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b1) begin\n                    next_state = S1;\n                end\n            end\n            S1: begin\n                if (in == 1'b1) begin\n                    next_state = S2;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            S2: begin\n                if (in == 1'b1) begin\n                    next_state = S3;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            S3: begin\n                if (in == 1'b1) begin\n                    next_state = S4;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            S4: begin\n                if (in == 1'b1) begin\n                    next_state = S5;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            S5: begin\n                if (in == 1'b1) begin\n                    next_state = S6;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            S6: begin\n                if (in == 1'b0) begin\n                    disc = 1'b1;\n                    next_state = S1;\n                end else if (in == 1'b1) begin\n                    next_state = ERROR;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            ERROR: begin\n                err = 1'b1;\n                if (in == 1'b0) begin\n                    next_state = S1;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 39,
        "passfail": "R"
    }
}