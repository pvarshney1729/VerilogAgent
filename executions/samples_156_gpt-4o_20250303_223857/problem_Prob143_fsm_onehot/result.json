{
    "code": "module TopModule (\n    input logic clk,               // Clock signal for synchronous operation\n    input logic rst_n,             // Active-low asynchronous reset signal\n    input logic in,                // 1-bit input signal, active high\n    input logic [9:0] state,       // 10-bit one-hot encoded current state\n    output logic [9:0] next_state, // 10-bit one-hot encoded next state\n    output logic out1,             // 1-bit output signal for state machine\n    output logic out2              // 1-bit output signal for state machine\n);\n\n    // State transition logic\n    always_ff @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n            next_state <= 10'b0000000001; // Initialize to state S0\n        end else begin\n            case (state)\n                10'b0000000001: next_state <= in ? 10'b0000000010 : 10'b0000000001; // S0\n                10'b0000000010: next_state <= in ? 10'b0000000100 : 10'b0000000010; // S1\n                10'b0000000100: next_state <= in ? 10'b0000001000 : 10'b0000000100; // S2\n                10'b0000001000: next_state <= in ? 10'b0000010000 : 10'b0000001000; // S3\n                10'b0000010000: next_state <= in ? 10'b0000100000 : 10'b0000010000; // S4\n                10'b0000100000: next_state <= in ? 10'b0001000000 : 10'b0000100000; // S5\n                10'b0001000000: next_state <= in ? 10'b0010000000 : 10'b0001000000; // S6\n                10'b0010000000: next_state <= in ? 10'b0100000000 : 10'b0010000000; // S7\n                10'b0100000000: next_state <= in ? 10'b1000000000 : 10'b0100000000; // S8\n                10'b1000000000: next_state <= in ? 10'b0000000001 : 10'b1000000000; // S9\n                default: next_state <= 10'b0000000001; // Undefined state, reset to S0\n            endcase\n        end\n    end\n\n    // Output logic\n    always_comb begin\n        out1 = (state == 10'b0100000000) || (state == 10'b1000000000); // S8, S9\n        out2 = (state == 10'b0010000000) || (state == 10'b1000000000); // S7, S9\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 224,
        "passfail": "R"
    }
}