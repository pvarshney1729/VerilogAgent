{
    "code": "module TopModule (\n    input logic clk,          // Clock signal, triggers on the positive edge\n    input logic reset,        // Active-high synchronous reset\n    input logic in,           // Serial input bit stream\n    output logic done         // Output high when a byte is correctly received\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        START_BIT = 3'b001,\n        RECEIVE_BITS = 3'b010,\n        CHECK_STOP_BIT = 3'b011,\n        ERROR = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] data_shift_reg;\n    logic [3:0] bit_counter;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            data_shift_reg <= 8'b0;\n            bit_counter <= 4'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == RECEIVE_BITS) begin\n                data_shift_reg <= {in, data_shift_reg[7:1]};\n                bit_counter <= bit_counter + 1;\n            end\n            if (current_state == CHECK_STOP_BIT && in == 1'b1) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = START_BIT;\n                end\n            end\n            START_BIT: begin\n                next_state = RECEIVE_BITS;\n            end\n            RECEIVE_BITS: begin\n                if (bit_counter == 4'd8) begin\n                    next_state = CHECK_STOP_BIT;\n                end\n            end\n            CHECK_STOP_BIT: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = ERROR;\n                end\n            end\n            ERROR: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 60,
        "passfail": "R"
    }
}