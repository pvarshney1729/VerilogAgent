{
    "code": "module TopModule (\n    input logic clk,                   // Clock signal\n    input logic areset,                // Asynchronous active-high reset\n    input logic predict_valid,         // Prediction request valid\n    input logic [6:0] predict_pc,      // 7-bit program counter for prediction\n    output logic predict_taken,        // 1-bit prediction result\n    output logic [6:0] predict_history, // 7-bit predicted global history\n    input logic train_valid,           // Training request valid\n    input logic train_taken,           // Actual outcome of the branch\n    input logic train_mispredicted,    // Flag indicating misprediction\n    input logic [6:0] train_history,   // 7-bit history for training\n    input logic [6:0] train_pc         // 7-bit program counter for training\n);\n\n    // Pattern History Table (PHT) with 128 entries of 2-bit counters\n    logic [1:0] PHT [0:127];\n\n    // Internal signals\n    logic [6:0] predict_index;\n    logic [6:0] train_index;\n    logic [1:0] predict_counter;\n    logic [1:0] train_counter;\n\n    // Asynchronous reset and initialization\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            predict_history <= 7'b0;\n            for (int i = 0; i < 128; i++) begin\n                PHT[i] <= 2'b01; // Weakly not-taken\n            end\n        end else begin\n            if (train_valid) begin\n                // Training logic\n                train_index = train_pc ^ train_history;\n                train_counter = PHT[train_index];\n                if (train_taken) begin\n                    if (train_counter != 2'b11) begin\n                        PHT[train_index] <= train_counter + 1;\n                    end\n                end else begin\n                    if (train_counter != 2'b00) begin\n                        PHT[train_index] <= train_counter - 1;\n                    end\n                end\n                if (train_mispredicted) begin\n                    predict_history <= train_history;\n                end\n            end else if (predict_valid) begin\n                // Prediction logic\n                predict_index = predict_pc ^ predict_history;\n                predict_counter = PHT[predict_index];\n                predict_taken = predict_counter[1];\n                predict_history <= {predict_history[5:0], predict_taken};\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 547,
        "passfail": "R"
    }
}