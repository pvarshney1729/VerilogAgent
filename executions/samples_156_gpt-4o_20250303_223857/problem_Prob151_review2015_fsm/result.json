{
    "code": "module TopModule (\n    input  logic clk,            // Clock signal, positive edge-triggered\n    input  logic reset,          // Active high synchronous reset\n    input  logic data,           // Serial data input, one bit\n    input  logic done_counting,  // Signal indicating completion of counting\n    input  logic ack,            // Acknowledge signal from user\n    output logic shift_ena,      // Enable signal for shifting operation\n    output logic counting,       // Signal indicating counting is in progress\n    output logic done            // Signal indicating timer completion\n);\n\n    typedef enum logic [1:0] {\n        IDLE  = 2'b00,\n        SHIFT = 2'b01,\n        COUNT = 2'b10,\n        DONE  = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] pattern_shift_reg;\n    logic [1:0] shift_counter;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            pattern_shift_reg <= 4'b0000;\n            shift_counter <= 2'b00;\n        end else begin\n            current_state <= next_state;\n            if (current_state == SHIFT) begin\n                shift_counter <= shift_counter + 1;\n            end else begin\n                shift_counter <= 2'b00;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        shift_ena = 1'b0;\n        counting = 1'b0;\n        done = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                pattern_shift_reg = {pattern_shift_reg[2:0], data};\n                if (pattern_shift_reg == 4'b1101) begin\n                    next_state = SHIFT;\n                end\n            end\n            SHIFT: begin\n                shift_ena = 1'b1;\n                if (shift_counter == 2'b11) begin\n                    next_state = COUNT;\n                end\n            end\n            COUNT: begin\n                counting = 1'b1;\n                if (done_counting) begin\n                    next_state = DONE;\n                end\n            end\n            DONE: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 1536,
        "passfail": "R"
    }
}