{
    "code": "module TopModule (\n    input logic clk,\n    input logic load,\n    input logic ena,\n    input logic [1:0] amount,\n    input logic [63:0] data,\n    output logic [63:0] q\n);\n\n    always_ff @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else if (ena) begin\n            case (amount)\n                2'b00: q <= {q[62:0], 1'b0}; // Shift left by 1 bit, fill LSB with 0\n                2'b01: q <= {q[55:0], 8'b0}; // Shift left by 8 bits, fill lower 8 bits with 0\n                2'b10: q <= {q[63], q[63:1]}; // Shift right by 1 bit, retain MSB for sign\n                2'b11: q <= {{8{q[63]}}, q[63:8]}; // Shift right by 8 bits, sign extend\n                default: q <= q; // Default case to handle unexpected values\n            endcase\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}