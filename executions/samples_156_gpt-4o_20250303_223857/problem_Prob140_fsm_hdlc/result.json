{
    "code": "module TopModule(\n    input logic clk,         // Clock input\n    input logic reset,       // Synchronous active-high reset\n    input logic in,          // Data stream input\n    output logic disc,       // Signal for discarding a bit\n    output logic flag,       // Signal for frame boundary\n    output logic err         // Signal for error condition\n);\n\n    typedef enum logic [3:0] {\n        IDLE = 4'b0000,\n        S1   = 4'b0001,\n        S2   = 4'b0010,\n        S3   = 4'b0011,\n        S4   = 4'b0100,\n        S5   = 4'b0101,\n        S6   = 4'b0110,\n        DISC = 4'b0111,\n        FLAG = 4'b1000,\n        ERR  = 4'b1001\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] one_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            one_count <= 3'b000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == S5 && in == 1'b1) begin\n                one_count <= one_count + 1;\n            end else if (in == 1'b0) begin\n                one_count <= 3'b000;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) next_state = S1;\n            end\n            S1: begin\n                if (in == 1'b1) next_state = S2;\n                else next_state = S1;\n            end\n            S2: begin\n                if (in == 1'b1) next_state = S3;\n                else next_state = S1;\n            end\n            S3: begin\n                if (in == 1'b1) next_state = S4;\n                else next_state = S1;\n            end\n            S4: begin\n                if (in == 1'b1) next_state = S5;\n                else next_state = S1;\n            end\n            S5: begin\n                if (in == 1'b1) begin\n                    if (one_count == 3'b110) next_state = ERR;\n                    else next_state = S6;\n                end else next_state = DISC;\n            end\n            S6: begin\n                if (in == 1'b0) next_state = FLAG;\n                else next_state = ERR;\n            end\n            DISC: begin\n                disc = 1'b1;\n                next_state = IDLE;\n            end\n            FLAG: begin\n                flag = 1'b1;\n                next_state = IDLE;\n            end\n            ERR: begin\n                err = 1'b1;\n                if (in == 1'b0) next_state = IDLE;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 144,
        "passfail": "R"
    }
}