{
    "code": "```verilog\nmodule TopModule (\n    input logic clk,               // Clock signal, positive edge triggered\n    input logic reset,             // Synchronous active-high reset\n    input logic [7:0] in,          // 8-bit input stream\n    output logic [23:0] out_bytes, // 24-bit output message\n    output logic done              // 1-bit done signal, active high\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        BYTE1_RECEIVED = 2'b01,\n        BYTE2_RECEIVED = 2'b10,\n        BYTE3_RECEIVED = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [23:0] message_buffer;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_bytes <= 24'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == BYTE3_RECEIVED) begin\n                out_bytes <= message_buffer;\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in[3] == 1'b1) begin\n                    next_state = BYTE1_RECEIVED;\n                end\n            end\n            BYTE1_RECEIVED: begin\n                next_state = BYTE2_RECEIVED;\n            end\n            BYTE2_RECEIVED: begin\n                next_state = BYTE3_RECEIVED;\n            end\n            BYTE3_RECEIVED: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Message buffer logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            message_buffer <= 24'b0;\n        end else begin\n            case (current_state)\n                BYTE1_RECEIVED: begin\n                    message_buffer[23:16] <= in;\n                end\n                BYTE2_RECEIVED: begin\n                    message_buffer[15:8] <= in;\n                end\n                BYTE3_RECEIVED: begin\n                    message_buffer[7:0] <= in;\n                end\n            endcase\n        end\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}