{
    "code": "module TopModule (\n    input  logic clk,    // Clock signal, assumed positive edge-triggered\n    input  logic reset,  // Synchronous active-high reset\n    input  logic in,     // Single-bit input\n    output logic out     // Single-bit output, registered\n);\n\n    // Define state encoding\n    localparam logic STATE_B = 1'b0, STATE_A = 1'b1;\n\n    // State register\n    logic current_state, next_state;\n\n    // Sequential logic for state transitions\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= STATE_B; // Reset state\n        end else begin\n            current_state <= next_state; // Transition to next state\n        end\n    end\n\n    // Combinational logic for state transitions and output\n    always @(*) begin\n        case (current_state)\n            STATE_B: begin\n                out = 1'b1;\n                next_state = (in == 1'b0) ? STATE_A : STATE_B;\n            end\n            STATE_A: begin\n                out = 1'b0;\n                next_state = (in == 1'b0) ? STATE_B : STATE_A;\n            end\n            default: begin\n                out = 1'b1;           // Default to STATE_B output\n                next_state = STATE_B; // Default to STATE_B\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}