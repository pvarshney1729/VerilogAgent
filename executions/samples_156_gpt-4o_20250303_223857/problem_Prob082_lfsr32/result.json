{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    output logic [31:0] q\n);\n\n    logic [31:0] lfsr_reg, lfsr_next;\n\n    // Sequential logic for LFSR with synchronous reset\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            lfsr_reg <= 32'h1;\n        end else begin\n            lfsr_reg <= lfsr_next;\n        end\n    end\n\n    // Combinational logic to calculate next state of LFSR\n    always_comb begin\n        lfsr_next = {lfsr_reg[30:0], lfsr_reg[31] ^ lfsr_reg[0]};\n        lfsr_next[21] = lfsr_next[21] ^ lfsr_reg[0];\n        lfsr_next[1] = lfsr_next[1] ^ lfsr_reg[0];\n        lfsr_next[0] = lfsr_next[0] ^ lfsr_reg[0];\n    end\n\n    // Assign the current state to output\n    assign q = lfsr_reg;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}