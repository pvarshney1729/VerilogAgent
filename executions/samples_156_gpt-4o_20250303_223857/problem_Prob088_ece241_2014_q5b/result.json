{
    "code": "module TopModule (\n  input wire clk,\n  input wire areset,\n  input wire x,\n  output reg z\n);\n\n  typedef enum reg [1:0] {\n    STATE_A = 2'b01,\n    STATE_B = 2'b10\n  } state_t;\n\n  state_t state, next_state;\n\n  // State transition logic\n  always @(*) begin\n    case (state)\n      STATE_A: begin\n        if (x) begin\n          next_state = STATE_B;\n          z = 1'b1;\n        end else begin\n          next_state = STATE_A;\n          z = 1'b0;\n        end\n      end\n      STATE_B: begin\n        if (x) begin\n          next_state = STATE_B;\n          z = 1'b0;\n        end else begin\n          next_state = STATE_B;\n          z = 1'b1;\n        end\n      end\n      default: begin\n        next_state = STATE_A;\n        z = 1'b0;\n      end\n    endcase\n  end\n\n  // State register update\n  always @(posedge clk or posedge areset) begin\n    if (areset) begin\n      state <= STATE_A;\n      z <= 1'b0;\n    end else begin\n      state <= next_state;\n    end\n  end\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}