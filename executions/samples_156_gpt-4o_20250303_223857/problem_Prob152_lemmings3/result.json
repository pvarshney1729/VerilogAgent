{
    "code": "module TopModule (\n    input logic clk,          // Clock signal, positive edge-triggered\n    input logic areset,       // Asynchronous reset, active-high\n    input logic bump_left,    // Left side bump indicator\n    input logic bump_right,   // Right side bump indicator\n    input logic ground,       // Ground presence indicator\n    input logic dig,          // Dig command\n    output logic walk_left,   // Lemming walking left indicator\n    output logic walk_right,  // Lemming walking right indicator\n    output logic aaah,        // Lemming falling indicator\n    output logic digging      // Lemming digging indicator\n);\n\n    typedef enum logic [1:0] {\n        WALK_LEFT = 2'b00,\n        WALK_RIGHT = 2'b01,\n        FALLING = 2'b10,\n        DIGGING = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic last_walk_direction; // 0 for left, 1 for right\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= WALK_LEFT;\n            last_walk_direction <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == WALK_LEFT || current_state == WALK_RIGHT) begin\n                last_walk_direction <= (current_state == WALK_RIGHT);\n            end\n        end\n    end\n\n    always_comb begin\n        // Default output values\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (current_state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                end else if (dig) begin\n                    next_state = DIGGING;\n                end else if (bump_left) begin\n                    next_state = WALK_RIGHT;\n                end else begin\n                    next_state = WALK_LEFT;\n                end\n            end\n            WALK_RIGHT: begin\n                walk_right = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                end else if (dig) begin\n                    next_state = DIGGING;\n                end else if (bump_right) begin\n                    next_state = WALK_LEFT;\n                end else begin\n                    next_state = WALK_RIGHT;\n                end\n            end\n            FALLING: begin\n                aaah = 1'b1;\n                if (ground) begin\n                    next_state = last_walk_direction ? WALK_RIGHT : WALK_LEFT;\n                end else begin\n                    next_state = FALLING;\n                end\n            end\n            DIGGING: begin\n                digging = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                end else begin\n                    next_state = DIGGING;\n                end\n            end\n            default: begin\n                next_state = WALK_LEFT;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}