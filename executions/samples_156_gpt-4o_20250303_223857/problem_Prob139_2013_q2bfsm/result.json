{
    "code": "module TopModule(\n  input logic clk,        // Clock input, positive edge triggered\n  input logic resetn,     // Synchronous active-low reset\n  input logic x,          // 1-bit input from motor\n  input logic y,          // 1-bit input from motor\n  output logic f,         // 1-bit output controlling motor\n  output logic g          // 1-bit output controlling motor\n);\n\n  typedef enum logic [1:0] {\n    STATE_A = 2'b00,\n    STATE_MONITOR = 2'b01,\n    STATE_SEQUENCE_DETECTED = 2'b10,\n    STATE_G_PERMANENT = 2'b11\n  } state_t;\n\n  state_t current_state, next_state;\n  logic [1:0] sequence_counter;\n  logic y_counter;\n\n  always_ff @(posedge clk) begin\n    if (!resetn) begin\n      current_state <= STATE_A;\n      f <= 1'b0;\n      g <= 1'b0;\n      sequence_counter <= 2'b00;\n      y_counter <= 1'b0;\n    end else begin\n      current_state <= next_state;\n      if (current_state == STATE_A) begin\n        f <= 1'b1;\n      end else begin\n        f <= 1'b0;\n      end\n    end\n  end\n\n  always_ff @(posedge clk) begin\n    if (current_state == STATE_SEQUENCE_DETECTED) begin\n      g <= 1'b1;\n    end else if (current_state == STATE_G_PERMANENT) begin\n      g <= 1'b1;\n    end else begin\n      g <= 1'b0;\n    end\n  end\n\n  always_comb begin\n    next_state = current_state;\n    case (current_state)\n      STATE_A: begin\n        if (resetn) begin\n          next_state = STATE_MONITOR;\n        end\n      end\n      STATE_MONITOR: begin\n        if (x == 1'b1 && sequence_counter == 2'b00) begin\n          sequence_counter = 2'b01;\n        end else if (x == 1'b0 && sequence_counter == 2'b01) begin\n          sequence_counter = 2'b10;\n        end else if (x == 1'b1 && sequence_counter == 2'b10) begin\n          next_state = STATE_SEQUENCE_DETECTED;\n          sequence_counter = 2'b00;\n        end else begin\n          sequence_counter = 2'b00;\n        end\n      end\n      STATE_SEQUENCE_DETECTED: begin\n        if (y == 1'b1) begin\n          next_state = STATE_G_PERMANENT;\n        end else if (y_counter == 1'b1) begin\n          next_state = STATE_MONITOR;\n        end else begin\n          y_counter = 1'b1;\n        end\n      end\n      STATE_G_PERMANENT: begin\n        // Remain in this state\n      end\n    endcase\n  end\n\nendmodule",
    "test_results": {
        "num_mismatch": 356,
        "passfail": "R"
    }
}