{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic predict_valid,\n    input logic [6:0] predict_pc,\n    output logic predict_taken,\n    output logic [6:0] predict_history,\n    input logic train_valid,\n    input logic train_taken,\n    input logic train_mispredicted,\n    input logic [6:0] train_history,\n    input logic [6:0] train_pc\n);\n\n    logic [1:0] PHT [127:0]; // Pattern History Table\n    logic [6:0] global_history; // Global History Register\n    logic [6:0] index; // Index for PHT\n    logic [1:0] counter_state; // Current state of the counter\n    logic [1:0] next_counter_state; // Next state of the counter\n\n    // Calculate index for PHT\n    assign index = (predict_pc ^ global_history) [6:0];\n\n    // Prediction logic\n    always @(*) begin\n        if (predict_valid) begin\n            counter_state = PHT[index];\n            predict_taken = (counter_state[1] == 1'b1);\n            predict_history = global_history;\n        end else begin\n            predict_taken = 1'b0;\n            predict_history = 7'b0;\n        end\n    end\n\n    // Update logic for PHT and global history\n    always @(posedge clk) begin\n        if (areset) begin\n            global_history <= 7'b0;\n            for (int i = 0; i < 128; i++) begin\n                PHT[i] <= 2'b00;\n            end\n        end else begin\n            if (train_valid) begin\n                if (train_mispredicted) begin\n                    global_history <= train_history; // Recover history on misprediction\n                end else begin\n                    global_history <= {global_history[5:0], train_taken}; // Update history\n                end\n\n                // Update PHT based on training outcome\n                case (PHT[train_pc ^ global_history])\n                    2'b00: PHT[train_pc ^ global_history] <= train_taken ? 2'b01 : 2'b00;\n                    2'b01: PHT[train_pc ^ global_history] <= train_taken ? 2'b10 : 2'b00;\n                    2'b10: PHT[train_pc ^ global_history] <= train_taken ? 2'b11 : 2'b01;\n                    2'b11: PHT[train_pc ^ global_history] <= train_taken ? 2'b11 : 2'b10;\n                endcase\n            end else if (predict_valid) begin\n                // Update global history with the predicted outcome\n                global_history <= {global_history[5:0], predict_taken};\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}