{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic load,\n    input  logic [255:0] data,\n    output logic [255:0] q\n);\n\n    logic [255:0] current_state;\n    logic [255:0] next_state;\n\n    always @(posedge clk) begin\n        if (load) begin\n            current_state <= data;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always @(*) begin\n        next_state = current_state; // Default to current state\n\n        for (int i = 0; i < 256; i++) begin\n            int alive_count = 0;\n\n            // Calculate the number of alive neighbors\n            for (int dx = -1; dx <= 1; dx++) begin\n                for (int dy = -1; dy <= 1; dy++) begin\n                    if (dx == 0 && dy == 0) continue; // Skip the cell itself\n                    int neighbor_x = (i % 16 + dx + 16) % 16;\n                    int neighbor_y = (i / 16 + dy + 16) % 16;\n                    int neighbor_index = neighbor_y * 16 + neighbor_x;\n                    alive_count += current_state[neighbor_index];\n                end\n            end\n\n            // Update the next state based on the rules\n            if (current_state[i] == 1'b1) begin\n                if (alive_count < 2 || alive_count > 3) begin\n                    next_state[i] = 1'b0; // Cell dies\n                end\n            end else begin\n                if (alive_count == 3) begin\n                    next_state[i] = 1'b1; // Cell becomes alive\n                end\n            end\n        end\n    end\n\n    assign q = current_state;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}