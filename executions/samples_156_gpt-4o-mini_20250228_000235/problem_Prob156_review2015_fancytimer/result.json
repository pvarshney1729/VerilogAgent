{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic data,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done,\n    input logic ack\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        DETECT,\n        SHIFT,\n        COUNT,\n        DONE\n    } state_t;\n\n    state_t state, next_state;\n    logic [3:0] delay;\n    logic [9:0] counter; // 1000 cycles max\n    logic [3:0] remaining_time;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            state <= IDLE;\n            counter <= 10'b0;\n            delay <= 4'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            state <= next_state;\n            if (state == COUNT) begin\n                if (counter < (delay + 4'b1) * 10'd100) begin\n                    counter <= counter + 10'b1;\n                end else begin\n                    counter <= 10'b0;\n                end\n            end\n        end\n    end\n\n    always @(*) begin\n        next_state = state;\n        counting = 1'b0;\n        done = 1'b0;\n        count = 4'b0;\n        remaining_time = delay;\n\n        case (state)\n            IDLE: begin\n                if (data == 1'b1) begin\n                    next_state = DETECT;\n                end\n            end\n            DETECT: begin\n                if (data == 1'b1) begin\n                    next_state = SHIFT;\n                end\n            end\n            SHIFT: begin\n                delay = {delay[2:0], data};\n                if (delay[3] == 1'b1) begin\n                    next_state = COUNT;\n                    counting = 1'b1;\n                end\n            end\n            COUNT: begin\n                counting = 1'b1;\n                if (counter == (delay + 4'b1) * 10'd100) begin\n                    next_state = DONE;\n                end\n                count = remaining_time;\n                if (counter % 10'd100 == 0 && remaining_time > 4'b0) begin\n                    remaining_time = remaining_time - 4'b1;\n                end\n            end\n            DONE: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = IDLE;\n                    delay = 4'b0;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}