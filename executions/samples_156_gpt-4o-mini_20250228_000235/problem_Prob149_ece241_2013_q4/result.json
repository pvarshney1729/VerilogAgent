{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic [2:0] s,\n    output logic fr2,\n    output logic fr1,\n    output logic fr0,\n    output logic dfr\n);\n\n    typedef enum logic [1:0] {\n        LOW = 2'b00,\n        MID = 2'b01,\n        HIGH = 2'b10,\n        ABOVE = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= LOW;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always @(*) begin\n        case (current_state)\n            LOW: begin\n                if (s[0]) begin\n                    next_state = MID;\n                end else if (s[1]) begin\n                    next_state = HIGH;\n                end else if (s[2]) begin\n                    next_state = ABOVE;\n                end else begin\n                    next_state = LOW;\n                end\n            end\n            MID: begin\n                if (s[0]) begin\n                    next_state = LOW;\n                end else if (s[1]) begin\n                    next_state = HIGH;\n                end else if (s[2]) begin\n                    next_state = ABOVE;\n                end else begin\n                    next_state = MID;\n                end\n            end\n            HIGH: begin\n                if (s[0]) begin\n                    next_state = LOW;\n                end else if (s[1]) begin\n                    next_state = MID;\n                end else if (s[2]) begin\n                    next_state = ABOVE;\n                end else begin\n                    next_state = HIGH;\n                end\n            end\n            ABOVE: begin\n                next_state = ABOVE;\n            end\n            default: next_state = LOW;\n        endcase\n    end\n\n    always @(*) begin\n        fr2 = 1'b0;\n        fr1 = 1'b0;\n        fr0 = 1'b0;\n        dfr = 1'b0;\n\n        case (current_state)\n            LOW: begin\n                fr2 = 1'b1;\n                fr1 = 1'b1;\n                fr0 = 1'b1;\n            end\n            MID: begin\n                fr0 = 1'b1;\n                fr1 = 1'b1;\n            end\n            HIGH: begin\n                fr0 = 1'b1;\n            end\n            ABOVE: begin\n                // No flow rates asserted\n            end\n        endcase\n\n        // Control dfr based on state transition\n        if (current_state == LOW && next_state == MID) begin\n            dfr = 1'b1; // Open supplemental flow valve\n        end else if (current_state == MID && next_state == HIGH) begin\n            dfr = 1'b1; // Open supplemental flow valve\n        end else begin\n            dfr = 1'b0; // Close supplemental flow valve\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 1757,
        "passfail": "R"
    }
}