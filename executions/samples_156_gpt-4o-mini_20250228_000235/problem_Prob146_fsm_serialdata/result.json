{
    "code": "module TopModule (\n    input logic clk,\n    input logic in,\n    input logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        START,\n        DATA,\n        STOP\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] data_buffer;\n    logic [2:0] bit_count;\n\n    // State transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 3'b000;\n            data_buffer <= 8'b00000000;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        next_state = current_state;\n        done = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin // Start bit detected\n                    next_state = START;\n                end\n            end\n\n            START: begin\n                next_state = DATA;\n                bit_count = 3'b000; // Reset bit count\n            end\n\n            DATA: begin\n                if (bit_count < 3'b111) begin\n                    data_buffer[bit_count] = in; // Capture data bit\n                    bit_count = bit_count + 1;\n                end else begin\n                    next_state = STOP;\n                end\n            end\n\n            STOP: begin\n                if (in == 1'b1) begin // Stop bit detected\n                    done = 1'b1;\n                    out_byte = data_buffer; // Output the received byte\n                    next_state = IDLE; // Go back to IDLE\n                end else begin\n                    // Stay in STOP state until valid stop bit is detected\n                    next_state = STOP;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 94,
        "passfail": "R"
    }
}