{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic resetn,\n    input  logic [2:0] r,\n    output logic [2:0] g\n);\n\n    typedef enum logic [1:0] {\n        A = 2'b00,\n        B = 2'b01,\n        C = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State flip-flops\n    always_ff @(posedge clk) begin\n        if (!resetn) begin\n            current_state <= A;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            A: begin\n                if (r[0]) begin\n                    next_state = B;\n                end else if (r[1]) begin\n                    next_state = C;\n                end else begin\n                    next_state = A;\n                end\n            end\n            B: begin\n                if (r[0]) begin\n                    next_state = B;\n                end else begin\n                    next_state = A;\n                end\n            end\n            C: begin\n                if (r[1]) begin\n                    next_state = C;\n                end else begin\n                    next_state = A;\n                end\n            end\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        g = 3'b000; // Default output\n        case (current_state)\n            B: g[0] = 1'b1; // Grant to device 0\n            C: g[1] = 1'b1; // Grant to device 1\n            default: g = 3'b000; // No grants\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 128,
        "passfail": "R"
    }
}