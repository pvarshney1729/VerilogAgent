{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic [7:0] in,\n    output logic [23:0] out_bytes,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        WAIT_FOR_FIRST_BYTE,\n        RECEIVE_BYTES,\n        DONE_STATE\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [23:0] message_buffer;\n    logic [2:0] byte_count;\n\n    // State transition logic\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            byte_count <= 3'b000;\n            message_buffer <= 24'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                if (in[3] == 1'b1) begin\n                    next_state = RECEIVE_BYTES;\n                    byte_count = 3'b001;\n                    message_buffer[23:16] = in;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            RECEIVE_BYTES: begin\n                if (byte_count < 3) begin\n                    next_state = RECEIVE_BYTES;\n                    byte_count = byte_count + 1;\n                    message_buffer[(23 - (byte_count * 8)) -: 8] = in;\n                end else begin\n                    next_state = DONE_STATE;\n                end\n            end\n            DONE_STATE: begin\n                next_state = IDLE;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    always @(posedge clk) begin\n        if (reset) begin\n            out_bytes <= 24'b0;\n            done <= 1'b0;\n        end else begin\n            if (current_state == DONE_STATE) begin\n                out_bytes <= message_buffer;\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 736,
        "passfail": "R"
    }
}