{
    "code": "module TopModule (\n    input  logic       clk,        // Clock signal, positive edge-triggered\n    input  logic       in,         // Serial data input\n    input  logic       reset,      // Active-high synchronous reset\n    output logic [7:0] out_byte,   // 8-bit output data byte\n    output logic       done        // Done flag, indicates a valid byte has been received\n);\n\n    typedef enum logic [1:0] {\n        IDLE    = 2'b00,\n        RECEIVE = 2'b01,\n        VERIFY  = 2'b10,\n        DONE    = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] shift_reg;\n    logic [3:0] bit_count;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_byte <= 8'b0;\n            done <= 1'b0;\n            shift_reg <= 8'b0;\n            bit_count <= 4'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == RECEIVE) begin\n                shift_reg <= {in, shift_reg[7:1]};\n                bit_count <= bit_count + 1;\n            end\n            if (current_state == DONE) begin\n                out_byte <= shift_reg;\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) // Start bit detected\n                    next_state = RECEIVE;\n            end\n            RECEIVE: begin\n                if (bit_count == 4'd8)\n                    next_state = VERIFY;\n            end\n            VERIFY: begin\n                if (in == 1'b1) // Stop bit detected\n                    next_state = DONE;\n                else\n                    next_state = IDLE; // Error, go back to IDLE\n            end\n            DONE: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 50,
        "passfail": "R"
    },
    "iterations_used": 1
}