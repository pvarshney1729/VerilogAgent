{
    "code": "module TopModule (\n    input logic clk,\n    input logic load,\n    input logic [255:0] data,\n    output logic [255:0] q\n);\n\n    logic [255:0] next_q;\n\n    // Combinational logic to calculate next state\n    always @(*) begin\n        integer i, j;\n        for (i = 0; i < 16; i = i + 1) begin\n            for (j = 0; j < 16; j = j + 1) begin\n                integer count;\n                count = 0;\n\n                // Count neighbors with toroidal wrapping\n                count = q[((i-1+16)%16)*16 + ((j-1+16)%16)] + q[((i-1+16)%16)*16 + j] + q[((i-1+16)%16)*16 + ((j+1)%16)] +\n                        q[i*16 + ((j-1+16)%16)] + q[i*16 + ((j+1)%16)] +\n                        q[((i+1)%16)*16 + ((j-1+16)%16)] + q[((i+1)%16)*16 + j] + q[((i+1)%16)*16 + ((j+1)%16)];\n\n                // Game of Life rules\n                if (count == 3 || (count == 2 && q[i*16 + j]))\n                    next_q[i*16 + j] = 1;\n                else\n                    next_q[i*16 + j] = 0;\n            end\n        end\n    end\n\n    // Sequential logic to update state\n    always_ff @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= next_q;\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}