{
    "code": "module TopModule (\n    input logic clk,               // Clock signal, positive edge-triggered\n    input logic areset,            // Asynchronous reset, active high\n    input logic predict_valid,     // Signal indicating a prediction is valid\n    input logic predict_taken,     // Signal indicating the prediction outcome\n    input logic train_mispredicted,// Signal indicating a branch misprediction\n    input logic train_taken,       // Actual outcome of the branch\n    input logic [31:0] train_history, // History before the mispredicted branch\n    output logic [31:0] predict_history // Current global history shift register\n);\n\n    // Reset and update logic for predict_history\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            predict_history <= 32'b0; // Reset predict_history to all zeros\n        end else if (train_mispredicted) begin\n            predict_history <= {train_history[30:0], train_taken}; // Rollback on misprediction\n        end else if (predict_valid) begin\n            predict_history <= {predict_history[30:0], predict_taken}; // Update on valid prediction\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}