{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic predict_valid,\n    input logic [6:0] predict_pc,\n    output logic predict_taken,\n    output logic [6:0] predict_history,\n    input logic train_valid,\n    input logic train_taken,\n    input logic train_mispredicted,\n    input logic [6:0] train_history,\n    input logic [6:0] train_pc\n);\n\n    // Pattern History Table (PHT) with 128 entries of 2-bit saturating counters\n    logic [1:0] PHT [0:127];\n    logic [6:0] branch_history;\n\n    // Initialize PHT and branch history register\n    initial begin\n        branch_history = 7'b0000000;\n        for (int i = 0; i < 128; i++) begin\n            PHT[i] = 2'b01; // Weakly not-taken\n        end\n    end\n\n    // Asynchronous reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            branch_history <= 7'b0000000;\n            for (int i = 0; i < 128; i++) begin\n                PHT[i] <= 2'b01; // Weakly not-taken\n            end\n        end else begin\n            if (predict_valid) begin\n                // Update branch history register\n                branch_history <= {branch_history[5:0], predict_taken};\n            end\n            if (train_valid) begin\n                // Update PHT based on training\n                logic [6:0] train_index = train_pc ^ train_history;\n                if (train_taken) begin\n                    if (PHT[train_index] != 2'b11) begin\n                        PHT[train_index] <= PHT[train_index] + 1;\n                    end\n                end else begin\n                    if (PHT[train_index] != 2'b00) begin\n                        PHT[train_index] <= PHT[train_index] - 1;\n                    end\n                end\n            end\n        end\n    end\n\n    // Prediction logic\n    always_comb begin\n        logic [6:0] predict_index = predict_pc ^ branch_history;\n        predict_taken = (PHT[predict_index] >= 2'b10);\n        predict_history = branch_history;\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 610,
        "passfail": "R"
    },
    "iterations_used": 1
}