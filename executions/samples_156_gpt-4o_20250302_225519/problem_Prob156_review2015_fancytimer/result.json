{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic data,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done,\n    input logic ack\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        LOAD_DELAY = 2'b01,\n        COUNT = 2'b10,\n        DONE = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay;\n    logic [3:0] bit_counter;\n    logic [12:0] cycle_counter;\n    logic [3:0] shift_register;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            count <= 4'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n            delay <= 4'b0;\n            bit_counter <= 4'b0;\n            cycle_counter <= 13'b0;\n            shift_register <= 4'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == LOAD_DELAY) begin\n                shift_register <= {shift_register[2:0], data};\n            end\n            if (current_state == COUNT) begin\n                cycle_counter <= cycle_counter + 1;\n                if (cycle_counter == 13'd999) begin\n                    cycle_counter <= 13'b0;\n                    count <= count - 1;\n                end\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                counting = 1'b0;\n                done = 1'b0;\n                if (shift_register == 4'b1101) begin\n                    next_state = LOAD_DELAY;\n                    bit_counter = 4'b0;\n                end\n            end\n            LOAD_DELAY: begin\n                if (bit_counter < 4) begin\n                    bit_counter = bit_counter + 1;\n                end else begin\n                    delay = shift_register;\n                    count = shift_register;\n                    next_state = COUNT;\n                    counting = 1'b1;\n                end\n            end\n            COUNT: begin\n                if (count == 4'b0) begin\n                    next_state = DONE;\n                    counting = 1'b0;\n                    done = 1'b1;\n                end\n            end\n            DONE: begin\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    },
    "iterations_used": 2
}