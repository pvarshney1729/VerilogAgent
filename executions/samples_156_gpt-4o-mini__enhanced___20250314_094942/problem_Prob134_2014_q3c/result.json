{
    "code": "module TopModule (\n    input logic clk,          // Clock signal\n    input logic x,           // Input signal (1 bit)\n    input logic [2:0] y,     // Input signal (3 bits)\n    output logic Y0,         // Output signal (1 bit)\n    output logic z           // Output signal (1 bit)\n);\n\n// State Encoding\ntypedef enum logic [2:0] {\n    S0 = 3'b000,\n    S1 = 3'b001,\n    S2 = 3'b010,\n    S3 = 3'b011,\n    S4 = 3'b100\n} state_t;\n\nstate_t current_state, next_state;\n\n// Synchronous Reset Behavior\nalways_ff @(posedge clk) begin\n    current_state <= next_state; // Transition to the next state\nend\n\n// Next State Logic\nalways_comb begin\n    case (current_state)\n        S0: next_state = (x == 0) ? S0 : S1;\n        S1: next_state = (x == 0) ? S1 : S4;\n        S2: next_state = (x == 0) ? S2 : S1;\n        S3: next_state = (x == 0) ? S1 : S2;\n        S4: next_state = (x == 0) ? S3 : S4;\n        default: next_state = S0; // Handle invalid states\n    endcase\nend\n\n// Output Logic\nalways_comb begin\n    Y0 = next_state[0]; // Y0 is the least significant bit of the next state\n    case (current_state)\n        S0: z = 0;\n        S1: z = 0;\n        S2: z = 0;\n        S3: z = 1;\n        S4: z = 1;\n        default: z = 0; // Default output for invalid states\n    endcase\nend\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}