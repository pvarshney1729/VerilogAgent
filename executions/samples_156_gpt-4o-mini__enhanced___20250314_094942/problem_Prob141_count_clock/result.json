{
    "code": "module TopModule (\n    input logic clk,           // Clock signal (fast-running)\n    input logic reset,         // Active high synchronous reset\n    input logic ena,           // Enable signal for clock increments (active high)\n    output logic pm,           // PM indicator (1 for PM, 0 for AM)\n    output logic [7:0] hh,     // Hours in BCD format (01 to 12)\n    output logic [7:0] mm,     // Minutes in BCD format (00 to 59)\n    output logic [7:0] ss       // Seconds in BCD format (00 to 59)\n);\n\n    // Initial values\n    initial begin\n        hh = 8'b00001100; // 12\n        mm = 8'b00000000; // 00\n        ss = 8'b00000000; // 00\n        pm = 1'b0;        // AM\n    end\n\n    always @(posedge clk) begin\n        if (reset) begin\n            hh <= 8'b00001100; // Reset to 12\n            mm <= 8'b00000000; // Reset to 00\n            ss <= 8'b00000000; // Reset to 00\n            pm <= 1'b0;        // Reset to AM\n        end else if (ena) begin\n            // Increment seconds\n            if (ss == 8'b00111001) begin // 59\n                ss <= 8'b00000000; // Reset seconds to 00\n                // Increment minutes\n                if (mm == 8'b00111001) begin // 59\n                    mm <= 8'b00000000; // Reset minutes to 00\n                    // Increment hours\n                    if (hh == 8'b00001100) begin // 12\n                        hh <= 8'b00000001; // Reset hours to 01\n                        pm <= ~pm; // Toggle PM/AM\n                    end else begin\n                        hh <= hh + 1; // Increment hours\n                    end\n                end else begin\n                    mm <= mm + 1; // Increment minutes\n                end\n            end else begin\n                ss <= ss + 1; // Increment seconds\n            end\n        end\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}