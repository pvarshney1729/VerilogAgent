{
    "code": "module TopModule (\n    input logic clk,                      // Clock input (1 bit)\n    input logic reset,                    // Asynchronous active high reset (1 bit)\n    input logic [7:0] input_byte,        // Input byte (8 bits)\n    output logic [23:0] out_bytes,       // Output bytes (24 bits)\n    output logic done                     // Output signal indicating message received (1 bit)\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        RECEIVING\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] byte_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_bytes <= 24'b0;\n            done <= 1'b0;\n            byte_count <= 8'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == RECEIVING) begin\n                if (byte_count < 3) begin\n                    out_bytes[(byte_count * 8) +: 8] <= input_byte;\n                    byte_count <= byte_count + 1;\n                end\n                if (byte_count == 2) begin\n                    done <= 1'b1;\n                end else begin\n                    done <= 1'b0;\n                end\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (input_byte[3] == 1'b1) begin\n                    next_state = RECEIVING;\n                    byte_count = 0;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            RECEIVING: begin\n                if (byte_count < 3) begin\n                    next_state = RECEIVING;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    }
}