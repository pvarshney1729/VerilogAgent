{
    "code": "module TopModule (\n    input  logic clk,            // Clock signal (1-bit)\n    input  logic areset,        // Asynchronous reset signal (1-bit, active high)\n    input  logic bump_left,     // Bump signal from the left (1-bit, active high)\n    input  logic bump_right,    // Bump signal from the right (1-bit, active high)\n    output logic walk_left,     // Walking left output signal (1-bit, active high)\n    output logic walk_right     // Walking right output signal (1-bit, active high)\n);\n\n// State Encoding\ntypedef enum logic [1:0] {\n    STATE_WALK_LEFT = 2'b01,  // Walking left state\n    STATE_WALK_RIGHT = 2'b10  // Walking right state\n} state_t;\n\n// State variables\nstate_t current_state, next_state;\n\n// Synchronous reset and state transition\nalways @(posedge clk) begin\n    if (areset) begin\n        current_state <= STATE_WALK_LEFT; // Reset to walking left state\n    end else begin\n        current_state <= next_state;       // Transition to next state\n    end\nend\n\n// Output Logic\nalways @(*) begin\n    // Default outputs\n    walk_left = 1'b0;\n    walk_right = 1'b0;\n\n    // Output logic based on current state\n    case (current_state)\n        STATE_WALK_LEFT: begin\n            walk_left = 1'b1;\n            walk_right = 1'b0;\n        end\n        STATE_WALK_RIGHT: begin\n            walk_left = 1'b0;\n            walk_right = 1'b1;\n        end\n    endcase\nend\n\n// Next State Logic\nalways @(*) begin\n    case (current_state)\n        STATE_WALK_LEFT: begin\n            if (bump_right) begin\n                next_state = STATE_WALK_RIGHT; // Bump right triggers a state change\n            end else begin\n                next_state = STATE_WALK_LEFT;  // Stay in the same state\n            end\n        end\n        STATE_WALK_RIGHT: begin\n            if (bump_left) begin\n                next_state = STATE_WALK_LEFT; // Bump left triggers a state change\n            end else begin\n                next_state = STATE_WALK_RIGHT; // Stay in the same state\n            end\n        end\n        default: begin\n            next_state = STATE_WALK_LEFT; // Fallback to a known state\n        end\n    endcase\nend\n\nendmodule",
    "test_results": {
        "num_mismatch": 195,
        "passfail": "R"
    }
}