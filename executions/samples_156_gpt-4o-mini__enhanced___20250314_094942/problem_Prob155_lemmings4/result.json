{
    "code": "module TopModule(\n    input logic clk,                 // Clock input (positive edge triggered)\n    input logic areset,             // Asynchronous active high reset\n    input logic bump_left,          // Input: Bump from the left (1 bit)\n    input logic bump_right,         // Input: Bump from the right (1 bit)\n    input logic ground,             // Input: Ground presence (1 bit, 1 = present)\n    input logic dig,                // Input: Dig command (1 bit, 1 = dig)\n    output logic walk_left,         // Output: Walking left (1 bit, 1 = walk left)\n    output logic walk_right,        // Output: Walking right (1 bit, 1 = walk right)\n    output logic aaah,              // Output: Falling state (1 bit, 1 = falling)\n    output logic digging             // Output: Digging state (1 bit, 1 = digging)\n);\n\n    typedef enum logic [2:0] {\n        WALK_LEFT = 3'b000,\n        WALK_RIGHT = 3'b001,\n        FALLING = 3'b010,\n        DIGGING = 3'b011,\n        SPLATTERED = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [4:0] fall_counter; // 5 bits to count up to 20\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= WALK_LEFT;\n            fall_counter <= 5'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == FALLING) begin\n                fall_counter <= fall_counter + 1;\n            end else begin\n                fall_counter <= 5'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        // Default outputs\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (current_state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n                if (bump_right) begin\n                    next_state = WALK_RIGHT;\n                end else if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end else if (dig) begin\n                    next_state = DIGGING;\n                end else begin\n                    next_state = WALK_LEFT;\n                end\n            end\n\n            WALK_RIGHT: begin\n                walk_right = 1'b1;\n                if (bump_left) begin\n                    next_state = WALK_LEFT;\n                end else if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end else if (dig) begin\n                    next_state = DIGGING;\n                end else begin\n                    next_state = WALK_RIGHT;\n                end\n            end\n\n            FALLING: begin\n                aaah = 1'b1;\n                if (ground) begin\n                    if (fall_counter > 20) begin\n                        next_state = SPLATTERED;\n                    end else if (current_state == FALLING) begin\n                        if (walk_left) begin\n                            next_state = WALK_LEFT;\n                        end else if (walk_right) begin\n                            next_state = WALK_RIGHT;\n                        end\n                    end\n                end else begin\n                    next_state = FALLING;\n                end\n            end\n\n            DIGGING: begin\n                digging = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end else begin\n                    next_state = DIGGING;\n                end\n            end\n\n            SPLATTERED: begin\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n                aaah = 1'b0;\n                digging = 1'b0;\n                if (areset) begin\n                    next_state = WALK_LEFT;\n                end else begin\n                    next_state = SPLATTERED;\n                end\n            end\n\n            default: next_state = WALK_LEFT; // Fallback to a known state\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 328,
        "passfail": "R"
    }
}