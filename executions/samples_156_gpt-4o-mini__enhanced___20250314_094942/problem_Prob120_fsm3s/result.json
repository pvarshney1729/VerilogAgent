{
    "code": "module TopModule (\n    input wire clk,              // Clock input: 1-bit signal\n    input wire reset,            // Synchronous Active-High Reset: 1-bit signal\n    input wire in,               // Input signal: 1-bit signal\n    output reg out               // Output signal: 1-bit signal\n);\n\n    // State definitions\n    typedef enum logic [1:0] {\n        A = 2'b00,\n        B = 2'b01,\n        C = 2'b10,\n        D = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            A: next_state = (in == 1'b0) ? A : B;\n            B: next_state = (in == 1'b0) ? C : B;\n            C: next_state = (in == 1'b0) ? A : D;\n            D: next_state = (in == 1'b0) ? C : B;\n            default: next_state = A; // Default case for safety\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        case (current_state)\n            A: out = 1'b0;\n            B: out = 1'b0;\n            C: out = 1'b0;\n            D: out = 1'b1;\n            default: out = 1'b0; // Default case for safety\n        endcase\n    end\n\n    // Sequential logic for state update\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= A;\n            out <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}