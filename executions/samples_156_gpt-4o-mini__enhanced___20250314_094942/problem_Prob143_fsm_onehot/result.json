{
    "code": "module TopModule (\n    input logic in,                     // Single-bit input\n    input logic [9:0] state,           // One-hot encoded current state (state[0]=S0, ..., state[9]=S9)\n    output logic [9:0] next_state,      // One-hot encoded next state (next_state[0]=S0, ..., next_state[9]=S9)\n    output logic out1,                  // Single-bit output\n    output logic out2                   // Single-bit output\n);\n\nalways @(*) begin\n    // Default values\n    next_state = 10'b0000000000; // All bits low\n    out1 = 1'b0;                 // Default output\n    out2 = 1'b0;                 // Default output\n\n    // State transition logic\n    case (1'b1) // Only one state should be high in one-hot encoding\n        state[0]: begin // S0\n            next_state[0] = 1'b1; // Stay in S0\n            if (in) next_state[1] = 1'b1; // Transition to S1 on input 1\n        end\n        state[1]: begin // S1\n            if (in) next_state[2] = 1'b1; // Transition to S2 on input 1\n            else next_state[0] = 1'b1; // Transition to S0 on input 0\n        end\n        state[2]: begin // S2\n            if (in) next_state[3] = 1'b1; // Transition to S3 on input 1\n            else next_state[0] = 1'b1; // Transition to S0 on input 0\n        end\n        state[3]: begin // S3\n            if (in) next_state[4] = 1'b1; // Transition to S4 on input 1\n            else next_state[0] = 1'b1; // Transition to S0 on input 0\n        end\n        state[4]: begin // S4\n            if (in) next_state[5] = 1'b1; // Transition to S5 on input 1\n            else next_state[0] = 1'b1; // Transition to S0 on input 0\n        end\n        state[5]: begin // S5\n            if (in) next_state[6] = 1'b1; // Transition to S6 on input 1\n            else next_state[8] = 1'b1; // Transition to S8 on input 0\n        end\n        state[6]: begin // S6\n            if (in) next_state[7] = 1'b1; // Transition to S7 on input 1\n            else next_state[9] = 1'b1; // Transition to S9 on input 0\n        end\n        state[7]: begin // S7\n            if (in) next_state[7] = 1'b1; // Stay in S7 on input 1\n            else next_state[0] = 1'b1; // Transition to S0 on input 0\n            out2 = 1'b1; // Output is (0, 1)\n        end\n        state[8]: begin // S8\n            if (in) next_state[1] = 1'b1; // Transition to S1 on input 1\n            else next_state[0] = 1'b1; // Transition to S0 on input 0\n            out1 = 1'b1; // Output is (1, 0)\n        end\n        state[9]: begin // S9\n            if (in) next_state[1] = 1'b1; // Transition to S1 on input 1\n            else next_state[0] = 1'b1; // Transition to S0 on input 0\n            out2 = 1'b1; // Output is (1, 1)\n        end\n    endcase\nend\n\nendmodule",
    "test_results": {
        "num_mismatch": 35,
        "passfail": "R"
    }
}