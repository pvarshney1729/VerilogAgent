{
    "code": "module TopModule (\n    input logic clk,          // Clock signal (1-bit)\n    input logic areset,      // Asynchronous active-high reset (1-bit)\n    input logic x,           // Input signal (1-bit)\n    output logic z           // Output signal (1-bit)\n);\n\n    // State definitions using one-hot encoding\n    logic [1:0] state, next_state;\n\n    // State encoding\n    localparam STATE_A = 2'b01;\n    localparam STATE_B = 2'b10;\n\n    // Asynchronous reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= STATE_A;\n            z <= 1'b0;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Combinational logic for next state and output\n    always @(*) begin\n        case (state)\n            STATE_A: begin\n                if (x) begin\n                    next_state = STATE_B;\n                    z = 1'b1;\n                end else begin\n                    next_state = STATE_A;\n                    z = 1'b0;\n                end\n            end\n            STATE_B: begin\n                next_state = STATE_B; // Remain in B\n                z = x ? 1'b0 : 1'b1;  // z = 1 if x = 0, z = 0 if x = 1\n            end\n            default: begin\n                next_state = STATE_A; // Default to state A\n                z = 1'b0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}