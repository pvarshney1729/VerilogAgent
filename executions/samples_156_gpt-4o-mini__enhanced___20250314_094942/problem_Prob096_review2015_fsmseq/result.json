{
    "code": "module TopModule (\n    input logic clk,               // Clock signal, active high\n    input logic reset,             // Reset signal, active high synchronous\n    input logic data,              // One-bit input data stream\n    output logic start_shifting     // Output signal to indicate sequence found\n);\n\n    // State definitions for FSM\n    typedef enum logic [2:0] {\n        IDLE,   // Waiting for sequence\n        S1,     // First bit of sequence detected (1)\n        S11,    // Second bit of sequence detected (1)\n        S110,   // Third bit of sequence detected (0)\n        S1101   // Fourth bit of sequence detected (1)\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Initial state of the FSM\n    initial begin\n        current_state = IDLE;      // FSM starts in IDLE state\n        start_shifting = 0;        // Output starts low\n    end\n\n    // Synchronous reset and state transition logic\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE; // Reset state to IDLE\n            start_shifting <= 0;    // Reset output\n        end else begin\n            current_state <= next_state; // Update state\n        end\n    end\n\n    // FSM Next State Logic\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                if (data) next_state = S1;  // Transition to S1 if data is 1\n                else next_state = IDLE;     // Stay in IDLE if data is 0\n            end\n            S1: begin\n                if (data) next_state = S11; // Transition to S11 if data is 1\n                else next_state = IDLE;     // Reset to IDLE if data is 0\n            end\n            S11: begin\n                if (!data) next_state = S110; // Transition to S110 if data is 0\n                else next_state = S11;      // Stay in S11 if data is 1\n            end\n            S110: begin\n                if (data) next_state = S1101; // Transition to S1101 if data is 1\n                else next_state = IDLE;     // Reset to IDLE if data is 0\n            end\n            S1101: begin\n                next_state = S1101;         // Stay in S1101 after sequence found\n            end\n            default: begin\n                next_state = IDLE;          // Default case to prevent latches\n            end\n        endcase\n    end\n\n    // Ensure start_shifting remains low until sequence is found\n    always @(posedge clk) begin\n        if (reset) \n            start_shifting <= 0;          // Reset output\n        else if (current_state == S1101) \n            start_shifting <= 1;          // Set output when sequence is found\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 12,
        "passfail": "R"
    }
}