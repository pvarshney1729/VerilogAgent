{
    "code": "module TopModule (\n    input logic clk,             // Clock input\n    input logic resetn,         // Active-low synchronous reset\n    input logic [2:0] r,        // Input request signals from devices (3 bits)\n    output logic [2:0] g        // Output grant signals to devices (3 bits)\n);\n\n// State encoding\ntypedef enum logic [1:0] {\n    STATE_A = 2'b00,\n    STATE_B = 2'b01,\n    STATE_C = 2'b10,\n    STATE_D = 2'b11\n} state_t;\n\nstate_t current_state, next_state;\n\n// Synchronous reset behavior\nalways @(posedge clk) begin\n    if (!resetn) begin\n        current_state <= STATE_A; // Reset to state A\n        g <= 3'b000;               // Reset grants to 0\n    end else begin\n        current_state <= next_state; // Update state on clock edge\n    end\nend\n\n// FSM state transition logic\nalways @(*) begin\n    // Default values\n    next_state = current_state;  \n    g = 3'b000;                  // Default grant output\n\n    case (current_state)\n        STATE_A: begin\n            if (r[0]) begin\n                next_state = STATE_B; // Grant to device 0\n                g[0] = 1'b1;\n            end else if (r[1]) begin\n                next_state = STATE_C; // Grant to device 1\n                g[1] = 1'b1;\n            end else if (r[2]) begin\n                next_state = STATE_D; // Grant to device 2\n                g[2] = 1'b1;\n            end\n        end\n        STATE_B: begin\n            if (r[0]) begin\n                next_state = STATE_B; // Remain in state B\n                g[0] = 1'b1;           // Grant to device 0\n            end else begin\n                next_state = STATE_A; // Return to state A\n            end\n        end\n        STATE_C: begin\n            if (r[1]) begin\n                next_state = STATE_C; // Remain in state C\n                g[1] = 1'b1;           // Grant to device 1\n            end else begin\n                next_state = STATE_A; // Return to state A\n            end\n        end\n        STATE_D: begin\n            // Additional logic for STATE_D if needed\n            next_state = STATE_A; // Default return to state A\n        end\n        default: begin\n            next_state = STATE_A; // Fallback to state A\n        end\n    endcase\nend\n\nendmodule",
    "test_results": {
        "num_mismatch": 479,
        "passfail": "R"
    }
}