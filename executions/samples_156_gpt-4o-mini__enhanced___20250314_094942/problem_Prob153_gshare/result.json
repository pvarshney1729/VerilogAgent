{
    "code": "module TopModule (\n    input  logic clk,                     // Clock signal (1 bit)\n    input  logic areset,                  // Asynchronous active-high reset (1 bit)\n    \n    input  logic predict_valid,            // Prediction request signal (1 bit)\n    input  logic [6:0] predict_pc,        // 7-bit predicted program counter (PC)\n    output logic predict_taken,            // Output for predicted branch taken (1 bit)\n    output logic [6:0] predict_history,    // 7-bit predicted global history\n    \n    input  logic train_valid,              // Training request signal (1 bit)\n    input  logic train_taken,              // Actual outcome of the branch (1 bit)\n    input  logic train_mispredicted,       // Flag indicating misprediction (1 bit)\n    input  logic [6:0] train_history,      // 7-bit actual branch history\n    input  logic [6:0] train_pc            // 7-bit address of the branch being trained\n);\n\n    logic [6:0] global_history;            // 7-bit global history register\n    logic [1:0] PHT [127:0];               // Pattern History Table (PHT) with 128 entries of 2-bit saturating counters\n    logic [6:0] index;                     // Index for PHT access\n    logic [1:0] current_state;             // Current state of the PHT entry for prediction\n\n    // Asynchronous reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            global_history <= 7'b0;         // Reset global history\n            for (int i = 0; i < 128; i++) begin\n                PHT[i] <= 2'b00;           // Reset PHT entries\n            end\n        end else begin\n            if (train_valid) begin\n                // Update PHT based on training information\n                index <= train_pc ^ train_history; // Compute index using XOR\n                if (train_taken) begin\n                    if (PHT[index] < 2'b11) begin\n                        PHT[index] <= PHT[index] + 1; // Increment if taken\n                    end\n                end else begin\n                    if (PHT[index] > 2'b00) begin\n                        PHT[index] <= PHT[index] - 1; // Decrement if not taken\n                    end\n                end\n                // Update global history\n                global_history <= {global_history[5:0], train_taken};\n            end\n            \n            if (predict_valid) begin\n                // Compute index for prediction\n                index <= predict_pc ^ global_history; // Compute index using XOR\n                current_state <= PHT[index]; // Read current state for prediction\n                predict_taken <= (current_state[1] == 1'b1); // Predict taken if state is 2'b10 or 2'b11\n                predict_history <= global_history; // Output current global history\n            end\n        end\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 598,
        "passfail": "R"
    }
}