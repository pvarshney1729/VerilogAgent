{
    "code": "module TopModule (\n    input logic in,             // 1-bit input signal (unsigned)\n    input logic [1:0] state,   // 2-bit input signal representing the current state\n    output logic [1:0] next_state, // 2-bit output signal representing the next state\n    output logic out            // 1-bit output signal (unsigned)\n);\n\n// State encoding definition\nlocalparam A = 2'b00; // State A\nlocalparam B = 2'b01; // State B\nlocalparam C = 2'b10; // State C\nlocalparam D = 2'b11; // State D\n\n// Combinational logic for next state and output\nalways @(*) begin\n    // Default assignments for output and next_state\n    next_state = state; // Default to current state\n    out = 0;            // Default output\n\n    case (state)\n        A: begin\n            if (in) begin\n                next_state = B; // Transition from A to B on in=1\n            end\n        end\n        B: begin\n            if (in) begin\n                next_state = B; // Stay in state B on in=1\n            end else begin\n                next_state = C; // Transition from B to C on in=0\n            end\n        end\n        C: begin\n            if (in) begin\n                next_state = D; // Transition from C to D on in=1\n            end else begin\n                next_state = A; // Transition from C to A on in=0\n            end\n        end\n        D: begin\n            if (in) begin\n                next_state = B; // Transition from D to B on in=1\n            end else begin\n                next_state = C; // Transition from D to C on in=0\n            end\n            out = 1; // Output is 1 in state D\n        end\n        default: begin\n            next_state = A; // Reset to state A\n            out = 0;        // Output reset to 0\n        end\n    endcase\nend\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}