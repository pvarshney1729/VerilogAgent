{
    "code": "module TopModule (\n    input  logic clk,                // Clock signal (1 bit)\n    input  logic load,               // Load signal (1 bit, active high)\n    input  logic ena,                // Enable signal for shifting (1 bit, active high)\n    input  logic [1:0] amount,       // Amount of shift (2 bits)\n    input  logic [63:0] data,        // Input data for loading (64 bits, signed)\n    output logic [63:0] q             // Output of the shift register (64 bits, signed)\n);\n\n    always @(posedge clk) begin\n        if (load) begin\n            q <= data; // Load data into q\n        end else if (ena) begin\n            case (amount)\n                2'b00: q <= q << 1;               // Shift left by 1 bit\n                2'b01: q <= q << 8;               // Shift left by 8 bits\n                2'b10: q <= $signed(q) >>> 1;     // Arithmetic right shift by 1 bit\n                2'b11: q <= $signed(q) >>> 8;     // Arithmetic right shift by 8 bits\n                default: ; // Undefined behavior\n            endcase\n        end\n    end\n\n    initial begin\n        q = 64'b0; // Initialize q to zero\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}