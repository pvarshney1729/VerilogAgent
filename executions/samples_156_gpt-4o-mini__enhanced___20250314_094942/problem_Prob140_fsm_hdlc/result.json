{
    "code": "module TopModule (\n    input logic clk,           // Clock signal (1 bit)\n    input logic reset,         // Active high synchronous reset (1 bit)\n    input logic in,           // Data input stream (1 bit)\n    output logic disc,         // Discard signal (1 bit)\n    output logic flag,         // Frame flag signal (1 bit)\n    output logic err           // Error signal for invalid sequence (1 bit)\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        S1   = 3'b001,\n        S2   = 3'b010,\n        S3   = 3'b011,\n        S4   = 3'b100,\n        S5   = 3'b101,\n        S6   = 3'b110,\n        ERROR = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        disc <= 1'b0;\n        flag <= 1'b0;\n        err <= 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (in) begin\n                    next_state <= S1;\n                end else begin\n                    next_state <= IDLE;\n                end\n            end\n            S1: begin\n                if (in) begin\n                    next_state <= S2;\n                end else begin\n                    next_state <= IDLE;\n                end\n            end\n            S2: begin\n                if (in) begin\n                    next_state <= S3;\n                end else begin\n                    next_state <= IDLE;\n                end\n            end\n            S3: begin\n                if (in) begin\n                    next_state <= S4;\n                end else begin\n                    next_state <= IDLE;\n                end\n            end\n            S4: begin\n                if (in) begin\n                    next_state <= S5;\n                end else begin\n                    next_state <= IDLE;\n                end\n            end\n            S5: begin\n                if (in) begin\n                    next_state <= S6;\n                end else begin\n                    next_state <= IDLE;\n                end\n            end\n            S6: begin\n                if (in) begin\n                    next_state <= ERROR;\n                end else begin\n                    disc <= 1'b1; // 0111110 detected\n                    next_state <= IDLE;\n                end\n            end\n            ERROR: begin\n                err <= 1'b1; // 7 or more 1s detected\n                if (in) begin\n                    next_state <= ERROR;\n                end else begin\n                    next_state <= IDLE;\n                end\n            end\n            default: next_state <= IDLE;\n        endcase\n\n        if (current_state == S6 && in) begin\n            flag <= 1'b1; // 01111110 detected\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 218,
        "passfail": "R"
    }
}