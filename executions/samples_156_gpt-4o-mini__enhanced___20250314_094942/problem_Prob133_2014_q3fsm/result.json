{
    "code": "module TopModule (\n    input logic clk,         // Clock input, active on rising edge\n    input logic reset,       // Synchronous active-high reset\n    input logic s,          // Input signal, single bit\n    input logic w,          // Input signal, single bit\n    output logic z          // Output signal, single bit\n);\n\n    typedef enum logic [1:0] {\n        A = 2'b00,\n        B = 2'b01\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [1:0] count_w; // Counter for w = 1 occurrences\n\n    // Synchronous state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= A;\n            z <= 1'b0;\n            count_w <= 2'b00;\n        end else begin\n            current_state <= next_state;\n            if (current_state == B) begin\n                if (count_w < 2'b11) begin\n                    count_w <= count_w + w; // Increment counter if w = 1\n                end\n            end\n            if (next_state == A) begin\n                z <= 1'b0; // Reset z when returning to state A\n            end else if (count_w == 2'b10) begin\n                z <= 1'b1; // Set z if exactly two w = 1\n            end else begin\n                z <= 1'b0; // Otherwise, set z to 0\n            end\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            A: begin\n                if (s) begin\n                    next_state = B;\n                    count_w = 2'b00; // Reset counter when moving to state B\n                end else begin\n                    next_state = A;\n                end\n            end\n            B: begin\n                next_state = B; // Stay in state B\n            end\n            default: begin\n                next_state = A; // Default to state A\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 190,
        "passfail": "R"
    }
}