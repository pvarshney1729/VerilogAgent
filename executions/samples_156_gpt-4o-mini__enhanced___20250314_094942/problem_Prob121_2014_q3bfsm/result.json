{
    "code": "module TopModule (\n    input logic clk,           // Clock input, rising edge triggered\n    input logic reset,         // Synchronous active-high reset\n    input logic x,             // Input signal, single bit\n    output logic z             // Output signal, single bit\n);\n\n    // State Declaration\n    logic [2:0] y;             // Current state (3 bits)\n    logic [2:0] next_y;        // Next state (3 bits)\n\n    // State Encoding\n    localparam STATE_000 = 3'b000;\n    localparam STATE_001 = 3'b001;\n    localparam STATE_010 = 3'b010;\n    localparam STATE_011 = 3'b011;\n    localparam STATE_100 = 3'b100;\n\n    // FSM Timing Behavior\n    always @(posedge clk) begin\n        if (reset) begin\n            y <= STATE_000;      // Reset state to 000\n            z <= 1'b0;           // Output z is initialized to 0 on reset\n        end else begin\n            y <= next_y;         // Update current state to next state\n        end\n    end\n\n    // Next State Logic\n    always @(*) begin\n        case (y)\n            STATE_000: next_y = (x) ? STATE_001 : STATE_000; // Output z = 0\n            STATE_001: next_y = (x) ? STATE_100 : STATE_001; // Output z = 0\n            STATE_010: next_y = (x) ? STATE_001 : STATE_010; // Output z = 0\n            STATE_011: next_y = (x) ? STATE_010 : STATE_001; // Output z = 1\n            STATE_100: next_y = (x) ? STATE_100 : STATE_011; // Output z = 1\n            default: next_y = STATE_000; // Default to reset state on invalid state\n        endcase\n    end\n\n    // Output Logic\n    always @(*) begin\n        case (y)\n            STATE_000: z = 1'b0;\n            STATE_001: z = 1'b0;\n            STATE_010: z = 1'b0;\n            STATE_011: z = 1'b1;\n            STATE_100: z = 1'b1;\n            default: z = 1'b0; // Default output\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}