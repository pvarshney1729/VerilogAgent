{
    "code": "module TopModule (\n    input logic clk,                 \n    input logic load,                \n    input logic [255:0] data,        \n    output logic [255:0] q            \n);\n\nlocalparam GRID_SIZE = 16; \nlocalparam TOTAL_CELLS = GRID_SIZE * GRID_SIZE; \n\nlogic [255:0] next_q; // Next state of the grid\n\nalways @(*) begin\n    next_q = q; // Default to current state\n    // Update the state of the game based on the neighbor counts\n    for (int row = 0; row < GRID_SIZE; row++) begin\n        for (int col = 0; col < GRID_SIZE; col++) begin\n            int alive_neighbors = 0;\n            // Count alive neighbors with wrap-around\n            for (int i = -1; i <= 1; i++) begin\n                for (int j = -1; j <= 1; j++) begin\n                    if (i == 0 && j == 0) continue; // Skip the cell itself\n                    int neighbor_row = (row + i + GRID_SIZE) % GRID_SIZE;\n                    int neighbor_col = (col + j + GRID_SIZE) % GRID_SIZE;\n                    alive_neighbors += q[neighbor_row * GRID_SIZE + neighbor_col];\n                end\n            end\n            \n            // Apply the rules of the game\n            int current_index = row * GRID_SIZE + col;\n            if (alive_neighbors == 3) begin\n                next_q[current_index] = 1'b1; // Becomes alive\n            end else if (alive_neighbors == 2) begin\n                next_q[current_index] = q[current_index]; // Stays the same\n            end else begin\n                next_q[current_index] = 1'b0; // Becomes dead\n            end\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    if (load) begin\n        q <= data; // Load initial state from `data` into `q`\n    end else begin\n        q <= next_q; // Update state to the next state\n    end\nend\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}