{
    "code": "module TopModule (\n    input logic clk,                 // Clock input, 1 bit\n    input logic in,                  // Serial input data, 1 bit\n    input logic reset,               // Active-high synchronous reset, 1 bit\n    output logic [7:0] out_byte,     // Received data byte, 8 bits\n    output logic done                // Output signal indicating byte reception, 1 bit\n);\n\n// State Definitions for FSM\ntypedef enum logic [2:0] {\n    IDLE,          // Waiting for start bit\n    RECEIVING,     // Receiving data bits\n    CHECK_STOP,    // Checking for stop bit\n    DONE           // Byte received, waiting for next start bit\n} state_t;\n\n// Internal FSM state\nstate_t current_state, next_state;\nlogic [3:0] bit_count; // To count the number of bits received\n\n// Initial state and reset behavior\nalways @(posedge clk) begin\n    if (reset) begin\n        current_state <= IDLE;\n        out_byte <= 8'b0;  // Reset the output byte to zero\n        done <= 0;         // Reset done signal\n        bit_count <= 0;    // Reset bit count\n    end else begin\n        current_state <= next_state; // Transition to next state\n    end\nend\n\n// FSM Logic\nalways @(*) begin\n    next_state = current_state; // Default to hold current state\n    done = 0;                   // Default done signal is low\n    case (current_state)\n        IDLE: begin\n            if (in == 1'b0) begin // Start bit detected\n                bit_count = 0;    // Reset bit count\n                next_state = RECEIVING;\n            end\n        end\n        RECEIVING: begin\n            if (bit_count < 8) begin\n                out_byte[bit_count] = in; // Shift in data bits, LSB first\n                bit_count = bit_count + 1; // Increment bit count\n            end else begin\n                next_state = CHECK_STOP; // Move to check for stop bit\n            end\n        end\n        CHECK_STOP: begin\n            if (in == 1'b1) begin // Stop bit detected\n                done = 1;       // Assert done signal\n                next_state = DONE; // Move to done state\n            end\n        end\n        DONE: begin\n            if (in == 1'b0) begin // Wait for a new start bit\n                next_state = RECEIVING;\n            end\n        end\n        default: next_state = IDLE; // Fallback to IDLE on undefined state\n    endcase\nend\n\nendmodule",
    "test_results": {
        "num_mismatch": 166,
        "passfail": "R"
    }
}