{
    "code": "module TopModule (\n    input  logic clk,          // Clock signal, positive edge triggered\n    input  logic reset,        // Synchronous active-high reset\n    input  logic data,         // Serial data input\n    output logic [3:0] count,  // 4-bit output representing remaining time\n    output logic counting,     // Indicates counting state\n    output logic done,         // Indicates completion of the timer\n    input  logic ack           // Acknowledge signal from the user\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        CAPTURE = 2'b01,\n        COUNT = 2'b10,\n        WAIT_ACK = 2'b11\n    } state_t;\n\n    state_t state, next_state;\n    logic [3:0] shift_reg;\n    logic [3:0] delay;\n    logic [9:0] cycle_counter;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            state <= IDLE;\n            shift_reg <= 4'b0000;\n            delay <= 4'b0000;\n            cycle_counter <= 10'b0000000000;\n            count <= 4'bxxxx;\n            counting <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            state <= next_state;\n            if (state == IDLE) begin\n                shift_reg <= {shift_reg[2:0], data};\n            end else if (state == CAPTURE) begin\n                delay <= {shift_reg[2:0], data};\n            end else if (state == COUNT) begin\n                if (cycle_counter == 10'd999) begin\n                    cycle_counter <= 10'b0000000000;\n                    count <= count - 1;\n                end else begin\n                    cycle_counter <= cycle_counter + 1;\n                end\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = state;\n        counting = 1'b0;\n        done = 1'b0;\n        case (state)\n            IDLE: begin\n                if (shift_reg == 4'b1101) begin\n                    next_state = CAPTURE;\n                end\n            end\n            CAPTURE: begin\n                next_state = COUNT;\n                count = delay;\n            end\n            COUNT: begin\n                counting = 1'b1;\n                if (count == 4'b0000 && cycle_counter == 10'd999) begin\n                    next_state = WAIT_ACK;\n                end\n            end\n            WAIT_ACK: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    },
    "iterations_used": 2
}