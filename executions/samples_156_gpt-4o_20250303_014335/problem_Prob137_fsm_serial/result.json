{
    "code": "module TopModule (\n    input logic clk,          // Clock signal\n    input logic reset,        // Active-high synchronous reset\n    input logic in,           // Serial data input bit\n    output logic done         // High when a valid byte is received\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        RECEIVE = 2'b01,\n        VERIFY_STOP = 2'b10,\n        ERROR = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] data_shift_reg;\n    logic [2:0] bit_counter;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            data_shift_reg <= 8'b0;\n            bit_counter <= 3'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == RECEIVE) begin\n                data_shift_reg <= {in, data_shift_reg[7:1]};\n                bit_counter <= bit_counter + 1;\n            end\n            if (current_state == VERIFY_STOP && in == 1'b1) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = RECEIVE;\n                end\n            end\n            RECEIVE: begin\n                if (bit_counter == 3'b111) begin\n                    next_state = VERIFY_STOP;\n                end\n            end\n            VERIFY_STOP: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = ERROR;\n                end\n            end\n            ERROR: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}