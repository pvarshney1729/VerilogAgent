{
    "code": "module TopModule(\n    input logic clk,          // Clock signal, positive-edge triggered\n    input logic reset,        // Active-high synchronous reset\n    input logic [7:0] in,     // 8-bit input bus, bit[7] is MSB, bit[0] is LSB\n    output logic [23:0] out_bytes, // 24-bit output\n    output logic done         // High when a complete message is received\n);\n\n    typedef enum logic [2:0] {\n        IDLE  = 3'b000,\n        BYTE1 = 3'b001,\n        BYTE2 = 3'b010,\n        BYTE3 = 3'b011,\n        DONE  = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [23:0] temp_bytes;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_bytes <= 24'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            case (current_state)\n                BYTE1: temp_bytes[23:16] <= in;\n                BYTE2: temp_bytes[15:8] <= in;\n                BYTE3: temp_bytes[7:0] <= in;\n                DONE: begin\n                    out_bytes <= temp_bytes;\n                    done <= 1'b1;\n                end\n                default: done <= 1'b0;\n            endcase\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (in[3] == 1'b1)\n                    next_state = BYTE1;\n                else\n                    next_state = IDLE;\n            end\n            BYTE1: next_state = BYTE2;\n            BYTE2: next_state = BYTE3;\n            BYTE3: next_state = DONE;\n            DONE: next_state = IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 718,
        "passfail": "R"
    },
    "iterations_used": 2
}