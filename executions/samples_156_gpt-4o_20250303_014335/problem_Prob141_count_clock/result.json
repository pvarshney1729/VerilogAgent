{
    "code": "module TopModule (\n    input logic clk,              // Clock input, positive edge-triggered\n    input logic reset,            // Active high synchronous reset\n    input logic ena,              // Enable signal for clock increment\n    output logic pm,              // AM/PM indicator, 1 for PM, 0 for AM\n    output logic [7:0] hh,        // Hours as two BCD digits (01-12)\n    output logic [7:0] mm,        // Minutes as two BCD digits (00-59)\n    output logic [7:0] ss         // Seconds as two BCD digits (00-59)\n);\n\n    // Internal registers for time keeping\n    logic [3:0] hh_ones, hh_tens;\n    logic [3:0] mm_ones, mm_tens;\n    logic [3:0] ss_ones, ss_tens;\n\n    // Initialize the clock to 12:00:00 AM on reset\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            hh <= 8'b0001_0010; // 12\n            mm <= 8'b0000_0000; // 00\n            ss <= 8'b0000_0000; // 00\n            pm <= 0;            // AM\n        end else if (ena) begin\n            // Increment seconds\n            if (ss == 8'b0101_1001) begin // 59\n                ss <= 8'b0000_0000; // Reset seconds to 00\n                // Increment minutes\n                if (mm == 8'b0101_1001) begin // 59\n                    mm <= 8'b0000_0000; // Reset minutes to 00\n                    // Increment hours\n                    if (hh == 8'b0001_0010) begin // 12\n                        hh <= 8'b0000_0001; // Reset hours to 01\n                        pm <= ~pm; // Toggle AM/PM\n                    end else if (hh == 8'b0001_0001) begin // 11\n                        hh <= 8'b0001_0010; // Increment to 12\n                    end else begin\n                        hh_ones = hh[3:0];\n                        hh_tens = hh[7:4];\n                        if (hh_ones == 4'b1001) begin\n                            hh_ones <= 4'b0000;\n                            hh_tens <= hh_tens + 1;\n                        end else begin\n                            hh_ones <= hh_ones + 1;\n                        end\n                        hh <= {hh_tens, hh_ones};\n                    end\n                end else begin\n                    mm_ones = mm[3:0];\n                    mm_tens = mm[7:4];\n                    if (mm_ones == 4'b1001) begin\n                        mm_ones <= 4'b0000;\n                        mm_tens <= mm_tens + 1;\n                    end else begin\n                        mm_ones <= mm_ones + 1;\n                    end\n                    mm <= {mm_tens, mm_ones};\n                end\n            end else begin\n                ss_ones = ss[3:0];\n                ss_tens = ss[7:4];\n                if (ss_ones == 4'b1001) begin\n                    ss_ones <= 4'b0000;\n                    ss_tens <= ss_tens + 1;\n                end else begin\n                    ss_ones <= ss_ones + 1;\n                end\n                ss <= {ss_tens, ss_ones};\n            end\n        end\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    },
    "iterations_used": 2
}