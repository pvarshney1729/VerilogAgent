{
    "code": "module TopModule(\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    typedef enum logic [2:0] {\n        WALK_LEFT,\n        WALK_RIGHT,\n        FALLING,\n        DIGGING,\n        SPLATTERED\n    } state_t;\n\n    state_t state, next_state;\n    logic [4:0] fall_counter;\n    logic last_direction; // 0 for left, 1 for right\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= WALK_LEFT;\n            fall_counter <= 5'd0;\n            last_direction <= 1'b0;\n        end else begin\n            state <= next_state;\n            if (state == FALLING) begin\n                fall_counter <= ground ? 5'd0 : fall_counter + 5'd1;\n            end else begin\n                fall_counter <= 5'd0;\n            end\n        end\n    end\n\n    always_comb begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n        next_state = state;\n\n        case (state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end else if (dig) begin\n                    next_state = DIGGING;\n                    digging = 1'b1;\n                end else if (bump_left) begin\n                    next_state = WALK_RIGHT;\n                    last_direction = 1'b1;\n                end\n            end\n\n            WALK_RIGHT: begin\n                walk_right = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end else if (dig) begin\n                    next_state = DIGGING;\n                    digging = 1'b1;\n                end else if (bump_right) begin\n                    next_state = WALK_LEFT;\n                    last_direction = 1'b0;\n                end\n            end\n\n            FALLING: begin\n                aaah = 1'b1;\n                if (ground) begin\n                    if (fall_counter > 5'd20) begin\n                        next_state = SPLATTERED;\n                    end else if (last_direction == 1'b0) begin\n                        next_state = WALK_LEFT;\n                    end else begin\n                        next_state = WALK_RIGHT;\n                    end\n                end\n            end\n\n            DIGGING: begin\n                digging = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end\n            end\n\n            SPLATTERED: begin\n                // Remain in SPLATTERED state until reset\n            end\n\n            default: begin\n                next_state = WALK_LEFT;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 262,
        "passfail": "R"
    },
    "iterations_used": 1
}