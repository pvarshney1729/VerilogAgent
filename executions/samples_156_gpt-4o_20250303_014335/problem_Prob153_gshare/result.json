{
    "code": "module TopModule (\n    input logic clk,                  // Clock input\n    input logic areset,               // Asynchronous reset, active high\n\n    input logic predict_valid,        // Prediction request signal\n    input logic [6:0] predict_pc,     // 7-bit program counter for prediction\n    output logic predict_taken,       // Predicted branch direction\n    output logic [6:0] predict_history, // 7-bit branch history used for prediction\n\n    input logic train_valid,          // Training request signal\n    input logic train_taken,          // Actual branch outcome\n    input logic train_mispredicted,   // Misprediction indicator\n    input logic [6:0] train_history,  // 7-bit branch history for training\n    input logic [6:0] train_pc        // 7-bit program counter for training\n);\n\n    logic [6:0] global_history;\n    logic [1:0] PHT [0:127]; // 128-entry table of two-bit saturating counters\n\n    // Initialize PHT and global history\n    initial begin\n        global_history = 7'b0;\n        for (int i = 0; i < 128; i++) begin\n            PHT[i] = 2'b01; // Weakly not taken\n        end\n    end\n\n    // Predict logic\n    always @(*) begin\n        if (predict_valid) begin\n            logic [6:0] index;\n            index = predict_pc ^ global_history;\n            predict_taken = PHT[index][1]; // Most significant bit\n            predict_history = global_history;\n        end\n    end\n\n    // Sequential logic for updating history and PHT\n    always_ff @(posedge clk) begin\n        if (areset) begin\n            global_history <= 7'b0;\n        end else begin\n            if (train_valid) begin\n                logic [6:0] train_index;\n                train_index = train_pc ^ train_history;\n                if (train_taken) begin\n                    if (PHT[train_index] != 2'b11) begin\n                        PHT[train_index] <= PHT[train_index] + 1;\n                    end\n                end else begin\n                    if (PHT[train_index] != 2'b00) begin\n                        PHT[train_index] <= PHT[train_index] - 1;\n                    end\n                end\n                if (train_mispredicted) begin\n                    global_history <= train_history;\n                end else begin\n                    global_history <= {global_history[5:0], train_taken};\n                end\n            end else if (predict_valid) begin\n                global_history <= {global_history[5:0], predict_taken};\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 557,
        "passfail": "R"
    },
    "iterations_used": 2
}