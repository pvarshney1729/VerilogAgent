{
    "code": "module TopModule (\n    input logic clk,                // Clock signal, positive-edge triggered\n    input logic reset,              // Active high synchronous reset\n    input logic data,               // Serial data input for pattern detection\n    input logic done_counting,      // Input signal indicating the counter has finished\n    input logic ack,                // Acknowledgment signal from the user\n    output logic shift_ena,         // Output signal to enable shifting\n    output logic counting,          // Output signal indicating counting state\n    output logic done               // Output signal indicating timer completion\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        SHIFT = 2'b01,\n        COUNT = 2'b10,\n        NOTIFY = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] pattern_shift_reg;\n    logic [1:0] shift_counter;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            pattern_shift_reg <= 4'b0000;\n            shift_counter <= 2'b00;\n            shift_ena <= 1'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == SHIFT) begin\n                shift_counter <= shift_counter + 1;\n            end else begin\n                shift_counter <= 2'b00;\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (current_state == IDLE) begin\n            pattern_shift_reg <= {pattern_shift_reg[2:0], data};\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        shift_ena = 1'b0;\n        counting = 1'b0;\n        done = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (pattern_shift_reg == 4'b1101) begin\n                    next_state = SHIFT;\n                end\n            end\n            SHIFT: begin\n                shift_ena = 1'b1;\n                if (shift_counter == 2'b11) begin\n                    next_state = COUNT;\n                end\n            end\n            COUNT: begin\n                counting = 1'b1;\n                if (done_counting) begin\n                    next_state = NOTIFY;\n                end\n            end\n            NOTIFY: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 490,
        "passfail": "R"
    },
    "iterations_used": 1
}