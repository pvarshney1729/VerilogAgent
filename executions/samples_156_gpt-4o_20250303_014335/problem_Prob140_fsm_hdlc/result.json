{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [3:0] {\n        IDLE,\n        S0,\n        S01,\n        S011,\n        S0111,\n        S01111,\n        S011111,\n        S0111110,\n        S01111110,\n        ERROR\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] shift_reg;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            shift_reg <= 8'b0;\n        end else begin\n            current_state <= next_state;\n            shift_reg <= {shift_reg[6:0], in};\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (shift_reg[6:0] == 7'b0111111 && in == 1'b0) begin\n                    next_state = S0111110;\n                end else if (shift_reg[6:0] == 7'b1111111) begin\n                    next_state = ERROR;\n                end else if (shift_reg[5:0] == 6'b111111 && in == 1'b0) begin\n                    next_state = S01111;\n                end else if (shift_reg[5:0] == 6'b111111 && in == 1'b1) begin\n                    next_state = S011111;\n                end\n            end\n            S01111: begin\n                if (in == 1'b0) begin\n                    disc = 1'b1;\n                    next_state = IDLE;\n                end else begin\n                    next_state = S011111;\n                end\n            end\n            S0111110: begin\n                if (in == 1'b0) begin\n                    flag = 1'b1;\n                    next_state = IDLE;\n                end else begin\n                    next_state = S011111;\n                end\n            end\n            S011111: begin\n                if (in == 1'b1) begin\n                    next_state = ERROR;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            ERROR: begin\n                err = 1'b1;\n                next_state = IDLE;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 133,
        "passfail": "R"
    },
    "iterations_used": 2
}