{
    "code": "module TopModule (\n    input logic clk,\n    input logic in,\n    input logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        IDLE  = 3'b000,\n        START = 3'b001,\n        DATA  = 3'b010,\n        STOP  = 3'b011,\n        DONE  = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_counter;\n    logic [7:0] data_buffer;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_counter <= 3'b000;\n            data_buffer <= 8'b00000000;\n            out_byte <= 8'b00000000;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DATA) begin\n                data_buffer[bit_counter] <= in;\n                bit_counter <= bit_counter + 1;\n            end\n            if (current_state == DONE) begin\n                out_byte <= data_buffer;\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) // Start bit detected\n                    next_state = START;\n            end\n            START: begin\n                next_state = DATA;\n            end\n            DATA: begin\n                if (bit_counter == 3'b111) // All 8 data bits received\n                    next_state = STOP;\n            end\n            STOP: begin\n                if (in == 1'b1) // Stop bit detected\n                    next_state = DONE;\n                else\n                    next_state = IDLE;\n            end\n            DONE: begin\n                next_state = IDLE;\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 64,
        "passfail": "R"
    }
}