{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic s,\n    input logic w,\n    output logic z\n);\n\n    typedef enum logic [2:0] {\n        STATE_A  = 3'b000,\n        STATE_B1 = 3'b001,\n        STATE_B2 = 3'b010,\n        STATE_B3 = 3'b011,\n        STATE_C  = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [1:0] w_count;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= STATE_A;\n            w_count <= 2'b00;\n            z <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == STATE_B1 || current_state == STATE_B2 || current_state == STATE_B3) begin\n                if (w) w_count <= w_count + 1;\n            end\n            if (current_state == STATE_C) begin\n                if (w_count == 2'b10) z <= 1'b1;\n                else z <= 1'b0;\n                w_count <= 2'b00; // Reset count for next cycle\n            end\n        end\n    end\n\n    always @(*) begin\n        case (current_state)\n            STATE_A: begin\n                if (s) next_state = STATE_B1;\n                else next_state = STATE_A;\n            end\n            STATE_B1: next_state = STATE_B2;\n            STATE_B2: next_state = STATE_B3;\n            STATE_B3: next_state = STATE_C;\n            STATE_C: next_state = STATE_B1;\n            default: next_state = STATE_A;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 571,
        "passfail": "R"
    }
}