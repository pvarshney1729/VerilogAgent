{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic data,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done,\n    input logic ack\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        PATTERN_DETECT = 3'b001,\n        LOAD_DELAY = 3'b010,\n        COUNTING = 3'b011,\n        WAIT_ACK = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay;\n    logic [13:0] cycle_counter;\n    logic [3:0] pattern_shift_reg;\n    logic [3:0] delay_shift_reg;\n    logic [2:0] bit_counter;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        // Default values\n        next_state = current_state;\n        counting = 1'b0;\n        done = 1'b0;\n        count = 4'bxxxx; // Don't-care when not counting\n\n        case (current_state)\n            IDLE: begin\n                pattern_shift_reg = {pattern_shift_reg[2:0], data};\n                if (pattern_shift_reg == 4'b1101) begin\n                    next_state = LOAD_DELAY;\n                    bit_counter = 3'b100;\n                end\n            end\n\n            LOAD_DELAY: begin\n                if (bit_counter > 0) begin\n                    delay_shift_reg = {delay_shift_reg[2:0], data};\n                    bit_counter = bit_counter - 1;\n                end else begin\n                    delay = delay_shift_reg;\n                    next_state = COUNTING;\n                    cycle_counter = (delay + 1) * 1000;\n                end\n            end\n\n            COUNTING: begin\n                counting = 1'b1;\n                count = cycle_counter[13:10];\n                if (cycle_counter == 0) begin\n                    next_state = WAIT_ACK;\n                end else begin\n                    cycle_counter = cycle_counter - 1;\n                end\n            end\n\n            WAIT_ACK: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}