{
    "code": "module TopModule(\n    input logic clk,\n    input logic load,\n    input logic [255:0] data,\n    output logic [255:0] q\n);\n\n    logic [255:0] q_next;\n    integer i, j, ni, nj, count;\n\n    // Function to count the number of alive neighbors for a given cell\n    function logic [3:0] count_neighbors;\n        input logic [255:0] grid;\n        input integer row;\n        input integer col;\n        integer r, c;\n        logic [3:0] count;\n    begin\n        count = 0;\n        for (r = -1; r <= 1; r = r + 1) begin\n            for (c = -1; c <= 1; c = c + 1) begin\n                if (!(r == 0 && c == 0)) begin\n                    count = count + grid[((row + r + 16) % 16) * 16 + ((col + c + 16) % 16)];\n                end\n            end\n        end\n        count_neighbors = count;\n    end\n    endfunction\n\n    // Combinational logic to determine the next state of the grid\n    always @(*) begin\n        for (i = 0; i < 16; i = i + 1) begin\n            for (j = 0; j < 16; j = j + 1) begin\n                count = count_neighbors(q, i, j);\n                if (count == 3) begin\n                    q_next[i * 16 + j] = 1;\n                end else if (count == 2) begin\n                    q_next[i * 16 + j] = q[i * 16 + j];\n                end else begin\n                    q_next[i * 16 + j] = 0;\n                end\n            end\n        end\n    end\n\n    // Sequential logic to update the grid state\n    always @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else begin\n            q <= q_next;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}