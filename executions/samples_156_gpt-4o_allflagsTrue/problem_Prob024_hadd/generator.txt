Generated Response:

<REASONING>
The task is to implement a half adder using Verilog. A half adder takes two single-bit inputs and produces a single-bit sum and a single-bit carry-out. The sum is calculated using the XOR operation, and the carry-out is calculated using the AND operation. The guidelines specify using `logic` for port declarations and using `assign` statements for combinational logic. Since the half adder is purely combinational, there is no need for a clock or reset signal. The implementation will strictly adhere to the provided interface and signal names.
</REASONING>

<CODE>
[BEGIN]
module TopModule(
    input  logic a,
    input  logic b,
    output logic sum,
    output logic cout
);

    // XOR operation for sum
    assign sum = a ^ b;

    // AND operation for carry-out
    assign cout = a & b;

endmodule
[DONE]
</CODE>

Generated Code:

module TopModule(
    input  logic a,
    input  logic b,
    output logic sum,
    output logic cout
);

    // XOR operation for sum
    assign sum = a ^ b;

    // AND operation for carry-out
    assign cout = a & b;

endmodule