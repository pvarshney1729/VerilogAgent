{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic x,\n    output logic z\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        STATE_000 = 3'b000,\n        STATE_001 = 3'b001,\n        STATE_010 = 3'b010,\n        STATE_011 = 3'b011,\n        STATE_100 = 3'b100\n    } state_t;\n\n    state_t state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (state)\n            STATE_000: next_state = (x == 1'b0) ? STATE_000 : STATE_001;\n            STATE_001: next_state = (x == 1'b0) ? STATE_001 : STATE_100;\n            STATE_010: next_state = (x == 1'b0) ? STATE_010 : STATE_001;\n            STATE_011: next_state = (x == 1'b0) ? STATE_001 : STATE_010;\n            STATE_100: next_state = (x == 1'b0) ? STATE_011 : STATE_100;\n            default: next_state = STATE_000;\n        endcase\n    end\n\n    // Sequential logic with synchronous reset\n    always @(posedge clk) begin\n        if (reset) begin\n            state <= STATE_000;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Output logic\n    always @(*) begin\n        case (state)\n            STATE_011, STATE_100: z = 1'b1;\n            default: z = 1'b0;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}