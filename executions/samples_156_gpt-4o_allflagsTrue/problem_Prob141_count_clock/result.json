{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic ena,\n    output logic pm,\n    output logic [7:0] hh,\n    output logic [7:0] mm,\n    output logic [7:0] ss\n);\n\n    // Internal registers for BCD counting\n    logic [3:0] hh_ones;\n    logic [3:0] hh_tens;\n    logic [3:0] mm_ones;\n    logic [3:0] mm_tens;\n    logic [3:0] ss_ones;\n    logic [3:0] ss_tens;\n\n    // Synchronous reset and clock logic\n    always @(posedge clk) begin\n        if (reset) begin\n            hh <= 8'b0001_0010; // 12 in BCD\n            mm <= 8'b0000_0000; // 00 in BCD\n            ss <= 8'b0000_0000; // 00 in BCD\n            pm <= 1'b0;         // AM\n        end else if (ena) begin\n            // Seconds counter\n            if (ss == 8'b0101_1001) begin // 59 in BCD\n                ss <= 8'b0000_0000; // Reset to 00\n                // Minutes counter\n                if (mm == 8'b0101_1001) begin // 59 in BCD\n                    mm <= 8'b0000_0000; // Reset to 00\n                    // Hours counter\n                    if (hh == 8'b0001_0010) begin // 12 in BCD\n                        hh <= 8'b0000_0001; // Reset to 01\n                        pm <= ~pm; // Toggle PM\n                    end else if (hh == 8'b0000_1001) begin // 09 in BCD\n                        hh <= 8'b0001_0000; // Increment to 10\n                    end else if (hh == 8'b0001_0000) begin // 10 in BCD\n                        hh <= 8'b0001_0001; // Increment to 11\n                    end else if (hh == 8'b0001_0001) begin // 11 in BCD\n                        hh <= 8'b0001_0010; // Increment to 12\n                    end else begin\n                        hh <= hh + 1; // Increment hours\n                    end\n                end else begin\n                    if (mm[3:0] == 4'b1001) begin // Lower BCD digit is 9\n                        mm <= {mm[7:4] + 1'b1, 4'b0000}; // Increment tens place\n                    end else begin\n                        mm <= mm + 1; // Increment minutes\n                    end\n                end\n            end else begin\n                if (ss[3:0] == 4'b1001) begin // Lower BCD digit is 9\n                    ss <= {ss[7:4] + 1'b1, 4'b0000}; // Increment tens place\n                end else begin\n                    ss <= ss + 1; // Increment seconds\n                end\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}