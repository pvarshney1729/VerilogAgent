{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic in,\n    output logic done\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        IDLE        = 3'b000,\n        START       = 3'b001,\n        DATA        = 3'b010,\n        STOP        = 3'b011,\n        DONE        = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_counter; // Counter for 8 data bits\n\n    // Sequential logic for state transition\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_counter <= 3'b000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DATA) begin\n                bit_counter <= bit_counter + 1;\n            end else begin\n                bit_counter <= 3'b000;\n            end\n        end\n    end\n\n    // Combinational logic for next state and output\n    always_comb begin\n        done = 1'b0;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) // Detect start bit\n                    next_state = START;\n                else\n                    next_state = IDLE;\n            end\n            START: begin\n                next_state = DATA;\n            end\n            DATA: begin\n                if (bit_counter == 3'b111) // 8 data bits received\n                    next_state = STOP;\n                else\n                    next_state = DATA;\n            end\n            STOP: begin\n                if (in == 1'b1) begin // Verify stop bit\n                    next_state = DONE;\n                end else begin\n                    next_state = STOP; // Wait for stop bit\n                end\n            end\n            DONE: begin\n                done = 1'b1;\n                next_state = IDLE;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 84,
        "passfail": "R"
    }
}