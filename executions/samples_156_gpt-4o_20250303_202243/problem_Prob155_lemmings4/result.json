{
    "code": "module TopModule (\n    input  logic clk,               // Clock input, positive edge-triggered\n    input  logic areset,            // Asynchronous reset, active-high\n    input  logic bump_left,         // Lemming bumped on the left, 1-bit\n    input  logic bump_right,        // Lemming bumped on the right, 1-bit\n    input  logic ground,            // Indicates ground presence, 1-bit\n    input  logic dig,               // Command to dig, 1-bit\n    output logic walk_left,         // Lemming walking left, 1-bit\n    output logic walk_right,        // Lemming walking right, 1-bit\n    output logic aaah,              // Lemming falling, 1-bit\n    output logic digging            // Lemming digging, 1-bit\n);\n\n    typedef enum logic [2:0] {\n        WL = 3'b000,  // Walking Left\n        WR = 3'b001,  // Walking Right\n        F  = 3'b010,  // Falling\n        D  = 3'b011,  // Digging\n        S  = 3'b100   // Splattered\n    } state_t;\n\n    state_t state, next_state;\n    logic [4:0] fall_counter;\n\n    // State transition logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= WL;\n            fall_counter <= 5'd0;\n        end else begin\n            state <= next_state;\n            if (state == F) begin\n                if (ground == 0) \n                    fall_counter <= fall_counter + 1;\n                else \n                    fall_counter <= 5'd0;\n            end else begin\n                fall_counter <= 5'd0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (state)\n            WL: begin\n                if (ground == 0)\n                    next_state = F;\n                else if (dig && ground)\n                    next_state = D;\n                else if (bump_left)\n                    next_state = WR;\n                else\n                    next_state = WL;\n            end\n            WR: begin\n                if (ground == 0)\n                    next_state = F;\n                else if (dig && ground)\n                    next_state = D;\n                else if (bump_right)\n                    next_state = WL;\n                else\n                    next_state = WR;\n            end\n            F: begin\n                if (fall_counter >= 5'd20 && ground)\n                    next_state = S;\n                else if (ground)\n                    next_state = (walk_left) ? WL : WR;\n                else\n                    next_state = F;\n            end\n            D: begin\n                if (ground == 0)\n                    next_state = F;\n                else\n                    next_state = D;\n            end\n            S: begin\n                next_state = S;\n            end\n            default: begin\n                next_state = WL;\n            end\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left = (state == WL);\n        walk_right = (state == WR);\n        aaah = (state == F);\n        digging = (state == D);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}