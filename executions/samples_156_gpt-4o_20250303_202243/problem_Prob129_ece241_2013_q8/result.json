{
    "code": "module TopModule (\n    input  logic clk,       // Clock signal\n    input  logic aresetn,   // Active-low asynchronous reset\n    input  logic x,         // Input signal to be analyzed\n    output logic z          // Output signal, asserted when \"101\" is detected\n);\n\n    typedef enum logic [1:0] {\n        S0 = 2'b00, // Initial state, waiting for '1'\n        S1 = 2'b01, // Detected '1', waiting for '0'\n        S2 = 2'b10  // Detected '10', waiting for final '1'\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk or negedge aresetn) begin\n        if (!aresetn) begin\n            current_state <= S0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state; // Default to hold state\n        z = 1'b0; // Default output\n\n        case (current_state)\n            S0: begin\n                if (x == 1'b1) begin\n                    next_state = S1;\n                end\n            end\n            S1: begin\n                if (x == 1'b0) begin\n                    next_state = S2;\n                end\n            end\n            S2: begin\n                if (x == 1'b1) begin\n                    next_state = S1;\n                    z = 1'b1; // Sequence \"101\" detected\n                end else begin\n                    next_state = S0;\n                end\n            end\n            default: begin\n                next_state = S0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}