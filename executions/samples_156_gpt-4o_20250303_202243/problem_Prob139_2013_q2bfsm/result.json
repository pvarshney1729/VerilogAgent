{
    "code": "module TopModule (\n    input logic clk,         // Clock input, positive edge triggered\n    input logic resetn,      // Synchronous active low reset\n    input logic x,           // 1-bit input from motor\n    input logic y,           // 1-bit input from motor\n    output logic f,          // 1-bit output to motor (control)\n    output logic g           // 1-bit output to motor (control)\n);\n\n    typedef enum logic [1:0] {\n        STATE_A = 2'b00,\n        STATE_B = 2'b01,\n        STATE_C = 2'b10,\n        STATE_D = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [1:0] x_sequence_counter;\n    logic y_monitor_counter;\n\n    always_ff @(posedge clk) begin\n        if (!resetn) begin\n            current_state <= STATE_A;\n            f <= 1'b0;\n            g <= 1'b0;\n            x_sequence_counter <= 2'b00;\n            y_monitor_counter <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        f = 1'b0;\n        g = 1'b0;\n\n        case (current_state)\n            STATE_A: begin\n                if (resetn) begin\n                    next_state = STATE_B;\n                end\n            end\n\n            STATE_B: begin\n                f = 1'b1;\n                next_state = STATE_C;\n            end\n\n            STATE_C: begin\n                case (x_sequence_counter)\n                    2'b00: if (x) x_sequence_counter = 2'b01;\n                    2'b01: if (!x) x_sequence_counter = 2'b10;\n                    2'b10: if (x) begin\n                        next_state = STATE_D;\n                        g = 1'b1;\n                    end else begin\n                        x_sequence_counter = 2'b00;\n                    end\n                endcase\n            end\n\n            STATE_D: begin\n                g = 1'b1;\n                if (y) begin\n                    y_monitor_counter = 1'b0;\n                end else begin\n                    y_monitor_counter = y_monitor_counter + 1'b1;\n                    if (y_monitor_counter == 2'b10) begin\n                        g = 1'b0;\n                    end\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 357,
        "passfail": "R"
    }
}