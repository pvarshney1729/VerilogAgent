{
    "code": "module TopModule (\n    input logic clk,        // Clock signal, positive edge-triggered\n    input logic reset,      // Active-high synchronous reset signal\n    input logic in,         // Serial data input, single-bit, unsigned\n    output logic done       // Active-high signal indicating a correctly received byte\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        RECEIVE = 3'b001,\n        VERIFY_STOP = 3'b010,\n        COMPLETE = 3'b011,\n        ERROR = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] data_shift_reg;\n    logic [2:0] bit_count;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            data_shift_reg <= 8'b0;\n            bit_count <= 3'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        next_state = current_state;\n        done = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = RECEIVE;\n                    bit_count = 3'b0;\n                end\n            end\n\n            RECEIVE: begin\n                data_shift_reg = {in, data_shift_reg[7:1]};\n                bit_count = bit_count + 1;\n                if (bit_count == 3'b111) begin\n                    next_state = VERIFY_STOP;\n                end\n            end\n\n            VERIFY_STOP: begin\n                if (in == 1'b1) begin\n                    next_state = COMPLETE;\n                end else begin\n                    next_state = ERROR;\n                end\n            end\n\n            COMPLETE: begin\n                done = 1'b1;\n                next_state = IDLE;\n            end\n\n            ERROR: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end\n            end\n\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 56,
        "passfail": "R"
    }
}