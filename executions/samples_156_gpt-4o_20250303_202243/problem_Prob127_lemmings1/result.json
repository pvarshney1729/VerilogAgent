{
    "code": "```verilog\nmodule TopModule (\n    input  logic clk,\n    input  logic areset,\n    input  logic bump_left,\n    input  logic bump_right,\n    output logic walk_left,\n    output logic walk_right\n);\n\n    typedef enum logic [1:0] {\n        WALK_LEFT  = 2'b01,\n        WALK_RIGHT = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            WALK_LEFT: begin\n                if (bump_left || (bump_left && bump_right))\n                    next_state = WALK_RIGHT;\n                else\n                    next_state = WALK_LEFT;\n            end\n            WALK_RIGHT: begin\n                if (bump_right || (bump_left && bump_right))\n                    next_state = WALK_LEFT;\n                else\n                    next_state = WALK_RIGHT;\n            end\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    // State register\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= WALK_LEFT;\n        else\n            current_state <= next_state;\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left  = (current_state == WALK_LEFT);\n        walk_right = (current_state == WALK_RIGHT);\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}