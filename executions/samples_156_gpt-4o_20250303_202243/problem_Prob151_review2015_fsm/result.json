{
    "code": "module TopModule(\n    input logic clk,              // Clock signal, positive edge-triggered\n    input logic reset,            // Synchronous active-high reset\n    input logic data,             // Serial data input, 1-bit\n    input logic done_counting,    // Signal indicating counting completion, 1-bit\n    input logic ack,              // Acknowledgment signal from user, 1-bit\n    output logic shift_ena,       // Enable signal for shifting, 1-bit\n    output logic counting,        // Signal indicating counting is in progress, 1-bit\n    output logic done             // Signal indicating timer completion, 1-bit\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        SHIFT = 2'b01,\n        COUNTING = 2'b10,\n        DONE = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] sequence;\n    logic [1:0] shift_counter;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            sequence <= 4'b0000;\n            shift_counter <= 2'b00;\n        end else begin\n            current_state <= next_state;\n            if (current_state == IDLE) begin\n                sequence <= {sequence[2:0], data};\n            end else if (current_state == SHIFT) begin\n                shift_counter <= shift_counter + 1;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        shift_ena = 1'b0;\n        counting = 1'b0;\n        done = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (sequence == 4'b1101) begin\n                    next_state = SHIFT;\n                end\n            end\n\n            SHIFT: begin\n                shift_ena = 1'b1;\n                if (shift_counter == 2'b11) begin\n                    next_state = COUNTING;\n                end\n            end\n\n            COUNTING: begin\n                counting = 1'b1;\n                if (done_counting) begin\n                    next_state = DONE;\n                end\n            end\n\n            DONE: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}