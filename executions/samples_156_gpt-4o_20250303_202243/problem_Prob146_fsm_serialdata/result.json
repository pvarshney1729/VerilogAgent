{
    "code": "```verilog\nmodule TopModule (\n    input logic clk,\n    input logic in,\n    input logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        RECEIVE = 2'b01,\n        VERIFY_STOP = 2'b10,\n        DONE = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n    logic [7:0] shift_reg;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_byte <= 8'b00000000;\n            done <= 1'b0;\n            bit_count <= 3'b000;\n            shift_reg <= 8'b00000000;\n        end else begin\n            current_state <= next_state;\n            case (current_state)\n                IDLE: begin\n                    done <= 1'b0;\n                    if (in == 1'b0) begin // Start bit detected\n                        next_state <= RECEIVE;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                RECEIVE: begin\n                    shift_reg <= {in, shift_reg[7:1]};\n                    bit_count <= bit_count + 1;\n                    if (bit_count == 3'b111) begin\n                        next_state <= VERIFY_STOP;\n                    end else begin\n                        next_state <= RECEIVE;\n                    end\n                end\n                VERIFY_STOP: begin\n                    if (in == 1'b1) begin // Stop bit detected\n                        out_byte <= shift_reg;\n                        done <= 1'b1;\n                        next_state <= DONE;\n                    end else begin\n                        next_state <= VERIFY_STOP;\n                    end\n                end\n                DONE: begin\n                    done <= 1'b0;\n                    next_state <= IDLE;\n                end\n                default: next_state <= IDLE;\n            endcase\n        end\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}