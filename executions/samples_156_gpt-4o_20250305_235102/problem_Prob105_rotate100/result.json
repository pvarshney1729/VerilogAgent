{
    "code": "module TopModule (\n    input logic clk,                 // System clock signal\n    input logic load,                // Active-high synchronous load signal\n    input logic [1:0] ena,           // 2-bit synchronous enable signal for rotation\n    input logic [99:0] data,         // 100-bit input data vector\n    output logic [99:0] q            // 100-bit output data vector\n);\n\n    always_ff @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else begin\n            case (ena)\n                2'b01: q <= {q[0], q[99:1]};  // Rotate right by one bit\n                2'b10: q <= {q[98:0], q[99]}; // Rotate left by one bit\n                default: q <= q;              // Maintain current state\n            endcase\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations": [
        {
            "iteration": 0,
            "code": "module TopModule (\n    input logic clk,                 // System clock signal\n    input logic load,                // Active-high synchronous load signal\n    input logic [1:0] ena,           // 2-bit synchronous enable signal for rotation\n    input logic [99:0] data,         // 100-bit input data vector\n    output logic [99:0] q            // 100-bit output data vector\n);\n\n    always_ff @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else begin\n            case (ena)\n                2'b01: q <= {q[0], q[99:1]};  // Rotate right by one bit\n                2'b10: q <= {q[98:0], q[99]}; // Rotate left by one bit\n                default: q <= q;              // Maintain current state\n            endcase\n        end\n    end\n\nendmodule",
            "issues": []
        }
    ],
    "refinement_count": 0,
    "remaining_issues": [],
    "testbench_results": {}
}