{
    "code": "module TopModule (\n    input  logic        clk,      // Clock signal\n    input  logic        reset,    // Active-high synchronous reset\n    input  logic [2:0]  s,        // 3-bit water level sensor input, s[2] is MSB\n    output logic        fr2,      // Output control for flow rate level 2\n    output logic        fr1,      // Output control for flow rate level 1\n    output logic        fr0,      // Output control for flow rate level 0\n    output logic        dfr       // Output control for supplemental flow rate\n);\n\n    logic [2:0] prev_s; // Previous state of sensor input\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            fr2 <= 1'b1;\n            fr1 <= 1'b1;\n            fr0 <= 1'b1;\n            dfr <= 1'b1;\n            prev_s <= 3'b000;\n        end else begin\n            case (s)\n                3'b111: begin\n                    fr2 <= 1'b0;\n                    fr1 <= 1'b0;\n                    fr0 <= 1'b0;\n                    dfr <= 1'b0;\n                end\n                3'b011: begin\n                    fr2 <= 1'b0;\n                    fr1 <= 1'b0;\n                    fr0 <= 1'b1;\n                    dfr <= 1'b0;\n                end\n                3'b001: begin\n                    fr2 <= 1'b0;\n                    fr1 <= 1'b1;\n                    fr0 <= 1'b1;\n                    dfr <= 1'b0;\n                end\n                3'b000: begin\n                    fr2 <= 1'b1;\n                    fr1 <= 1'b1;\n                    fr0 <= 1'b1;\n                    dfr <= (prev_s != 3'b000);\n                end\n                default: begin\n                    fr2 <= 1'b0;\n                    fr1 <= 1'b0;\n                    fr0 <= 1'b0;\n                    dfr <= 1'b0;\n                end\n            endcase\n            prev_s <= s;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 1080,
        "passfail": "R"
    },
    "iterations": [
        {
            "iteration": 0,
            "code": "module TopModule (\n    input  logic        clk,      // Clock signal\n    input  logic        reset,    // Active-high synchronous reset\n    input  logic [2:0]  s,        // 3-bit water level sensor input, s[2] is MSB\n    output logic        fr2,      // Output control for flow rate level 2\n    output logic        fr1,      // Output control for flow rate level 1\n    output logic        fr0,      // Output control for flow rate level 0\n    output logic        dfr       // Output control for supplemental flow rate\n);\n\n    logic [2:0] prev_s; // Previous state of sensor input\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            fr2 <= 1'b1;\n            fr1 <= 1'b1;\n            fr0 <= 1'b1;\n            dfr <= 1'b1;\n            prev_s <= 3'b000;\n        end else begin\n            case (s)\n                3'b111: begin\n                    fr2 <= 1'b0;\n                    fr1 <= 1'b0;\n                    fr0 <= 1'b0;\n                    dfr <= 1'b0;\n                end\n                3'b011: begin\n                    fr2 <= 1'b0;\n                    fr1 <= 1'b0;\n                    fr0 <= 1'b1;\n                    dfr <= 1'b0;\n                end\n                3'b001: begin\n                    fr2 <= 1'b0;\n                    fr1 <= 1'b1;\n                    fr0 <= 1'b1;\n                    dfr <= 1'b0;\n                end\n                3'b000: begin\n                    fr2 <= 1'b1;\n                    fr1 <= 1'b1;\n                    fr0 <= 1'b1;\n                    dfr <= (prev_s != 3'b000);\n                end\n                default: begin\n                    fr2 <= 1'b0;\n                    fr1 <= 1'b0;\n                    fr0 <= 1'b0;\n                    dfr <= 1'b0;\n                end\n            endcase\n            prev_s <= s;\n        end\n    end\n\nendmodule",
            "issues": []
        }
    ],
    "refinement_count": 0,
    "remaining_issues": [],
    "testbench_results": {}
}