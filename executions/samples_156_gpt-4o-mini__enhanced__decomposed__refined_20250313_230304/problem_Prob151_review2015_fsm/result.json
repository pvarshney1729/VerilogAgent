{
    "code": "[BEGIN]\n```verilog\nmodule TopModule (\n    input logic clk,          \n    input logic reset,        \n    input logic [3:0] data,   \n    input logic done_counting, \n    input logic ack,          \n    output logic shift_ena,    \n    output logic counting,      \n    output logic done          \n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        SEARCHING = 2'b00,\n        SHIFTING  = 2'b01,\n        COUNTING  = 2'b10,\n        DONE      = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] shift_counter;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= SEARCHING;\n            shift_ena <= 1'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n            shift_counter <= 3'b000;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        // Default outputs\n        shift_ena = 1'b0;\n        counting = 1'b0;\n        done = 1'b0;\n        next_state = current_state; // Default to hold state\n\n        case (current_state)\n            SEARCHING: begin\n                if (data == 4'b1101) begin\n                    next_state = SHIFTING;\n                end\n            end\n            \n            SHIFTING: begin\n                shift_ena = 1'b1;\n                if (shift_counter < 3) begin\n                    shift_counter = shift_counter + 1;\n                    next_state = SHIFTING;\n                end else begin\n                    shift_counter = 3'b000;\n                    next_state = COUNTING;\n                end\n            end\n            \n            COUNTING: begin\n                counting = 1'b1;\n                if (done_counting) begin\n                    next_state = DONE;\n                end\n            end\n            \n            DONE: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = SEARCHING;\n                end\n            end\n            \n            default: next_state = SEARCHING;\n        endcase\n    end\nendmodule\n```\n[DONE]",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    },
    "iterations": [
        {
            "iteration": 0,
            "code": "module TopModule (\n    input wire clk,          \n    input wire reset,        \n    input wire [3:0] data,   \n    input wire done_counting, \n    input wire ack,          \n    output reg shift_ena,    \n    output reg counting,      \n    output reg done          \n);\n\n    // State encoding\n    typedef enum reg [1:0] {\n        SEARCHING = 2'b00,\n        SHIFTING  = 2'b01,\n        COUNTING  = 2'b10,\n        DONE      = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    reg [2:0] shift_counter;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= SEARCHING;\n            shift_ena <= 0;\n            counting <= 0;\n            done <= 0;\n            shift_counter <= 0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @* begin\n        // Default outputs\n        shift_ena = 0;\n        counting = 0;\n        done = 0;\n        next_state = current_state; // Default to hold state\n\n        case (current_state)\n            SEARCHING: begin\n                if (data == 4'b1101) begin\n                    next_state = SHIFTING;\n                end\n            end\n            \n            SHIFTING: begin\n                shift_ena = 1;\n                if (shift_counter < 3) begin\n                    shift_counter = shift_counter + 1;\n                    next_state = SHIFTING;\n                end else begin\n                    shift_counter = 0;\n                    next_state = COUNTING;\n                end\n            end\n            \n            COUNTING: begin\n                counting = 1;\n                if (done_counting) begin\n                    next_state = DONE;\n                end\n            end\n            \n            DONE: begin\n                done = 1;\n                if (ack) begin\n                    next_state = SEARCHING;\n                end\n            end\n            \n            default: next_state = SEARCHING;\n        endcase\n    end\nendmodule\n\n// VERILOG-EVAL: response did not use [BEGIN]/[DONE] correctly",
            "issues": [
                "Missing module definition",
                "syntax_error: syntax error"
            ]
        },
        {
            "iteration": 1,
            "code": "[BEGIN]\n```verilog\nmodule TopModule (\n    input logic clk,          \n    input logic reset,        \n    input logic [3:0] data,   \n    input logic done_counting, \n    input logic ack,          \n    output logic shift_ena,    \n    output logic counting,      \n    output logic done          \n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        SEARCHING = 2'b00,\n        SHIFTING  = 2'b01,\n        COUNTING  = 2'b10,\n        DONE      = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] shift_counter;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= SEARCHING;\n            shift_ena <= 1'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n            shift_counter <= 3'b000;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        // Default outputs\n        shift_ena = 1'b0;\n        counting = 1'b0;\n        done = 1'b0;\n        next_state = current_state; // Default to hold state\n\n        case (current_state)\n            SEARCHING: begin\n                if (data == 4'b1101) begin\n                    next_state = SHIFTING;\n                end\n            end\n            \n            SHIFTING: begin\n                shift_ena = 1'b1;\n                if (shift_counter < 3) begin\n                    shift_counter = shift_counter + 1;\n                    next_state = SHIFTING;\n                end else begin\n                    shift_counter = 3'b000;\n                    next_state = COUNTING;\n                end\n            end\n            \n            COUNTING: begin\n                counting = 1'b1;\n                if (done_counting) begin\n                    next_state = DONE;\n                end\n            end\n            \n            DONE: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = SEARCHING;\n                end\n            end\n            \n            default: next_state = SEARCHING;\n        endcase\n    end\nendmodule\n```\n[DONE]",
            "issues": [
                "Testbench error: Error running simulation: Command '['vvp', 'sim.out']' timed out after 5 seconds"
            ]
        },
        {
            "iteration": 2,
            "code": "[BEGIN]\n```verilog\nmodule TopModule (\n    input logic clk,          \n    input logic reset,        \n    input logic [3:0] data,   \n    input logic done_counting, \n    input logic ack,          \n    output logic shift_ena,    \n    output logic counting,      \n    output logic done          \n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        SEARCHING = 2'b00,\n        SHIFTING  = 2'b01,\n        COUNTING  = 2'b10,\n        DONE      = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] shift_counter;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= SEARCHING;\n            shift_ena <= 1'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n            shift_counter <= 3'b000;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        // Default outputs\n        shift_ena = 1'b0;\n        counting = 1'b0;\n        done = 1'b0;\n        next_state = current_state; // Default to hold state\n\n        case (current_state)\n            SEARCHING: begin\n                if (data == 4'b1101) begin\n                    next_state = SHIFTING;\n                end\n            end\n            \n            SHIFTING: begin\n                shift_ena = 1'b1;\n                if (shift_counter < 3) begin\n                    shift_counter = shift_counter + 1;\n                    next_state = SHIFTING;\n                end else begin\n                    shift_counter = 3'b000;\n                    next_state = COUNTING;\n                end\n            end\n            \n            COUNTING: begin\n                counting = 1'b1;\n                if (done_counting) begin\n                    next_state = DONE;\n                end\n            end\n            \n            DONE: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = SEARCHING;\n                end\n            end\n            \n            default: next_state = SEARCHING;\n        endcase\n    end\nendmodule\n```\n[DONE]",
            "issues": []
        }
    ],
    "refinement_count": 2,
    "remaining_issues": [],
    "testbench_results": {
        "passed": false,
        "output": "",
        "testbench": "`timescale 1ns/1ps\n\nmodule TopModule_tb;\n\n    logic  clk;\n    logic  reset;\n    logic [3:0] data;\n    logic  done_counting;\n    logic  ack;\n    logic  shift_ena;\n    logic  counting;\n    logic  done;\n\n    // Stats for tracking errors\n      int errors;\n    // Instantiate the Device Under Test (DUT)\n    TopModule dut (\n        .clk(clk),\n        .reset(reset),\n        .data(data),\n        .done_counting(done_counting),\n        .ack(ack),\n        .shift_ena(shift_ena),\n        .counting(counting),\n        .done(done)\n    );\n\n    // Clock generator\n    localparam CLK_PERIOD = 10;\n    initial begin\n        clk = 1'b0;\n        forever #(CLK_PERIOD/2) clk = ~clk;\n    end\n\n    // Reset generator\n    initial begin\n        reset = 1'b1;\n        #(CLK_PERIOD * 2);\n        reset = 1'b0;\n    end\n\n    // Test stimulus\n    initial begin\n        // Initialize inputs\n        data = 4'b0;\n        done_counting = 1'b0;\n        ack = 1'b0;\n\n        // Wait for reset\n        @(negedge reset);\n        #(CLK_PERIOD * 2);\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 0;\n        ack = 0;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 0;\n        ack = 0;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 1) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 0;\n        ack = 0;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 1) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 0;\n        ack = 0;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 1) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 1;\n        ack = 0;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 1) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 1;\n        ack = 1;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 0000;\n        done_counting = 0;\n        ack = 0;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 0000);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 0000);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 0000);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 0;\n        ack = 1;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 1;\n        ack = 0;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 1) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 1;\n        ack = 0;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 1) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 1;\n        ack = 1;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 1;\n        ack = 1;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1100;\n        done_counting = 0;\n        ack = 0;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1100);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1100);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1100);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1110;\n        done_counting = 0;\n        ack = 0;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1110);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1110);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1110);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1111;\n        done_counting = 0;\n        ack = 0;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1111);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1111);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1111);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 0);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 1;\n        ack = 1;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 1);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n\n        // Apply input stimulus\n        data = 1101;\n        done_counting = 0;\n        ack = 1;\n\n        // Wait for output to stabilize\n        #(CLK_PERIOD * 1);\n\n        // Check output\n        if (shift_ena !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"shift_ena\", shift_ena);\n            errors++;\n        end\n        if (counting !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"counting\", counting);\n            errors++;\n        end\n        if (done !== 0) begin\n            $display(\"Time %0t: Inputs\", $time);\n            $display(\"            %s = %h\", \"data\", 1101);\n            $display(\"            %s = %h\", \"done_counting\", 0);\n            $display(\"            %s = %h\", \"ack\", 1);\n            $display(\"Time %0t: Output %s = %h\", $time, \"done\", done);\n            errors++;\n        end\n    end\n\n    // Final reporting\n    final begin\n        $display(\"Simulation finished at %0d ps\", $time);\n        if (errors == 0)\n            $display(\"TEST PASSED\");\n        else\n            $display(\"TEST FAILED with %0d errors\", errors);\n    end\n\nendmodule\n"
    }
}