{
    "code": "module serial_receiver (\n    input logic clk,\n    input logic in,\n    input logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        RECEIVING,\n        STOP_BIT_CHECK,\n        OUTPUT\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] bit_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_byte <= 8'b00000000;\n            done <= 1'b0;\n            bit_count <= 4'b0000;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (current_state == RECEIVING) begin\n            out_byte[bit_count] <= in;\n            bit_count <= bit_count + 1;\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        done = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin // Start bit detected\n                    next_state = RECEIVING;\n                    bit_count = 4'b0000;\n                end\n            end\n            RECEIVING: begin\n                if (bit_count == 4'b0111) begin // 8 bits received\n                    next_state = STOP_BIT_CHECK;\n                end\n            end\n            STOP_BIT_CHECK: begin\n                if (in == 1'b1) begin // Stop bit detected\n                    next_state = OUTPUT;\n                end else begin\n                    next_state = IDLE; // Error, return to idle\n                end\n            end\n            OUTPUT: begin\n                done = 1'b1; // Assert done for one cycle\n                next_state = IDLE; // Return to idle after output\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 1
}