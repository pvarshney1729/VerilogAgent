{
    "code": "module TopModule (\n    input logic clk,          // Clock signal, positive edge triggered\n    input logic reset,        // Active high synchronous reset\n    input logic in,           // Input bit stream\n    output logic disc,        // Output signal to discard a bit\n    output logic flag,        // Output signal to indicate a flag (frame boundary)\n    output logic err          // Output signal to indicate an error (7 or more consecutive 1s)\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        ONE_1 = 3'b001,\n        TWO_1 = 3'b010,\n        THREE_1 = 3'b011,\n        FOUR_1 = 3'b100,\n        FIVE_1 = 3'b101,\n        SIX_1 = 3'b110,\n        SEVEN_1 = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            disc <= 1'b0;\n            flag <= 1'b0;\n            err <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            disc <= 1'b0;\n            flag <= 1'b0;\n            err <= 1'b0;\n        end else begin\n            case (current_state)\n                IDLE: begin\n                    if (in) begin\n                        next_state <= ONE_1;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                ONE_1: begin\n                    if (in) begin\n                        next_state <= TWO_1;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                TWO_1: begin\n                    if (in) begin\n                        next_state <= THREE_1;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                THREE_1: begin\n                    if (in) begin\n                        next_state <= FOUR_1;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                FOUR_1: begin\n                    if (in) begin\n                        next_state <= FIVE_1;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                FIVE_1: begin\n                    if (in) begin\n                        next_state <= SIX_1;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                SIX_1: begin\n                    if (in) begin\n                        next_state <= SEVEN_1;\n                        flag <= 1'b1;\n                        err <= 1'b0;\n                    end else begin\n                        next_state <= IDLE;\n                        disc <= 1'b1;\n                    end\n                end\n                SEVEN_1: begin\n                    if (in) begin\n                        err <= 1'b1;\n                    end else begin\n                        next_state <= IDLE;\n                        disc <= 1'b1;\n                    end\n                end\n                default: next_state <= IDLE;\n            endcase\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (current_state == SIX_1) begin\n            disc <= 1'b0; // Clear disc after one cycle\n        end\n        if (current_state == SEVEN_1) begin\n            err <= 1'b0; // Clear err after one cycle\n        end\n        if (current_state == IDLE && in) begin\n            flag <= 1'b0; // Clear flag after one cycle\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 476,
        "passfail": "R"
    },
    "iterations_used": 1
}