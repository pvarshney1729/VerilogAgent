{
    "code": "module obstacle_avoider (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    typedef enum logic [2:0] {\n        S_WALK_LEFT,\n        S_WALK_RIGHT,\n        S_FALLING,\n        S_DIGGING,\n        S_SPLATTERED\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [4:0] fall_counter; // 5 bits to count up to 20\n\n    // State transition logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= S_WALK_LEFT;\n            fall_counter <= 5'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == S_FALLING) begin\n                fall_counter <= fall_counter + 1;\n            end else begin\n                fall_counter <= 5'b0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            S_WALK_LEFT: begin\n                if (bump_left) begin\n                    next_state = S_WALK_RIGHT;\n                end else if (!ground) begin\n                    next_state = S_FALLING;\n                end else if (dig && ground) begin\n                    next_state = S_DIGGING;\n                end\n            end\n            S_WALK_RIGHT: begin\n                if (bump_right) begin\n                    next_state = S_WALK_LEFT;\n                end else if (!ground) begin\n                    next_state = S_FALLING;\n                end else if (dig && ground) begin\n                    next_state = S_DIGGING;\n                end\n            end\n            S_FALLING: begin\n                if (ground && (fall_counter > 5'd20)) begin\n                    next_state = S_SPLATTERED;\n                end\n            end\n            S_DIGGING: begin\n                if (!ground) begin\n                    next_state = S_FALLING;\n                end\n            end\n            S_SPLATTERED: begin\n                // Remain in splattered state\n            end\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (current_state)\n            S_WALK_LEFT: begin\n                walk_left = 1'b1;\n            end\n            S_WALK_RIGHT: begin\n                walk_right = 1'b1;\n            end\n            S_FALLING: begin\n                aaah = 1'b1;\n            end\n            S_DIGGING: begin\n                digging = 1'b1;\n            end\n            S_SPLATTERED: begin\n                // All outputs are 0\n            end\n        endcase\n    end\n\nendmodule\n\n// VERILOG-EVAL: response did not use [BEGIN]/[DONE] correctly",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 1
}