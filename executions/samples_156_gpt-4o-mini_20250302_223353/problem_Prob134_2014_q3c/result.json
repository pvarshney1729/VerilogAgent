{
    "code": "module TopModule (\n    input logic clk,          // Clock input for synchronous operation\n    input logic rst_n,        // Active-low asynchronous reset\n    input logic x,            // Control input\n    input logic [2:0] y,      // Present state input, 3 bits wide\n    output logic Y0,           // Next state output bit 0, derived from Y[0]\n    output logic z             // Output dependent on present state and input\n);\n\n    logic [2:0] next_state; // Next state variable\n\n    always @(*) begin\n        case (y)\n            3'b000: begin\n                next_state = (x == 1'b0) ? 3'b000 : 3'b001;\n                z = 1'b0;\n            end\n            3'b001: begin\n                next_state = (x == 1'b0) ? 3'b001 : 3'b100;\n                z = 1'b0;\n            end\n            3'b010: begin\n                next_state = (x == 1'b0) ? 3'b010 : 3'b001;\n                z = 1'b0;\n            end\n            3'b011: begin\n                next_state = (x == 1'b0) ? 3'b001 : 3'b010;\n                z = 1'b1;\n            end\n            3'b100: begin\n                next_state = (x == 1'b0) ? 3'b011 : 3'b100;\n                z = 1'b1;\n            end\n            default: begin\n                next_state = 3'b000; // Default to reset state on undefined states\n                z = 1'b0;\n            end\n        endcase\n    end\n\n    always @(posedge clk) begin\n        if (!rst_n) begin\n            Y0 <= 1'b0;          // Ensure Y0 is consistent with reset state\n            z <= 1'b0;           // Ensure z is consistent with reset state\n        end else begin\n            Y0 <= next_state[0]; // Output Y0 as the LSB of the next state\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 58,
        "passfail": "R"
    },
    "iterations_used": 2
}