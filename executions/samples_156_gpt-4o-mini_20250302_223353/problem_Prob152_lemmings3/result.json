{
    "code": "module lemming_controller (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    typedef enum logic [1:0] {\n        STATE_WALK_LEFT,\n        STATE_WALK_RIGHT,\n        STATE_FALLING,\n        STATE_DIGGING\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Asynchronous reset to initial state\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= STATE_WALK_LEFT;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Output logic based on current state\n    always_ff @(current_state) begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (current_state)\n            STATE_WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = STATE_FALLING;\n                    aaah = 1'b1;\n                end else if (dig && ground) begin\n                    next_state = STATE_DIGGING;\n                    digging = 1'b1;\n                end else if (bump_left) begin\n                    next_state = STATE_WALK_RIGHT;\n                    walk_right = 1'b1;\n                end else begin\n                    next_state = STATE_WALK_LEFT;\n                    walk_left = 1'b1;\n                end\n            end\n\n            STATE_WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = STATE_FALLING;\n                    aaah = 1'b1;\n                end else if (dig && ground) begin\n                    next_state = STATE_DIGGING;\n                    digging = 1'b1;\n                end else if (bump_right) begin\n                    next_state = STATE_WALK_LEFT;\n                    walk_left = 1'b1;\n                end else begin\n                    next_state = STATE_WALK_RIGHT;\n                    walk_right = 1'b1;\n                end\n            end\n\n            STATE_FALLING: begin\n                if (ground) begin\n                    if (current_state == STATE_WALK_LEFT) begin\n                        next_state = STATE_WALK_LEFT;\n                        walk_left = 1'b1;\n                    end else begin\n                        next_state = STATE_WALK_RIGHT;\n                        walk_right = 1'b1;\n                    end\n                end else begin\n                    next_state = STATE_FALLING;\n                    aaah = 1'b1;\n                end\n            end\n\n            STATE_DIGGING: begin\n                if (!ground) begin\n                    next_state = STATE_FALLING;\n                    aaah = 1'b1;\n                end else begin\n                    next_state = STATE_DIGGING;\n                    digging = 1'b1;\n                end\n            end\n\n            default: begin\n                next_state = STATE_WALK_LEFT;\n            end\n        endcase\n    end\n\nendmodule\n\n// VERILOG-EVAL: response did not use [BEGIN]/[DONE] correctly",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 1
}