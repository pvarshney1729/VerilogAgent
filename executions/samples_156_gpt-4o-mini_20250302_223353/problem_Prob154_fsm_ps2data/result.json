{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic [7:0] in,\n    output logic [23:0] out_bytes,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        BYTE_1 = 2'b01,\n        BYTE_2 = 2'b10,\n        BYTE_3 = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [23:0] collected_bytes;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            collected_bytes <= 24'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == BYTE_3) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            collected_bytes <= 24'b0;\n        end else begin\n            case (current_state)\n                BYTE_1: collected_bytes[23:16] <= in;\n                BYTE_2: collected_bytes[15:8] <= in;\n                BYTE_3: collected_bytes[7:0] <= in;\n                default: collected_bytes <= collected_bytes;\n            endcase\n        end\n    end\n\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (in[3] == 1'b1) begin\n                    next_state = BYTE_1;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            BYTE_1: next_state = BYTE_2;\n            BYTE_2: next_state = BYTE_3;\n            BYTE_3: next_state = IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    assign out_bytes = collected_bytes;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    },
    "iterations_used": 3
}