{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic ack,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        DETECT,\n        COUNT,\n        DONE_STATE\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay;\n    logic [9:0] cycle_count; // To count up to 1000 cycles\n    logic delay_latched;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            count <= 4'b0000;\n            counting <= 1'b0;\n            done <= 1'b0;\n            cycle_count <= 10'b0000000000;\n            delay_latched <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == COUNT) begin\n                if (cycle_count == 10'd999) begin\n                    cycle_count <= 10'b0000000000;\n                    if (count > 4'b0000) begin\n                        count <= count - 1'b1;\n                    end\n                end else begin\n                    cycle_count <= cycle_count + 1'b1;\n                end\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            delay_latched <= 1'b0;\n        end else if (current_state == DETECT && delay_latched) begin\n            delay <= {delay[2:0], data};\n            if (delay == 4'b1101) begin\n                delay_latched <= 1'b1;\n            end\n        end else if (current_state == COUNT) begin\n            if (count == 4'b0000) begin\n                done <= 1'b1;\n            end\n        end else if (ack && done) begin\n            done <= 1'b0;\n            delay_latched <= 1'b0;\n        end\n    end\n\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (data == 1'b1) begin\n                    next_state = DETECT;\n                end else begin\n                    next_state = IDLE;\n                end\n                counting = 1'b0;\n            end\n            DETECT: begin\n                if (delay_latched) begin\n                    next_state = COUNT;\n                    count = delay + 1'b1;\n                    counting = 1'b1;\n                end else begin\n                    next_state = DETECT;\n                end\n            end\n            COUNT: begin\n                if (count == 4'b0000) begin\n                    next_state = DONE_STATE;\n                end else begin\n                    next_state = COUNT;\n                end\n                counting = 1'b1;\n            end\n            DONE_STATE: begin\n                if (ack) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = DONE_STATE;\n                end\n                counting = 1'b0;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    },
    "iterations_used": 1
}