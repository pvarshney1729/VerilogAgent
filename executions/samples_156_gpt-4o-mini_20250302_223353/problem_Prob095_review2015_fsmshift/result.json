{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    output logic shift_ena\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        DETECT,\n        ENABLE\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [1:0] counter;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            counter <= 2'b00;\n            shift_ena <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == ENABLE) begin\n                if (counter < 2'b11) begin\n                    counter <= counter + 1;\n                    shift_ena <= 1'b1; // Keep shift_ena high during ENABLE state\n                end else begin\n                    shift_ena <= 1'b0; // De-assert shift_ena after 4 cycles\n                end\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            next_state <= IDLE; // Reset state\n        end else begin\n            case (current_state)\n                IDLE: begin\n                    if (/* pattern detected */) begin\n                        next_state <= ENABLE;\n                        counter <= 2'b00;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                ENABLE: begin\n                    if (counter < 2'b11) begin\n                        next_state <= ENABLE;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                default: next_state <= IDLE;\n            endcase\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    },
    "iterations_used": 3
}