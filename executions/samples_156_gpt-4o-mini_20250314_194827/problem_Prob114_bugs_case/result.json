{
    "code": "module TopModule (\n    input logic [7:0] code,\n    input logic clk,\n    input logic reset,\n    output logic [3:0] out,\n    output logic valid\n);\n\n    always @(*) begin\n        if (reset) begin\n            out = 4'b0000;\n            valid = 1'b0;\n        end else begin\n            case (code)\n                8'b00000000: begin out = 4'b0000; valid = 1'b1; end\n                8'b00000001: begin out = 4'b0001; valid = 1'b1; end\n                8'b00000010: begin out = 4'b0010; valid = 1'b1; end\n                8'b00000011: begin out = 4'b0011; valid = 1'b1; end\n                8'b00000100: begin out = 4'b0100; valid = 1'b1; end\n                8'b00000101: begin out = 4'b0101; valid = 1'b1; end\n                8'b00000110: begin out = 4'b0110; valid = 1'b1; end\n                8'b00000111: begin out = 4'b0111; valid = 1'b1; end\n                8'b00001000: begin out = 4'b1000; valid = 1'b1; end\n                8'b00001001: begin out = 4'b1001; valid = 1'b1; end\n                8'b00001010: begin out = 4'b1010; valid = 1'b1; end\n                8'b00001011: begin out = 4'b1011; valid = 1'b1; end\n                8'b00001100: begin out = 4'b1100; valid = 1'b1; end\n                8'b00001101: begin out = 4'b1101; valid = 1'b1; end\n                8'b00001110: begin out = 4'b1110; valid = 1'b1; end\n                8'b00001111: begin out = 4'b1111; valid = 1'b1; end\n                default: begin out = 4'b0000; valid = 1'b0; end\n            endcase\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 136,
        "passfail": "R"
    },
    "iterations_used": 3
}