{
    "code": "module fsm_example (\n    input logic clk,\n    input logic reset,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        COUNT = 2'b01,\n        DONE = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] counter;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            counter <= 4'b0000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == COUNT) begin\n                counter <= counter + 1'b1;\n            end\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                next_state = COUNT;\n                done = 1'b0;\n            end\n            COUNT: begin\n                if (counter == 4'b1111) begin\n                    next_state = DONE;\n                end else begin\n                    next_state = COUNT;\n                end\n                done = 1'b0;\n            end\n            DONE: begin\n                next_state = IDLE;\n                done = 1'b1;\n            end\n            default: begin\n                next_state = IDLE;\n                done = 1'b0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}