{
    "code": "module serial_receiver (\n    input logic clk,\n    input logic reset,\n    input logic serial_in,\n    output logic [7:0] data_out,\n    output logic data_ready\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        RECEIVING,\n        STOP_BIT,\n        VALIDATE\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] bit_count;\n    logic [7:0] shift_reg;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 4'b0;\n            shift_reg <= 8'b0;\n            data_ready <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                if (serial_in == 1'b0) // Start bit detected\n                    next_state = RECEIVING;\n                else\n                    next_state = IDLE;\n            end\n            RECEIVING: begin\n                if (bit_count == 4'd7)\n                    next_state = STOP_BIT;\n                else\n                    next_state = RECEIVING;\n            end\n            STOP_BIT: begin\n                next_state = VALIDATE;\n            end\n            VALIDATE: begin\n                next_state = IDLE; // Go back to IDLE after validation\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Data reception and bit counting\n    always @(posedge clk) begin\n        if (current_state == RECEIVING) begin\n            shift_reg <= {serial_in, shift_reg[7:1]};\n            bit_count <= bit_count + 4'b1;\n        end else if (current_state == STOP_BIT) begin\n            // Check stop bit\n            if (serial_in == 1'b1) begin\n                data_ready <= 1'b1;\n                data_out <= shift_reg;\n            end else begin\n                data_ready <= 1'b0; // Invalid stop bit\n            end\n        end else if (current_state == IDLE) begin\n            bit_count <= 4'b0;\n            data_ready <= 1'b0;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}