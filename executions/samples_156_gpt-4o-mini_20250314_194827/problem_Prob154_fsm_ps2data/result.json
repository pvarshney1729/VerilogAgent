{
    "code": "module fsm_capture_bytes (\n    input logic clk,\n    input logic reset,\n    input logic [7:0] in,\n    output logic [23:0] out_bytes,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        CAPTURE,\n        DONE_STATE\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [23:0] byte_buffer;\n    logic [1:0] byte_count;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            byte_buffer <= 24'b0;\n            byte_count <= 2'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == CAPTURE) begin\n                byte_buffer <= {byte_buffer[15:0], in};\n                byte_count <= byte_count + 2'b1;\n            end\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                if (byte_count < 2'b11) begin\n                    next_state = CAPTURE;\n                end else begin\n                    next_state = DONE_STATE;\n                end\n            end\n            CAPTURE: begin\n                if (byte_count == 2'b10) begin\n                    next_state = DONE_STATE;\n                end else begin\n                    next_state = CAPTURE;\n                end\n            end\n            DONE_STATE: begin\n                next_state = IDLE;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    assign out_bytes = (current_state == DONE_STATE) ? byte_buffer : 24'b0;\n    assign done = (current_state == DONE_STATE);\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}