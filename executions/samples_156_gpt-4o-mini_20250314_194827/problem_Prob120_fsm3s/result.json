{
    "code": "module fsm (\n    input logic clk,\n    input logic rst_n,\n    input logic in,\n    output logic out\n);\n\n    typedef enum logic [1:0] {\n        S0 = 2'b00,\n        S1 = 2'b01,\n        S2 = 2'b10,\n        S3 = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (!rst_n) begin\n            current_state <= S0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            S0: next_state = (in) ? S1 : S0;\n            S1: next_state = (in) ? S2 : S0;\n            S2: next_state = (in) ? S3 : S0;\n            S3: next_state = (in) ? S3 : S0;\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic\n    assign out = (current_state == S3);\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}