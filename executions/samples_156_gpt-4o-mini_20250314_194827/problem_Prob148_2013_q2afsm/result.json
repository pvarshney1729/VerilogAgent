{
    "code": "module fsm (\n    input logic clk,\n    input logic rst_n,\n    input logic [2:0] request,\n    output logic [2:0] state\n);\n\n    typedef enum logic [2:0] {\n        S0 = 3'b000,\n        S1 = 3'b001,\n        S2 = 3'b010,\n        S3 = 3'b011,\n        S4 = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (!rst_n) begin\n            current_state <= S0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            S0: next_state = (request == 3'b001) ? S1 : S0;\n            S1: next_state = (request == 3'b010) ? S2 : S1;\n            S2: next_state = (request == 3'b011) ? S3 : S2;\n            S3: next_state = (request == 3'b100) ? S4 : S3;\n            S4: next_state = (request == 3'b000) ? S0 : S4;\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output state\n    assign state = current_state;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}