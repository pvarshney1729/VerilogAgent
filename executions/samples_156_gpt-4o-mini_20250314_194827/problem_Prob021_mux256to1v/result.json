{
    "code": "module TopModule (\n    input logic [7:0] sel,\n    input logic [255:0] data,\n    output logic [3:0] out\n);\n\n    always @(*) begin\n        case (sel)\n            8'b00000000: out = data[3:0];\n            8'b00000001: out = data[7:4];\n            8'b00000010: out = data[11:8];\n            8'b00000011: out = data[15:12];\n            8'b00000100: out = data[19:16];\n            8'b00000101: out = data[23:20];\n            8'b00000110: out = data[27:24];\n            8'b00000111: out = data[31:28];\n            8'b00001000: out = data[35:32];\n            8'b00001001: out = data[39:36];\n            8'b00001010: out = data[43:40];\n            8'b00001011: out = data[47:44];\n            8'b00001100: out = data[51:48];\n            8'b00001101: out = data[55:52];\n            8'b00001110: out = data[59:56];\n            8'b00001111: out = data[63:60];\n            8'b00010000: out = data[67:64];\n            8'b00010001: out = data[71:68];\n            8'b00010010: out = data[75:72];\n            8'b00010011: out = data[79:76];\n            8'b00010100: out = data[83:80];\n            8'b00010101: out = data[87:84];\n            8'b00010110: out = data[91:88];\n            8'b00010111: out = data[95:92];\n            8'b00011000: out = data[99:96];\n            8'b00011001: out = data[103:100];\n            8'b00011010: out = data[107:104];\n            8'b00011011: out = data[111:108];\n            8'b00011100: out = data[115:112];\n            8'b00011101: out = data[119:116];\n            8'b00011110: out = data[123:120];\n            8'b00011111: out = data[127:124];\n            8'b00100000: out = data[131:128];\n            8'b00100001: out = data[135:132];\n            8'b00100010: out = data[139:136];\n            8'b00100011: out = data[143:140];\n            8'b00100100: out = data[147:144];\n            8'b00100101: out = data[151:148];\n            8'b00100110: out = data[155:152];\n            8'b00100111: out = data[159:156];\n            8'b00101000: out = data[163:160];\n            8'b00101001: out = data[167:164];\n            8'b00101010: out = data[171:168];\n            8'b00101011: out = data[175:172];\n            8'b00101100: out = data[179:176];\n            8'b00101101: out = data[183:180];\n            8'b00101110: out = data[187:184];\n            8'b00101111: out = data[191:188];\n            8'b00110000: out = data[195:192];\n            8'b00110001: out = data[199:196];\n            8'b00110010: out = data[203:200];\n            8'b00110011: out = data[207:204];\n            8'b00110100: out = data[211:208];\n            8'b00110101: out = data[215:212];\n            8'b00110110: out = data[219:216];\n            8'b00110111: out = data[223:220];\n            8'b00111000: out = data[227:224];\n            8'b00111001: out = data[231:228];\n            8'b00111010: out = data[235:232];\n            8'b00111011: out = data[239:236];\n            8'b00111100: out = data[243:240];\n            8'b00111101: out = data[247:244];\n            8'b00111110: out = data[251:248];\n            8'b00111111: out = data[255:252];\n            default: out = 4'b0000;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    },
    "iterations_used": 3
}