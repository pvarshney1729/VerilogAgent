{
    "code": "module TopModule (\n    input  logic        clk,           // Clock signal, positive edge triggered\n    input  logic        reset,         // Synchronous active-high reset\n    input  logic [7:0]  in,            // 8-bit input byte stream, unsigned\n    output logic [23:0] out_bytes,     // 24-bit output message, unsigned\n    output logic        done           // Done signal, asserted upon message completion\n);\n\n    typedef enum logic [2:0] {\n        IDLE    = 3'b000,\n        BYTE_1  = 3'b001,\n        BYTE_2  = 3'b010,\n        BYTE_3  = 3'b011,\n        DONE    = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [23:0] temp_bytes;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_bytes <= 24'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DONE) begin\n                out_bytes <= temp_bytes;\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in[3] == 1'b1) begin\n                    next_state = BYTE_1;\n                end\n            end\n            BYTE_1: begin\n                temp_bytes[23:16] = in;\n                next_state = BYTE_2;\n            end\n            BYTE_2: begin\n                temp_bytes[15:8] = in;\n                next_state = BYTE_3;\n            end\n            BYTE_3: begin\n                temp_bytes[7:0] = in;\n                next_state = DONE;\n            end\n            DONE: begin\n                if (in[3] == 1'b1) begin\n                    next_state = BYTE_1;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 752,
        "passfail": "R"
    }
}