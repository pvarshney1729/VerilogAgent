{
    "code": "module TopModule (\n    input logic clk,            // Clock signal, presumed to be positive edge-triggered\n    input logic rst_n,          // Active-low synchronous reset\n    input logic x,              // Single-bit input\n    input logic [2:0] y,        // 3-bit input vector (y[2] is the MSB, y[0] is the LSB)\n    output logic Y0,            // Single-bit output, corresponds to the LSB of next state Y[0]\n    output logic z              // Single-bit output\n);\n\n    logic [2:0] state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (!rst_n) begin\n            state <= 3'b000; // Reset state\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        case (state)\n            3'b000: begin\n                next_state = (x == 1'b0) ? 3'b000 : 3'b001;\n                z = 1'b0;\n            end\n            3'b001: begin\n                next_state = (x == 1'b0) ? 3'b001 : 3'b100;\n                z = 1'b0;\n            end\n            3'b010: begin\n                next_state = (x == 1'b0) ? 3'b010 : 3'b001;\n                z = 1'b0;\n            end\n            3'b011: begin\n                next_state = (x == 1'b0) ? 3'b001 : 3'b010;\n                z = 1'b1;\n            end\n            3'b100: begin\n                next_state = (x == 1'b0) ? 3'b011 : 3'b100;\n                z = 1'b1;\n            end\n            default: begin\n                next_state = 3'b000;\n                z = 1'b0;\n            end\n        endcase\n    end\n\n    // Output Y0 logic\n    assign Y0 = next_state[0];\n\nendmodule",
    "test_results": {
        "num_mismatch": 80,
        "passfail": "R"
    }
}