{
    "code": "module TopModule (\n    input  logic clk,        // Clock input, positive edge-triggered\n    input  logic areset,     // Asynchronous reset, active high\n    input  logic bump_left,  // Input signal indicating a left bump\n    input  logic bump_right, // Input signal indicating a right bump\n    output logic walk_left,  // Output signal indicating walking left\n    output logic walk_right  // Output signal indicating walking right\n);\n\n    typedef enum logic [0:0] {\n        STATE_LEFT  = 1'b0,\n        STATE_RIGHT = 1'b1\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            STATE_LEFT: begin\n                if (bump_left && bump_right)\n                    next_state = STATE_RIGHT;\n                else if (bump_left)\n                    next_state = STATE_RIGHT;\n                else\n                    next_state = STATE_LEFT;\n            end\n            STATE_RIGHT: begin\n                if (bump_left && bump_right)\n                    next_state = STATE_LEFT;\n                else if (bump_right)\n                    next_state = STATE_LEFT;\n                else\n                    next_state = STATE_RIGHT;\n            end\n            default: next_state = STATE_LEFT;\n        endcase\n    end\n\n    // State register with asynchronous reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= STATE_LEFT;\n        else\n            current_state <= next_state;\n    end\n\n    // Output logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            walk_left <= 1'b1;\n            walk_right <= 1'b0;\n        end else begin\n            case (current_state)\n                STATE_LEFT: begin\n                    walk_left <= 1'b1;\n                    walk_right <= 1'b0;\n                end\n                STATE_RIGHT: begin\n                    walk_left <= 1'b0;\n                    walk_right <= 1'b1;\n                end\n            endcase\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 54,
        "passfail": "R"
    }
}