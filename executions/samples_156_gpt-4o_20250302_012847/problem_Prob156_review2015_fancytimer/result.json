{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic ack,\n    input logic [3:0] data_in,\n    output logic done\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        DETECT = 2'b01,\n        COUNT = 2'b10,\n        DONE = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay_counter;\n    logic [3:0] pattern_shift_reg;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            delay_counter <= 4'b0000;\n            pattern_shift_reg <= 4'b0000;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DETECT) begin\n                delay_counter <= data_in;\n            end else if (current_state == COUNT) begin\n                delay_counter <= delay_counter - 1;\n            end\n            if (current_state == DONE) begin\n                done <= 1'b1;\n            end else if (ack) begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (pattern_shift_reg == 4'b1101) begin\n                    next_state = DETECT;\n                end\n            end\n            DETECT: begin\n                next_state = COUNT;\n            end\n            COUNT: begin\n                if (delay_counter == 4'b0000) begin\n                    next_state = DONE;\n                end\n            end\n            DONE: begin\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\n    // Pattern detection logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            pattern_shift_reg <= 4'b0000;\n        end else begin\n            pattern_shift_reg <= {pattern_shift_reg[2:0], data_in[0]};\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    },
    "iterations_used": 3
}