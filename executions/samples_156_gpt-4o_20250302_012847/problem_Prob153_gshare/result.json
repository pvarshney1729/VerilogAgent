{
    "code": "```verilog\nmodule TopModule (\n    input logic clk,\n    input logic reset,\n    input logic [7:0] pc, // Program counter\n    input logic branch_taken, // Actual branch outcome\n    output logic prediction // Predicted branch outcome\n);\n\n    // Parameters\n    parameter PHT_SIZE = 256; // Size of the Pattern History Table\n    parameter BHR_WIDTH = 8;  // Width of the Global Branch History Register\n\n    // Internal signals\n    logic [BHR_WIDTH-1:0] bhr; // Global Branch History Register\n    logic [1:0] pht [0:PHT_SIZE-1]; // Pattern History Table\n\n    // Initialize flip-flops to zero\n    initial begin\n        bhr = '0;\n        for (int i = 0; i < PHT_SIZE; i++) begin\n            pht[i] = 2'b00;\n        end\n    end\n\n    // Prediction logic\n    always @(*) begin\n        prediction = pht[{bhr, pc[BHR_WIDTH-1:0]}] >= 2'b10;\n    end\n\n    // Update logic for PHT and BHR\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            bhr <= '0;\n            for (int i = 0; i < PHT_SIZE; i++) begin\n                pht[i] <= 2'b00;\n            end\n        end else begin\n            // Update PHT based on actual branch outcome\n            if (branch_taken) begin\n                if (pht[{bhr, pc[BHR_WIDTH-1:0]}] < 2'b11) begin\n                    pht[{bhr, pc[BHR_WIDTH-1:0]}] <= pht[{bhr, pc[BHR_WIDTH-1:0]}] + 1;\n                end\n            end else begin\n                if (pht[{bhr, pc[BHR_WIDTH-1:0]}] > 2'b00) begin\n                    pht[{bhr, pc[BHR_WIDTH-1:0]}] <= pht[{bhr, pc[BHR_WIDTH-1:0]}] - 1;\n                end\n            end\n\n            // Update BHR\n            bhr <= {bhr[BHR_WIDTH-2:0], branch_taken};\n        end\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    },
    "iterations_used": 3
}