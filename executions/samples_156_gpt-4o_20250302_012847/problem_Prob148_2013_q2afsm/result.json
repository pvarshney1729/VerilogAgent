{
    "code": "module TopModule (\n    input logic clk,\n    input logic rst_n,  // Active-low reset\n    input logic [1:0] device_request,  // Device request signals\n    output logic [1:0] device_grant  // Device grant signals\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        DEVICE_0 = 2'b01,\n        DEVICE_1 = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (!rst_n) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always @(*) begin\n        // Default assignments\n        next_state = current_state;\n        device_grant = 2'b00;\n\n        case (current_state)\n            IDLE: begin\n                if (device_request[0]) begin\n                    next_state = DEVICE_0;\n                end else if (device_request[1]) begin\n                    next_state = DEVICE_1;\n                end\n            end\n            DEVICE_0: begin\n                device_grant = 2'b01;\n                if (!device_request[0]) begin\n                    next_state = IDLE;\n                end\n            end\n            DEVICE_1: begin\n                device_grant = 2'b10;\n                if (!device_request[1]) begin\n                    next_state = IDLE;\n                end\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    },
    "iterations_used": 3
}