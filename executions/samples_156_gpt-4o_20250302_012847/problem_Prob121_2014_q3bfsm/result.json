{
    "code": "module fsm (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic out\n);\n\n    typedef enum logic [2:0] {\n        STATE_0 = 3'b000,\n        STATE_1 = 3'b001,\n        STATE_2 = 3'b010,\n        STATE_3 = 3'b011,\n        STATE_4 = 3'b100,\n        STATE_5 = 3'b101,\n        STATE_6 = 3'b110,\n        STATE_7 = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            STATE_0: next_state = in ? STATE_1 : STATE_0;\n            STATE_1: next_state = in ? STATE_2 : STATE_0;\n            STATE_2: next_state = in ? STATE_3 : STATE_0;\n            STATE_3: next_state = in ? STATE_4 : STATE_0;\n            STATE_4: next_state = in ? STATE_5 : STATE_0;\n            STATE_5: next_state = in ? STATE_6 : STATE_0;\n            STATE_6: next_state = in ? STATE_7 : STATE_0;\n            STATE_7: next_state = in ? STATE_0 : STATE_0;\n            default: next_state = STATE_0;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        case (current_state)\n            STATE_0: out = 1'b0;\n            STATE_1: out = 1'b0;\n            STATE_2: out = 1'b0;\n            STATE_3: out = 1'b0;\n            STATE_4: out = 1'b0;\n            STATE_5: out = 1'b0;\n            STATE_6: out = 1'b0;\n            STATE_7: out = 1'b1;\n            default: out = 1'b0;\n        endcase\n    end\n\n    // State register\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= STATE_0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}