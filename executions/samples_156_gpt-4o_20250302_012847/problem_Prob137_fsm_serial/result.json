{
    "code": "module uart_fsm (\n    input logic clk,\n    input logic reset,\n    input logic rx,\n    output logic [7:0] data_out,\n    output logic data_valid,\n    output logic error\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        START_BIT,\n        DATA_RECEPTION,\n        STOP_BIT,\n        ERROR_RECOVERY\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_counter;\n    logic [7:0] data_shift_reg;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_counter <= 3'b000;\n            data_shift_reg <= 8'b00000000;\n            data_valid <= 1'b0;\n            error <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always @(*) begin\n        next_state = current_state;\n        data_valid = 1'b0;\n        error = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (rx == 1'b0) begin // Start bit detected\n                    next_state = START_BIT;\n                end\n            end\n\n            START_BIT: begin\n                if (rx == 1'b0) begin // Confirm start bit\n                    next_state = DATA_RECEPTION;\n                    bit_counter = 3'b000;\n                end else begin\n                    next_state = ERROR_RECOVERY;\n                end\n            end\n\n            DATA_RECEPTION: begin\n                data_shift_reg = {rx, data_shift_reg[7:1]};\n                bit_counter = bit_counter + 1;\n                if (bit_counter == 3'b111) begin\n                    next_state = STOP_BIT;\n                end\n            end\n\n            STOP_BIT: begin\n                if (rx == 1'b1) begin // Stop bit verification\n                    data_out = data_shift_reg;\n                    data_valid = 1'b1;\n                    next_state = IDLE;\n                end else begin\n                    next_state = ERROR_RECOVERY;\n                end\n            end\n\n            ERROR_RECOVERY: begin\n                error = 1'b1;\n                next_state = IDLE;\n            end\n\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}