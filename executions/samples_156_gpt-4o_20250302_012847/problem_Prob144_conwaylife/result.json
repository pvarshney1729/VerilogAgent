{
    "code": "```verilog\nmodule TopModule (\n    input logic clk,\n    input logic rst,\n    input logic load,\n    input logic [255:0] data,\n    output logic [255:0] q\n);\n\n    always_ff @(posedge clk) begin\n        if (rst) begin\n            q <= 256'b0;\n        end else if (load) begin\n            q <= data;\n        end else begin\n            logic [255:0] new_q;\n            for (int i = 0; i < 16; i++) begin\n                for (int j = 0; j < 16; j++) begin\n                    int live_neighbors = count_neighbors(i, j);\n                    if (live_neighbors < 2 || live_neighbors > 3) begin\n                        new_q[i*16 + j] = 1'b0;\n                    end else if (live_neighbors == 3) begin\n                        new_q[i*16 + j] = 1'b1;\n                    end else begin\n                        new_q[i*16 + j] = q[i*16 + j];\n                    end\n                end\n            end\n            q <= new_q;\n        end\n    end\n\n    function int count_neighbors(int i, int j);\n        int count = 0;\n        for (int x = -1; x <= 1; x++) begin\n            for (int y = -1; y <= 1; y++) begin\n                if (x != 0 || y != 0) begin\n                    int ni = (i + x + 16) % 16;\n                    int nj = (j + y + 16) % 16;\n                    count += q[ni*16 + nj];\n                end\n            end\n        end\n        return count;\n    endfunction\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    },
    "iterations_used": 3
}