{
    "code": "module ModuleB (\n    input logic clk,\n    input logic reset,\n    input logic [3:0] data_in,\n    output logic [3:0] data_out\n);\n\n    logic [3:0] state;\n\n    // Sequential logic with synchronous reset\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            state <= 4'b0000;\n        end else begin\n            state <= data_in;\n        end\n    end\n\n    // Combinational logic for output\n    always_comb begin\n        data_out = state;\n    end\n\nendmodule\n\nmodule TopLevel (\n    input logic clk,\n    input logic reset,\n    input logic [3:0] data_in,\n    output logic [3:0] data_out\n);\n\n    // Instantiate ModuleB\n    ModuleB module_b_inst (\n        .clk(clk),\n        .reset(reset),\n        .data_in(data_in),\n        .data_out(data_out)\n    );\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}