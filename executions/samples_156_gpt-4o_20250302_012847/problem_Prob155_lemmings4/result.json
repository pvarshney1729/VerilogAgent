{
    "code": "```verilog\nmodule fsm_example (\n    input logic clk,\n    input logic reset,\n    input logic [1:0] in_signal,\n    output logic [1:0] out_signal\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        STATE_0 = 2'b00,\n        STATE_1 = 2'b01,\n        STATE_2 = 2'b10,\n        STATE_3 = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Sequential logic for state transition\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= STATE_0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Combinational logic for next state and output logic\n    always @(*) begin\n        // Default assignments\n        next_state = current_state;\n        out_signal = 2'b00;\n\n        case (current_state)\n            STATE_0: begin\n                if (in_signal == 2'b01) begin\n                    next_state = STATE_1;\n                end\n                out_signal = 2'b01;\n            end\n            STATE_1: begin\n                if (in_signal == 2'b10) begin\n                    next_state = STATE_2;\n                end\n                out_signal = 2'b10;\n            end\n            STATE_2: begin\n                if (in_signal == 2'b11) begin\n                    next_state = STATE_3;\n                end\n                out_signal = 2'b11;\n            end\n            STATE_3: begin\n                if (in_signal == 2'b00) begin\n                    next_state = STATE_0;\n                end\n                out_signal = 2'b00;\n            end\n            default: begin\n                next_state = STATE_0;\n                out_signal = 2'b00;\n            end\n        endcase\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    },
    "iterations_used": 3
}