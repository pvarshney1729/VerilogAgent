{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic bump_left,\n    input logic bump_right,\n    output logic walk_left,\n    output logic walk_right\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        WALK_LEFT = 2'b01,\n        WALK_RIGHT = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (bump_right)\n                    next_state = WALK_LEFT;\n                else\n                    next_state = IDLE;\n            end\n            WALK_LEFT: begin\n                if (bump_left)\n                    next_state = WALK_RIGHT;\n                else\n                    next_state = WALK_LEFT;\n            end\n            WALK_RIGHT: begin\n                if (bump_right)\n                    next_state = WALK_LEFT;\n                else\n                    next_state = WALK_RIGHT;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // State register with synchronous reset\n    always @(posedge clk) begin\n        if (reset)\n            current_state <= IDLE;\n        else\n            current_state <= next_state;\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = (current_state == WALK_LEFT);\n        walk_right = (current_state == WALK_RIGHT);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    },
    "iterations_used": 3
}