{
    "code": "module fsm_one_hot (\n    input logic clk,\n    input logic reset,\n    input logic [3:0] input_signal,\n    output logic [9:0] state,\n    output logic output_signal\n);\n\n    // State encoding using one-hot\n    typedef enum logic [9:0] {\n        S0 = 10'b0000000001,\n        S1 = 10'b0000000010,\n        S2 = 10'b0000000100,\n        S3 = 10'b0000001000,\n        S4 = 10'b0000010000,\n        S5 = 10'b0000100000,\n        S6 = 10'b0001000000,\n        S7 = 10'b0010000000,\n        S8 = 10'b0100000000,\n        S9 = 10'b1000000000\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= S0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            S0: next_state = (input_signal == 4'b0001) ? S1 : S0;\n            S1: next_state = (input_signal == 4'b0010) ? S2 : S1;\n            S2: next_state = (input_signal == 4'b0011) ? S3 : S2;\n            S3: next_state = (input_signal == 4'b0100) ? S4 : S3;\n            S4: next_state = (input_signal == 4'b0101) ? S5 : S4;\n            S5: next_state = (input_signal == 4'b0110) ? S6 : S5;\n            S6: next_state = (input_signal == 4'b0111) ? S7 : S6;\n            S7: next_state = (input_signal == 4'b1000) ? S8 : S7;\n            S8: next_state = (input_signal == 4'b1001) ? S9 : S8;\n            S9: next_state = (input_signal == 4'b1010) ? S0 : S9;\n            default: next_state = S0; // Handle illegal states\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        output_signal = (current_state == S9);\n    end\n\n    // Assign current state to output\n    assign state = current_state;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}