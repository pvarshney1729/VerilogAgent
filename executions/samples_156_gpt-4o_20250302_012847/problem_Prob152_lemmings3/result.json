{
    "code": "module state_machine (\n    input logic clk,\n    input logic reset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground_detect,\n    output logic [1:0] state\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        MOVE_FORWARD = 2'b01,\n        TURN_LEFT = 2'b10,\n        TURN_RIGHT = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                if (ground_detect)\n                    next_state = MOVE_FORWARD;\n                else\n                    next_state = IDLE;\n            end\n            MOVE_FORWARD: begin\n                if (bump_left)\n                    next_state = TURN_RIGHT;\n                else if (bump_right)\n                    next_state = TURN_LEFT;\n                else if (!ground_detect)\n                    next_state = IDLE;\n                else\n                    next_state = MOVE_FORWARD;\n            end\n            TURN_LEFT: begin\n                if (!ground_detect)\n                    next_state = IDLE;\n                else\n                    next_state = MOVE_FORWARD;\n            end\n            TURN_RIGHT: begin\n                if (!ground_detect)\n                    next_state = IDLE;\n                else\n                    next_state = MOVE_FORWARD;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // State register with synchronous reset\n    always_ff @(posedge clk) begin\n        if (reset)\n            current_state <= IDLE;\n        else\n            current_state <= next_state;\n    end\n\n    // Output logic\n    assign state = current_state;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}