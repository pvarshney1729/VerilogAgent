{
    "code": "module TopModule (\n    input  logic clk,          // Clock signal, positive edge-triggered\n    input  logic reset,        // Active high synchronous reset\n    input  logic data,         // Serial data input\n    input  logic done_counting,// Indicates completion of counting\n    input  logic ack,          // Acknowledgment from the user\n    output logic shift_ena,    // Enable signal for shifting\n    output logic counting,     // Indicates counting is in progress\n    output logic done          // Indicates the timer has timed out\n);\n\n    typedef enum logic [2:0] {\n        IDLE   = 3'b000,\n        SHIFT  = 3'b001,\n        COUNT  = 3'b010,\n        DONE   = 3'b011\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] pattern_shift;\n    logic [1:0] shift_counter;\n\n    // State transition and output logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            shift_ena <= 1'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n            pattern_shift <= 4'b0000;\n            shift_counter <= 2'b00;\n        end else begin\n            current_state <= next_state;\n            case (current_state)\n                IDLE: begin\n                    shift_ena <= 1'b0;\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                    pattern_shift <= {data, pattern_shift[3:1]};\n                end\n                SHIFT: begin\n                    shift_ena <= 1'b1;\n                    shift_counter <= shift_counter + 1;\n                end\n                COUNT: begin\n                    counting <= 1'b1;\n                end\n                DONE: begin\n                    done <= 1'b1;\n                end\n            endcase\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (pattern_shift == 4'b1101) begin\n                    next_state = SHIFT;\n                end\n            end\n            SHIFT: begin\n                if (shift_counter == 2'b11) begin\n                    next_state = COUNT;\n                end\n            end\n            COUNT: begin\n                if (done_counting) begin\n                    next_state = DONE;\n                end\n            end\n            DONE: begin\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 4430,
        "passfail": "R"
    },
    "iterations_used": 1
}