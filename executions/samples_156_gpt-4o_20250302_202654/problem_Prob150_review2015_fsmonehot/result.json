{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic d,\n    input logic done_counting,\n    input logic ack,\n    output logic B3_next,\n    output logic S_next,\n    output logic S1_next,\n    output logic Count_next,\n    output logic Wait_next,\n    output logic done,\n    output logic counting,\n    output logic shift_ena\n);\n\n    // State encoding\n    localparam logic [9:0] S     = 10'b0000000001;\n    localparam logic [9:0] S1    = 10'b0000000010;\n    localparam logic [9:0] S11   = 10'b0000000100;\n    localparam logic [9:0] S110  = 10'b0000001000;\n    localparam logic [9:0] B0    = 10'b0000010000;\n    localparam logic [9:0] B1    = 10'b0000100000;\n    localparam logic [9:0] B2    = 10'b0001000000;\n    localparam logic [9:0] B3    = 10'b0010000000;\n    localparam logic [9:0] Count = 10'b0100000000;\n    localparam logic [9:0] Wait  = 10'b1000000000;\n\n    logic [9:0] state;\n    logic [9:0] next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (state)\n            S:     next_state = (d == 1'b1) ? S1 : S;\n            S1:    next_state = (d == 1'b1) ? S11 : S;\n            S11:   next_state = (d == 1'b0) ? S110 : S11;\n            S110:  next_state = (d == 1'b1) ? B0 : S;\n            B0:    next_state = B1;\n            B1:    next_state = B2;\n            B2:    next_state = B3;\n            B3:    next_state = Count;\n            Count: next_state = (done_counting == 1'b1) ? Wait : Count;\n            Wait:  next_state = (ack == 1'b1) ? S : Wait;\n            default: next_state = S;\n        endcase\n    end\n\n    // Output logic\n    assign B3_next = (next_state == B3);\n    assign S_next = (next_state == S);\n    assign S1_next = (next_state == S1);\n    assign Count_next = (next_state == Count);\n    assign Wait_next = (next_state == Wait);\n    assign shift_ena = (state == B0) | (state == B1) | (state == B2) | (state == B3);\n    assign counting = (state == Count);\n    assign done = (state == Wait);\n\n    // State register with synchronous reset\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            state <= S;\n        end else begin\n            state <= next_state;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    },
    "iterations_used": 2
}