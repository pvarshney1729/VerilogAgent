{
    "code": "module TopModule (\n    input  logic        clk,        // Clock signal, positive edge-triggered\n    input  logic        reset,      // Active-high synchronous reset\n    input  logic        in,         // Serial data input\n    output logic [7:0]  out_byte,   // 8-bit output data byte\n    output logic        done        // Byte received indicator, 1-bit\n);\n\n    typedef enum logic [2:0] {\n        IDLE      = 3'b000,\n        START_BIT = 3'b001,\n        DATA_BITS = 3'b010,\n        STOP_BIT  = 3'b011,\n        ERROR     = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n    logic [7:0] shift_reg;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_byte <= 8'b00000000;\n            done <= 1'b0;\n            bit_count <= 3'b000;\n            shift_reg <= 8'b00000000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DATA_BITS) begin\n                shift_reg <= {in, shift_reg[7:1]};\n                bit_count <= bit_count + 1;\n            end\n            if (current_state == STOP_BIT && in == 1'b1) begin\n                out_byte <= shift_reg;\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0)\n                    next_state = START_BIT;\n            end\n            START_BIT: begin\n                next_state = DATA_BITS;\n            end\n            DATA_BITS: begin\n                if (bit_count == 3'b111)\n                    next_state = STOP_BIT;\n            end\n            STOP_BIT: begin\n                if (in == 1'b1)\n                    next_state = IDLE;\n                else\n                    next_state = ERROR;\n            end\n            ERROR: begin\n                if (in == 1'b1)\n                    next_state = IDLE;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 64,
        "passfail": "R"
    },
    "iterations_used": 2
}