{
    "code": "module TopModule (\n    input logic clk,         // Clock signal (positive edge triggered)\n    input logic resetn,      // Active-low synchronous reset\n    input logic [2:0] r,     // Request signals from devices (r[0] is highest priority)\n    output logic [2:0] g     // Grant signals to devices\n);\n\n    typedef enum logic [1:0] {\n        A = 2'b00,\n        B = 2'b01,\n        C = 2'b10,\n        D = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State register update\n    always_ff @(posedge clk) begin\n        if (~resetn) begin\n            current_state <= A;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            A: begin\n                if (r[0]) next_state = B;\n                else if (r[1]) next_state = C;\n                else if (r[2]) next_state = D;\n                else next_state = A;\n            end\n            B: begin\n                if (r[0]) next_state = B;\n                else next_state = A;\n            end\n            C: begin\n                if (r[1]) next_state = C;\n                else next_state = A;\n            end\n            D: begin\n                if (r[2]) next_state = D;\n                else next_state = A;\n            end\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        case (current_state)\n            A: g = 3'b000;\n            B: g = 3'b001;\n            C: g = 3'b010;\n            D: g = 3'b100;\n            default: g = 3'b000;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}