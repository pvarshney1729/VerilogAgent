{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic in,\n    output logic out\n);\n\n    typedef enum logic [1:0] {\n        A = 2'b00,\n        B = 2'b01,\n        C = 2'b10,\n        D = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            A: begin\n                if (in == 1'b0)\n                    next_state = A;\n                else\n                    next_state = B;\n                out = 1'b0;\n            end\n            B: begin\n                if (in == 1'b0)\n                    next_state = C;\n                else\n                    next_state = B;\n                out = 1'b0;\n            end\n            C: begin\n                if (in == 1'b0)\n                    next_state = A;\n                else\n                    next_state = D;\n                out = 1'b0;\n            end\n            D: begin\n                if (in == 1'b0)\n                    next_state = C;\n                else\n                    next_state = B;\n                out = 1'b1;\n            end\n            default: begin\n                next_state = A;\n                out = 1'b0;\n            end\n        endcase\n    end\n\n    // State register with asynchronous reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}