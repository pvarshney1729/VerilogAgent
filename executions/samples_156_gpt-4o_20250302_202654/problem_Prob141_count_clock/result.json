{
    "code": "module TopModule(\n    input logic clk,       // Clock signal, positive edge-triggered\n    input logic reset,     // Active high synchronous reset\n    input logic ena,       // Enable signal, triggers increment when high\n    output logic pm,       // AM/PM indicator, 1 for PM, 0 for AM\n    output logic [7:0] hh, // Hours (01-12), two BCD digits\n    output logic [7:0] mm, // Minutes (00-59), two BCD digits\n    output logic [7:0] ss  // Seconds (00-59), two BCD digits\n);\n\n    // Internal signals for BCD counting\n    logic [3:0] hh_ones, hh_tens;\n    logic [3:0] mm_ones, mm_tens;\n    logic [3:0] ss_ones, ss_tens;\n\n    // Initialize outputs\n    initial begin\n        pm = 0;\n        hh = 8'b0001_0010; // 12 in BCD\n        mm = 8'b0000_0000; // 00 in BCD\n        ss = 8'b0000_0000; // 00 in BCD\n    end\n\n    // Sequential logic for clock operation\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            // Synchronous reset to 12:00:00 AM\n            pm <= 0;\n            hh <= 8'b0001_0010; // 12 in BCD\n            mm <= 8'b0000_0000; // 00 in BCD\n            ss <= 8'b0000_0000; // 00 in BCD\n        end else if (ena) begin\n            // Increment seconds\n            if (ss == 8'b0101_1001) begin // 59 in BCD\n                ss <= 8'b0000_0000; // Reset seconds to 00\n                // Increment minutes\n                if (mm == 8'b0101_1001) begin // 59 in BCD\n                    mm <= 8'b0000_0000; // Reset minutes to 00\n                    // Increment hours\n                    if (hh == 8'b0001_0010) begin // 12 in BCD\n                        hh <= 8'b0000_0001; // Reset hours to 01\n                        pm <= ~pm; // Toggle AM/PM\n                    end else if (hh == 8'b0000_1001) begin // 09 in BCD\n                        hh <= 8'b0001_0000; // Increment to 10\n                    end else if (hh == 8'b0001_0000) begin // 10 in BCD\n                        hh <= 8'b0001_0001; // Increment to 11\n                    end else if (hh == 8'b0001_0001) begin // 11 in BCD\n                        hh <= 8'b0001_0010; // Increment to 12\n                    end else begin\n                        hh <= hh + 8'b0000_0001; // Increment hours\n                    end\n                end else if (mm[3:0] == 4'b1001) begin // 9 in BCD\n                    mm <= {mm[7:4] + 4'b0001, 4'b0000}; // Increment tens place\n                end else begin\n                    mm <= mm + 8'b0000_0001; // Increment minutes\n                end\n            end else if (ss[3:0] == 4'b1001) begin // 9 in BCD\n                ss <= {ss[7:4] + 4'b0001, 4'b0000}; // Increment tens place\n            end else begin\n                ss <= ss + 8'b0000_0001; // Increment seconds\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "R"
    },
    "iterations_used": 1
}