{
    "code": "module TopModule(\n    input logic clk,              // Clock input\n    input logic reset,            // Active-high synchronous reset\n    input logic [2:0] s,          // 3-bit unsigned sensor input\n    output logic fr2,             // Output for flow rate control\n    output logic fr1,             // Output for flow rate control\n    output logic fr0,             // Output for flow rate control\n    output logic dfr              // Output for supplemental flow rate control\n);\n\n    typedef enum logic [1:0] {\n        STATE_LOW = 2'b00,\n        STATE_BETWEEN_MID_LOW = 2'b01,\n        STATE_BETWEEN_HIGH_MID = 2'b10,\n        STATE_HIGH = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= STATE_LOW;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        // Default outputs\n        fr0 = 1'b0;\n        fr1 = 1'b0;\n        fr2 = 1'b0;\n        dfr = 1'b0;\n        \n        case (current_state)\n            STATE_LOW: begin\n                fr0 = 1'b1;\n                fr1 = 1'b1;\n                fr2 = 1'b1;\n                if (s == 3'b001) begin\n                    next_state = STATE_BETWEEN_MID_LOW;\n                end else begin\n                    next_state = STATE_LOW;\n                end\n            end\n\n            STATE_BETWEEN_MID_LOW: begin\n                fr0 = 1'b1;\n                fr1 = 1'b1;\n                if (s == 3'b011) begin\n                    next_state = STATE_BETWEEN_HIGH_MID;\n                    dfr = 1'b1;\n                end else if (s == 3'b000) begin\n                    next_state = STATE_LOW;\n                end else begin\n                    next_state = STATE_BETWEEN_MID_LOW;\n                end\n            end\n\n            STATE_BETWEEN_HIGH_MID: begin\n                fr0 = 1'b1;\n                if (s == 3'b111) begin\n                    next_state = STATE_HIGH;\n                    dfr = 1'b1;\n                end else if (s == 3'b001) begin\n                    next_state = STATE_BETWEEN_MID_LOW;\n                end else begin\n                    next_state = STATE_BETWEEN_HIGH_MID;\n                end\n            end\n\n            STATE_HIGH: begin\n                if (s == 3'b011) begin\n                    next_state = STATE_BETWEEN_HIGH_MID;\n                end else begin\n                    next_state = STATE_HIGH;\n                end\n            end\n\n            default: begin\n                next_state = STATE_LOW;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 1237,
        "passfail": "R"
    },
    "iterations_used": 1
}