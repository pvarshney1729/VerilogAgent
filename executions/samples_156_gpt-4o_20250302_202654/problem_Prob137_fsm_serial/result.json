{
    "code": "module TopModule(\n    input  logic clk,         // Clock signal, positive edge-triggered\n    input  logic reset,       // Active-high synchronous reset\n    input  logic in,          // Serial input data stream\n    output logic done         // Output high if a byte is correctly received\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        START = 3'b001,\n        DATA_RECEIVE = 3'b010,\n        STOP_VERIFY = 3'b011,\n        COMPLETE = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n    logic [7:0] data_byte;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 3'b000;\n            data_byte <= 8'b00000000;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DATA_RECEIVE) begin\n                data_byte <= {in, data_byte[7:1]};\n                bit_count <= bit_count + 1;\n            end\n            if (current_state == COMPLETE) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = START;\n                end\n            end\n            START: begin\n                next_state = DATA_RECEIVE;\n            end\n            DATA_RECEIVE: begin\n                if (bit_count == 3'b111) begin\n                    next_state = STOP_VERIFY;\n                end\n            end\n            STOP_VERIFY: begin\n                if (in == 1'b1) begin\n                    next_state = COMPLETE;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            COMPLETE: begin\n                next_state = IDLE;\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 64,
        "passfail": "R"
    },
    "iterations_used": 2
}