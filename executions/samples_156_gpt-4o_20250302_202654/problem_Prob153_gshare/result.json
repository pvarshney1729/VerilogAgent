{
    "code": "module TopModule (\n    input logic clk,                // Clock signal, positive edge-triggered.\n    input logic areset,             // Asynchronous reset, active-high.\n\n    // Prediction Interface\n    input logic predict_valid,      // Valid signal for prediction request.\n    input logic [6:0] predict_pc,   // 7-bit program counter for prediction.\n    output logic predict_taken,     // Predicted branch direction (1 = taken, 0 = not taken).\n    output logic [6:0] predict_history, // 7-bit history used for prediction.\n\n    // Training Interface\n    input logic train_valid,        // Valid signal for training request.\n    input logic train_taken,        // Actual outcome of the branch (1 = taken, 0 = not taken).\n    input logic train_mispredicted, // Indicator if the branch was mispredicted.\n    input logic [6:0] train_history,// 7-bit history for training.\n    input logic [6:0] train_pc      // 7-bit program counter for training.\n);\n\n    // Parameters\n    localparam PHT_SIZE = 128; // Size of the Pattern History Table (2^7)\n    localparam WEAKLY_TAKEN = 2'b01;\n\n    // Registers\n    logic [1:0] PHT [0:PHT_SIZE-1]; // Pattern History Table\n    logic [6:0] global_history;     // Global branch history register\n\n    // Initialize PHT and global history\n    initial begin\n        integer i;\n        for (i = 0; i < PHT_SIZE; i = i + 1) begin\n            PHT[i] = WEAKLY_TAKEN;\n        end\n        global_history = 7'b0;\n    end\n\n    // Prediction logic\n    always @(*) begin\n        if (predict_valid) begin\n            logic [6:0] index;\n            index = predict_pc ^ global_history;\n            predict_taken = PHT[index][1]; // MSB of the counter\n            predict_history = global_history;\n        end else begin\n            predict_taken = 1'b0;\n            predict_history = 7'b0;\n        end\n    end\n\n    // Sequential logic for updating global history and PHT\n    always_ff @(posedge clk) begin\n        if (areset) begin\n            global_history <= 7'b0;\n        end else begin\n            if (train_valid) begin\n                logic [6:0] train_index;\n                train_index = train_pc ^ train_history;\n                // Update PHT based on train_taken\n                if (train_taken) begin\n                    if (PHT[train_index] != 2'b11) begin\n                        PHT[train_index] <= PHT[train_index] + 1;\n                    end\n                end else begin\n                    if (PHT[train_index] != 2'b00) begin\n                        PHT[train_index] <= PHT[train_index] - 1;\n                    end\n                end\n                // Restore global history if mispredicted\n                if (train_mispredicted) begin\n                    global_history <= train_history;\n                end\n            end else if (predict_valid) begin\n                // Update global history based on prediction\n                global_history <= {global_history[5:0], predict_taken};\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 516,
        "passfail": "R"
    },
    "iterations_used": 2
}