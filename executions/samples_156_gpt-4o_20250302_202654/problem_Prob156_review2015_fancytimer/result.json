{
    "code": "module timer_fsm (\n    input logic clk,\n    input logic reset,\n    input logic data,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done,\n    input logic ack\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        DETECT,\n        LOAD_DELAY,\n        COUNT,\n        WAIT_ACK\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay;\n    logic [3:0] bit_counter;\n    logic [13:0] cycle_counter;\n    logic pattern_detected;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            count <= 4'b0000;\n            counting <= 1'b0;\n            done <= 1'b0;\n            delay <= 4'b0000;\n            bit_counter <= 4'b0000;\n            cycle_counter <= 14'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == LOAD_DELAY) begin\n                delay <= {delay[2:0], data};\n                bit_counter <= bit_counter + 1;\n            end\n            if (current_state == COUNT) begin\n                if (cycle_counter == 14'd999) begin\n                    cycle_counter <= 14'b0;\n                    count <= count - 1;\n                end else begin\n                    cycle_counter <= cycle_counter + 1;\n                end\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        counting = 1'b0;\n        done = 1'b0;\n        pattern_detected = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (data == 1'b1) begin\n                    next_state = DETECT;\n                end\n            end\n            DETECT: begin\n                if (data == 1'b1) begin\n                    pattern_detected = 1'b1;\n                end\n                if (pattern_detected) begin\n                    next_state = LOAD_DELAY;\n                end\n            end\n            LOAD_DELAY: begin\n                if (bit_counter == 4'b0100) begin\n                    next_state = COUNT;\n                    count = delay + 1;\n                end\n            end\n            COUNT: begin\n                counting = 1'b1;\n                if (count == 4'b0000) begin\n                    next_state = WAIT_ACK;\n                    done = 1'b1;\n                end\n            end\n            WAIT_ACK: begin\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 1
}