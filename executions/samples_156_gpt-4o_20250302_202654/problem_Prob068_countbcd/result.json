{
    "code": "module TopModule (\n    input logic clk,            // Clock signal (1 bit)\n    input logic reset,          // Synchronous active-high reset (1 bit)\n    output logic [2:0] ena,     // Enable signals for BCD increments (3 bits, unsigned)\n    output logic [15:0] q       // 4-digit BCD counter value (16 bits, unsigned)\n);\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            q <= 16'b0;\n            ena <= 3'b0;\n        end else begin\n            // Default ena to 0\n            ena <= 3'b0;\n            \n            // Increment ones digit\n            if (q[3:0] == 4'd9) begin\n                q[3:0] <= 4'd0;\n                // Increment tens digit\n                if (q[7:4] == 4'd9) begin\n                    q[7:4] <= 4'd0;\n                    ena[1] <= 1'b1;\n                    // Increment hundreds digit\n                    if (q[11:8] == 4'd9) begin\n                        q[11:8] <= 4'd0;\n                        ena[2] <= 1'b1;\n                        // Increment thousands digit\n                        if (q[15:12] == 4'd9) begin\n                            q[15:12] <= 4'd0;\n                            ena[3] <= 1'b0; // No further carry\n                        end else begin\n                            q[15:12] <= q[15:12] + 4'd1;\n                            ena[3] <= 1'b1;\n                        end\n                    end else begin\n                        q[11:8] <= q[11:8] + 4'd1;\n                        ena[2] <= 1'b1;\n                    end\n                end else begin\n                    q[7:4] <= q[7:4] + 4'd1;\n                    ena[1] <= 1'b1;\n                end\n            end else begin\n                q[3:0] <= q[3:0] + 4'd1;\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 7942,
        "passfail": "R"
    },
    "iterations_used": 1
}