{
    "code": "module TopModule (\n    input logic clk,\n    input logic resetn,\n    input logic x,\n    input logic y,\n    output logic f,\n    output logic g\n);\n\n    typedef enum logic [2:0] {\n        STATE_A,\n        STATE_B,\n        STATE_C,\n        STATE_D\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] x_sequence;\n    logic y_detected;\n\n    always_ff @(posedge clk) begin\n        if (!resetn) begin\n            current_state <= STATE_A;\n            f <= 1'b0;\n            g <= 1'b0;\n            x_sequence <= 3'b000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == STATE_B) begin\n                f <= 1'b1;\n            end else begin\n                f <= 1'b0;\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (current_state == STATE_A) begin\n            if (!resetn) begin\n                next_state <= STATE_A;\n            end else begin\n                next_state <= STATE_B;\n            end\n        end else if (current_state == STATE_B) begin\n            x_sequence <= {x_sequence[1:0], x};\n            if (x_sequence == 3'b101) begin\n                next_state <= STATE_C;\n            end else begin\n                next_state <= STATE_B;\n            end\n        end else if (current_state == STATE_C) begin\n            g <= 1'b1;\n            if (y) begin\n                next_state <= STATE_C;\n            end else begin\n                next_state <= STATE_D;\n            end\n        end else if (current_state == STATE_D) begin\n            g <= 1'b0;\n            if (y) begin\n                next_state <= STATE_C;\n            end else begin\n                next_state <= STATE_D;\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (current_state == STATE_C) begin\n            y_detected <= y_detected || y;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 594,
        "passfail": "R"
    }
}