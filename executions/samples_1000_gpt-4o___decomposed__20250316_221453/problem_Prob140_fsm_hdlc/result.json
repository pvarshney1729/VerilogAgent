{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [2:0] {\n        S_IDLE = 3'b000,\n        S_1    = 3'b001,\n        S_11   = 3'b010,\n        S_111  = 3'b011,\n        S_1111 = 3'b100,\n        S_11111 = 3'b101,\n        S_111110 = 3'b110,\n        S_111111 = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= S_IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n        case (current_state)\n            S_IDLE: begin\n                if (in) next_state = S_1;\n            end\n            S_1: begin\n                if (in) next_state = S_11;\n                else next_state = S_IDLE;\n            end\n            S_11: begin\n                if (in) next_state = S_111;\n                else next_state = S_IDLE;\n            end\n            S_111: begin\n                if (in) next_state = S_1111;\n                else next_state = S_IDLE;\n            end\n            S_1111: begin\n                if (in) next_state = S_11111;\n                else next_state = S_IDLE;\n            end\n            S_11111: begin\n                if (in) next_state = S_111110;\n                else next_state = S_IDLE;\n            end\n            S_111110: begin\n                if (in) begin\n                    next_state = S_111111;\n                    flag = 1'b1;\n                end else begin\n                    next_state = S_IDLE;\n                    disc = 1'b1;\n                end\n            end\n            S_111111: begin\n                if (in) begin\n                    err = 1'b1;\n                end else begin\n                    next_state = S_IDLE;\n                end\n            end\n            default: next_state = S_IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 85,
        "passfail": "R"
    }
}