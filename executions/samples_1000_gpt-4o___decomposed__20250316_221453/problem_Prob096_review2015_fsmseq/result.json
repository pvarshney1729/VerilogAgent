{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic data,\n    output logic start_shifting\n);\n\n    typedef enum logic [2:0] {\n        IDLE  = 3'b000,\n        S1    = 3'b001,\n        S11   = 3'b010,\n        S110  = 3'b011,\n        S1101 = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        next_state = current_state; // Default state transition\n        start_shifting = 1'b0; // Default output\n\n        case (current_state)\n            IDLE: begin\n                if (data) next_state = S1;\n            end\n            S1: begin\n                if (data) next_state = S11;\n                else next_state = IDLE;\n            end\n            S11: begin\n                if (~data) next_state = S110;\n            end\n            S110: begin\n                if (data) next_state = S1101;\n                else next_state = IDLE;\n            end\n            S1101: begin\n                start_shifting = 1'b1; // Sequence detected, set output\n                // Remain in this state until reset\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}