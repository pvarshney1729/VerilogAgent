{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic done\n);\n\n    typedef enum logic [3:0] {\n        IDLE = 4'b0000,\n        START = 4'b0001,\n        DATA0 = 4'b0010,\n        DATA1 = 4'b0011,\n        DATA2 = 4'b0100,\n        DATA3 = 4'b0101,\n        DATA4 = 4'b0110,\n        DATA5 = 4'b0111,\n        DATA6 = 4'b1000,\n        DATA7 = 4'b1001,\n        STOP = 4'b1010,\n        DONE = 4'b1011\n    } state_t;\n\n    state_t state, next_state;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            state <= IDLE;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    always_comb begin\n        next_state = state; // Default to hold state\n        done = 1'b0; // Default done to 0\n\n        case (state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = START;\n                end\n            end\n            START: begin\n                next_state = DATA0;\n            end\n            DATA0: begin\n                next_state = DATA1;\n            end\n            DATA1: begin\n                next_state = DATA2;\n            end\n            DATA2: begin\n                next_state = DATA3;\n            end\n            DATA3: begin\n                next_state = DATA4;\n            end\n            DATA4: begin\n                next_state = DATA5;\n            end\n            DATA5: begin\n                next_state = DATA6;\n            end\n            DATA6: begin\n                next_state = DATA7;\n            end\n            DATA7: begin\n                next_state = STOP;\n            end\n            STOP: begin\n                if (in == 1'b1) begin\n                    next_state = DONE;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            DONE: begin\n                done = 1'b1;\n                next_state = IDLE;\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 68,
        "passfail": "R"
    }
}