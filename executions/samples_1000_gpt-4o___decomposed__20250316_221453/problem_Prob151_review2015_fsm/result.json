{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic done_counting,\n    input logic ack,\n    output logic shift_ena,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        SEARCH = 3'b000,\n        LOAD = 3'b001,\n        COUNTING = 3'b010,\n        DONE = 3'b011\n    } state_t;\n\n    state_t state, next_state;\n    logic [3:0] pattern_shift;\n    logic [1:0] load_counter;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            state <= SEARCH;\n            pattern_shift <= 4'b0000;\n            load_counter <= 2'b00;\n        end else begin\n            state <= next_state;\n            if (state == SEARCH) begin\n                pattern_shift <= {pattern_shift[2:0], data};\n            end\n            if (state == LOAD) begin\n                load_counter <= load_counter + 1;\n            end else begin\n                load_counter <= 2'b00;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = state;\n        shift_ena = 1'b0;\n        counting = 1'b0;\n        done = 1'b0;\n\n        case (state)\n            SEARCH: begin\n                if (pattern_shift == 4'b1101) begin\n                    next_state = LOAD;\n                end\n            end\n            LOAD: begin\n                shift_ena = 1'b1;\n                if (load_counter == 2'b11) begin\n                    next_state = COUNTING;\n                end\n            end\n            COUNTING: begin\n                counting = 1'b1;\n                if (done_counting) begin\n                    next_state = DONE;\n                end\n            end\n            DONE: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = SEARCH;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 486,
        "passfail": "R"
    }
}