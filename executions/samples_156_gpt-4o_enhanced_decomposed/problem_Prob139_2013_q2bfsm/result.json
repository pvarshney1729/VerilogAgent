{
    "code": "module TopModule(\n    input logic clk,\n    input logic resetn,\n    input logic x,\n    input logic y,\n    output logic f,\n    output logic g\n);\n\n    typedef enum logic [2:0] {\n        STATE_A = 3'b000,\n        STATE_B = 3'b001,\n        STATE_C = 3'b010,\n        STATE_D = 3'b011,\n        STATE_E = 3'b100,\n        STATE_F = 3'b101\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [1:0] x_sequence;\n    logic [1:0] y_counter;\n\n    always_ff @(posedge clk) begin\n        if (!resetn) begin\n            current_state <= STATE_A;\n            x_sequence <= 2'b00;\n            y_counter <= 2'b00;\n        end else begin\n            current_state <= next_state;\n            if (current_state == STATE_C) begin\n                x_sequence <= {x_sequence[0], x};\n            end\n            if (current_state == STATE_D) begin\n                y_counter <= y_counter + 1;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        f = 1'b0;\n        g = 1'b0;\n        case (current_state)\n            STATE_A: begin\n                if (resetn) next_state = STATE_B;\n            end\n            STATE_B: begin\n                f = 1'b1;\n                next_state = STATE_C;\n            end\n            STATE_C: begin\n                if (x_sequence == 2'b10 && x == 1'b1) begin\n                    next_state = STATE_D;\n                end\n            end\n            STATE_D: begin\n                g = 1'b1;\n                if (y == 1'b1) begin\n                    next_state = STATE_E;\n                end else if (y_counter == 2'b10) begin\n                    next_state = STATE_F;\n                end\n            end\n            STATE_E: begin\n                g = 1'b1;\n            end\n            STATE_F: begin\n                g = 1'b0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 240,
        "passfail": "R"
    }
}