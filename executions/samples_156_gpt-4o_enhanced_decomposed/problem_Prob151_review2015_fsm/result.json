{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic done_counting,\n    input logic ack,\n    output logic shift_ena,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        PATTERN_DETECTED = 3'b001,\n        SHIFT = 3'b010,\n        COUNT = 3'b011,\n        DONE = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] shift_counter;\n    logic [3:0] pattern_shift_reg;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            shift_counter <= 4'b0000;\n            pattern_shift_reg <= 4'b0000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == SHIFT) begin\n                shift_counter <= shift_counter + 1;\n            end else begin\n                shift_counter <= 4'b0000;\n            end\n            pattern_shift_reg <= {pattern_shift_reg[2:0], data};\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (pattern_shift_reg == 4'b1101) begin\n                    next_state = PATTERN_DETECTED;\n                end\n            end\n            PATTERN_DETECTED: begin\n                next_state = SHIFT;\n            end\n            SHIFT: begin\n                if (shift_counter == 4'b0100) begin\n                    next_state = COUNT;\n                end\n            end\n            COUNT: begin\n                if (done_counting) begin\n                    next_state = DONE;\n                end\n            end\n            DONE: begin\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        shift_ena = (current_state == SHIFT);\n        counting = (current_state == COUNT);\n        done = (current_state == DONE);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "R"
    }
}