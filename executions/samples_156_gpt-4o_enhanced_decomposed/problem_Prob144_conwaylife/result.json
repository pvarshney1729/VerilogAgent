{
    "code": "module TopModule(\n    input logic clk,\n    input logic load,\n    input logic [255:0] data,\n    output logic [255:0] q\n);\n\n    logic [15:0][15:0] grid, next_grid;\n    integer i, j, ni, nj, neighbors;\n\n    always_ff @(posedge clk) begin\n        if (load) begin\n            // Load initial state into grid\n            for (i = 0; i < 16; i = i + 1) begin\n                grid[i] <= data[i*16 +: 16];\n            end\n        end else begin\n            // Update grid state\n            for (i = 0; i < 16; i = i + 1) begin\n                for (j = 0; j < 16; j = j + 1) begin\n                    // Count alive neighbors\n                    neighbors = 0;\n                    for (ni = -1; ni <= 1; ni = ni + 1) begin\n                        for (nj = -1; nj <= 1; nj = nj + 1) begin\n                            if (!(ni == 0 && nj == 0)) begin\n                                neighbors = neighbors + grid[(i + ni + 16) % 16][(j + nj + 16) % 16];\n                            end\n                        end\n                    end\n\n                    // Apply rules\n                    if (neighbors == 3 || (neighbors == 2 && grid[i][j] == 1)) begin\n                        next_grid[i][j] = 1;\n                    end else begin\n                        next_grid[i][j] = 0;\n                    end\n                end\n            end\n\n            // Update grid with next state\n            for (i = 0; i < 16; i = i + 1) begin\n                grid[i] <= next_grid[i];\n            end\n        end\n    end\n\n    // Assign output\n    always_comb begin\n        for (i = 0; i < 16; i = i + 1) begin\n            q[i*16 +: 16] = grid[i];\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    }
}