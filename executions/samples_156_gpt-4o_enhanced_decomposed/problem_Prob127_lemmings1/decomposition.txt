Decomposition Result:[
    {
        "id": "1",
        "content": "Define the module TopModule with input ports clk, areset, bump_left, bump_right, and output ports walk_left, walk_right.",
        "source": "I would like you to implement a module named TopModule with the following interface. All input and output ports are one bit unless otherwise specified.",
        "implementation": "module TopModule (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    output reg walk_left,\n    output reg walk_right\n);\n\n    typedef enum reg {LEFT, RIGHT} state_t;\n    state_t state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= LEFT;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    always @(*) begin\n        case (state)\n            LEFT: begin\n                walk_left = 1;\n                walk_right = 0;\n                if (bump_left) begin\n                    next_state = RIGHT;\n                end else begin\n                    next_state = LEFT;\n                end\n            end\n            RIGHT: begin\n                walk_left = 0;\n                walk_right = 1;\n                if (bump_right) begin\n                    next_state = LEFT;\n                end else begin\n                    next_state = RIGHT;\n                end\n            end\n        endcase\n    end\n\nendmodule"
    },
    {
        "id": "2",
        "content": "Define the state encoding for the FSM with two states: WALK_LEFT and WALK_RIGHT.",
        "source": "The module should implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour.",
        "implementation": "// State encoding for the FSM\n  localparam WALK_LEFT  = 1'b0;\n  localparam WALK_RIGHT = 1'b1;"
    },
    {
        "id": "3",
        "content": "Implement the state transition logic based on the bump_left and bump_right inputs. If bump_left is 1, transition to WALK_RIGHT. If bump_right is 1, transition to WALK_LEFT. If both are 1, switch directions.",
        "source": "It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions.",
        "implementation": "// State encoding\n    localparam WALK_LEFT  = 1'b0;\n    localparam WALK_RIGHT = 1'b1;\n\n    // State transition logic\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= WALK_LEFT; // Reset to WALK_LEFT state\n        end else begin\n            case (state)\n                WALK_LEFT: begin\n                    if (bump_left) begin\n                        state <= WALK_RIGHT;\n                    end\n                end\n                WALK_RIGHT: begin\n                    if (bump_right) begin\n                        state <= WALK_LEFT;\n                    end\n                end\n            endcase\n        end\n    end"
    },
    {
        "id": "4",
        "content": "Implement the output logic for the FSM. When in WALK_LEFT state, set walk_left to 1 and walk_right to 0. When in WALK_RIGHT state, set walk_right to 1 and walk_left to 0.",
        "source": "Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1).",
        "implementation": "// Output logic for the FSM\n  always @(*) begin\n    case (state)\n      WALK_LEFT: begin\n        walk_left = 1;\n        walk_right = 0;\n      end\n      WALK_RIGHT: begin\n        walk_left = 0;\n        walk_right = 1;\n      end\n      default: begin\n        walk_left = 0;\n        walk_right = 0;\n      end\n    endcase\n  end"
    }
]

Modified Base Query:


I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  areset
 - input  bump_left
 - input  bump_right
 - output walk_left
 - output walk_right

The module should implement a simple game called Lemmings which involves
critters with fairly simple brains. So simple that we are going to model
it using a finite state machine. In the Lemmings' 2D world, Lemmings can
be in one of two states: walking left (walk_left is 1) or walking right
(walk_right is 1). It will switch directions if it hits an obstacle. In
particular, if a Lemming is bumped on the left (by receiving a 1 on
bump_left), it will walk right. If it's bumped on the right (by receiving
a 1 on bump_right), it will walk left. If it's bumped on both sides at
the same time, it will still switch directions.

The module should implement a Moore state machine with two states, two
inputs, and one output (internal to the module) that models this
behaviour. areset is positive edge triggered asynchronous resetting the
Lemming machine to walk left. Assume all sequential logic is triggered on
the positive edge of the clock.

