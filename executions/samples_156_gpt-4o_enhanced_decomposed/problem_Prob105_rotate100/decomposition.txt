Decomposition Result:[
    {
        "id": "1",
        "content": "Define the TopModule with input ports clk, load, ena[1:0], data[99:0] and output port q[99:0].",
        "source": "I would like you to implement a module named TopModule with the following interface. All input and output ports are one bit unless otherwise specified.",
        "implementation": "module TopModule (\n    input clk,\n    input load,\n    input [1:0] ena,\n    input [99:0] data,\n    output reg [99:0] q\n);\n\n    always @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else begin\n            case (ena)\n                2'b01: q <= {q[0], q[99:1]};  // Rotate right\n                2'b10: q <= {q[98:0], q[99]}; // Rotate left\n                default: q <= q;              // No rotation\n            endcase\n        end\n    end\n\nendmodule"
    },
    {
        "id": "2",
        "content": "Implement the synchronous load functionality to load data[99:0] into the shift register when load is high.",
        "source": "(1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.",
        "implementation": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end\nend"
    },
    {
        "id": "3",
        "content": "Implement the logic to rotate the shift register right by one bit when ena is 2'b01.",
        "source": "(2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: (a) 2'b01 rotates right by one bit.",
        "implementation": "always @(posedge clk) begin\n    if (ena == 2'b01) begin\n        q <= {q[0], q[99:1]};\n    end\nend"
    },
    {
        "id": "4",
        "content": "Implement the logic to rotate the shift register left by one bit when ena is 2'b10.",
        "source": "(2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: (b) 2'b10 rotates left by one bit.",
        "implementation": "always @(posedge clk) begin\n    if (ena == 2'b10) begin\n        q <= {q[98:0], q[99]};\n    end\nend"
    }
]

Modified Base Query:


I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  load
 - input  ena  (  2 bits)
 - input  data (100 bits)
 - output q    (100 bits)

The module should implement a 100-bit left/right rotator, with
synchronous load and left/right enable. A rotator shifts-in the
shifted-out bit from the other end of the register, unlike a shifter that
discards the shifted-out bit and shifts in a zero. If enabled, a rotator
rotates the bits around and does not modify/discard them.

  (1) load: Loads shift register with data[99:0] instead of rotating.
      Synchronous active high.

  (2) ena[1:0]: Synchronous. Chooses whether and which direction to
      rotate:
      (a) 2'b01 rotates right by one bit,
      (b) 2'b10 rotates left by one bit,
      (c) 2'b00 and 2'b11 do not rotate.

  (3) q: The contents of the rotator.

