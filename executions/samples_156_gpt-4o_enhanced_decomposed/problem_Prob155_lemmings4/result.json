{
    "code": "module TopModule(\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    typedef enum logic [2:0] {\n        WALK_LEFT,\n        WALK_RIGHT,\n        FALL_LEFT,\n        FALL_RIGHT,\n        DIG_LEFT,\n        DIG_RIGHT,\n        SPLATTER\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [4:0] fall_count; // 5 bits to count up to 21\n\n    // State transition logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= WALK_LEFT;\n            fall_count <= 5'd0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == FALL_LEFT || current_state == FALL_RIGHT) begin\n                fall_count <= fall_count + 5'd1;\n            end else begin\n                fall_count <= 5'd0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = FALL_LEFT;\n                end else if (dig) begin\n                    next_state = DIG_LEFT;\n                end else if (bump_left) begin\n                    next_state = WALK_RIGHT;\n                end else begin\n                    next_state = WALK_LEFT;\n                end\n            end\n            WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = FALL_RIGHT;\n                end else if (dig) begin\n                    next_state = DIG_RIGHT;\n                end else if (bump_right) begin\n                    next_state = WALK_LEFT;\n                end else begin\n                    next_state = WALK_RIGHT;\n                end\n            end\n            FALL_LEFT: begin\n                if (ground) begin\n                    if (fall_count > 5'd20) begin\n                        next_state = SPLATTER;\n                    end else begin\n                        next_state = WALK_LEFT;\n                    end\n                end else begin\n                    next_state = FALL_LEFT;\n                end\n            end\n            FALL_RIGHT: begin\n                if (ground) begin\n                    if (fall_count > 5'd20) begin\n                        next_state = SPLATTER;\n                    end else begin\n                        next_state = WALK_RIGHT;\n                    end\n                end else begin\n                    next_state = FALL_RIGHT;\n                end\n            end\n            DIG_LEFT: begin\n                if (!ground) begin\n                    next_state = FALL_LEFT;\n                end else begin\n                    next_state = DIG_LEFT;\n                end\n            end\n            DIG_RIGHT: begin\n                if (!ground) begin\n                    next_state = FALL_RIGHT;\n                end else begin\n                    next_state = DIG_RIGHT;\n                end\n            end\n            SPLATTER: begin\n                next_state = SPLATTER;\n            end\n            default: begin\n                next_state = WALK_LEFT;\n            end\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left = (current_state == WALK_LEFT);\n        walk_right = (current_state == WALK_RIGHT);\n        aaah = (current_state == FALL_LEFT || current_state == FALL_RIGHT);\n        digging = (current_state == DIG_LEFT || current_state == DIG_RIGHT);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 156,
        "passfail": "R"
    }
}