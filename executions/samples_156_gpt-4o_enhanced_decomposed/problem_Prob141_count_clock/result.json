{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic ena,\n    output logic pm,\n    output logic [7:0] hh,\n    output logic [7:0] mm,\n    output logic [7:0] ss\n);\n\n    // Internal registers for BCD counters\n    logic [3:0] sec_ones, sec_tens;\n    logic [3:0] min_ones, min_tens;\n    logic [3:0] hour_ones, hour_tens;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            // Reset to 12:00:00 AM\n            sec_ones <= 4'd0;\n            sec_tens <= 4'd0;\n            min_ones <= 4'd0;\n            min_tens <= 4'd0;\n            hour_ones <= 4'd2;\n            hour_tens <= 4'd1;\n            pm <= 1'b0;\n        end else if (ena) begin\n            // Increment seconds\n            if (sec_ones == 4'd9) begin\n                sec_ones <= 4'd0;\n                if (sec_tens == 4'd5) begin\n                    sec_tens <= 4'd0;\n                    // Increment minutes\n                    if (min_ones == 4'd9) begin\n                        min_ones <= 4'd0;\n                        if (min_tens == 4'd5) begin\n                            min_tens <= 4'd0;\n                            // Increment hours\n                            if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin\n                                hour_ones <= 4'd1;\n                                if (hour_tens == 4'd1) begin\n                                    hour_tens <= 4'd0;\n                                    pm <= ~pm; // Toggle AM/PM\n                                end else begin\n                                    hour_tens <= 4'd1;\n                                end\n                            end else begin\n                                hour_ones <= hour_ones + 4'd1;\n                            end\n                        end else begin\n                            min_tens <= min_tens + 4'd1;\n                        end\n                    end else begin\n                        min_ones <= min_ones + 4'd1;\n                    end\n                end else begin\n                    sec_tens <= sec_tens + 4'd1;\n                end\n            end else begin\n                sec_ones <= sec_ones + 4'd1;\n            end\n        end\n    end\n\n    // Concatenate BCD digits to form the output\n    assign ss = {sec_tens, sec_ones};\n    assign mm = {min_tens, min_ones};\n    assign hh = {hour_tens, hour_ones};\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}