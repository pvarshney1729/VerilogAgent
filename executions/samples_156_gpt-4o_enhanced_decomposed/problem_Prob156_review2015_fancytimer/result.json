{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic data,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done,\n    input logic ack\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        PATTERN_DETECT = 3'b001,\n        LOAD_DELAY = 3'b010,\n        COUNTING = 3'b011,\n        DONE = 3'b100\n    } state_t;\n\n    state_t state, next_state;\n    logic [3:0] delay;\n    logic [3:0] pattern_shift;\n    logic [3:0] delay_shift;\n    logic [13:0] cycle_counter;\n\n    // State transition\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            state <= IDLE;\n            pattern_shift <= 4'b0000;\n            delay_shift <= 4'b0000;\n            cycle_counter <= 14'b0;\n            delay <= 4'b0000;\n        end else begin\n            state <= next_state;\n            if (state == IDLE) begin\n                pattern_shift <= {pattern_shift[2:0], data};\n            end else if (state == PATTERN_DETECT) begin\n                delay_shift <= {delay_shift[2:0], data};\n            end else if (state == LOAD_DELAY) begin\n                delay <= delay_shift;\n            end else if (state == COUNTING) begin\n                if (cycle_counter != 14'b0) begin\n                    cycle_counter <= cycle_counter - 1;\n                end\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = state;\n        counting = 1'b0;\n        done = 1'b0;\n        count = 4'bxxxx; // Don't care when not counting\n\n        case (state)\n            IDLE: begin\n                if (pattern_shift == 4'b1101) begin\n                    next_state = PATTERN_DETECT;\n                end\n            end\n            PATTERN_DETECT: begin\n                if (delay_shift == 4'b1111) begin // After 4 shifts\n                    next_state = LOAD_DELAY;\n                end\n            end\n            LOAD_DELAY: begin\n                cycle_counter = (delay + 1) * 1000;\n                next_state = COUNTING;\n            end\n            COUNTING: begin\n                counting = 1'b1;\n                count = cycle_counter[13:10]; // Remaining time in terms of 1000 cycles\n                if (cycle_counter == 14'b0) begin\n                    next_state = DONE;\n                end\n            end\n            DONE: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}