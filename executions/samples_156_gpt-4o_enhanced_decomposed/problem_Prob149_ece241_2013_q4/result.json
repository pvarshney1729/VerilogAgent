{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic [2:0] s,\n    output logic fr2,\n    output logic fr1,\n    output logic fr0,\n    output logic dfr\n);\n\n    typedef enum logic [1:0] {\n        ABOVE_S2 = 2'b00,\n        BETWEEN_S2_S1 = 2'b01,\n        BETWEEN_S1_S0 = 2'b10,\n        BELOW_S0 = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic previous_level_higher;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= BELOW_S0;\n            previous_level_higher <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            previous_level_higher <= (s > {1'b0, current_state});\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (s)\n            3'b111: next_state = ABOVE_S2;\n            3'b011: next_state = BETWEEN_S2_S1;\n            3'b001: next_state = BETWEEN_S1_S0;\n            default: next_state = BELOW_S0;\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        fr2 = 1'b0;\n        fr1 = 1'b0;\n        fr0 = 1'b0;\n        dfr = 1'b0;\n        \n        case (current_state)\n            ABOVE_S2: begin\n                // No flow\n            end\n            BETWEEN_S2_S1: begin\n                fr0 = 1'b1;\n                dfr = previous_level_higher;\n            end\n            BETWEEN_S1_S0: begin\n                fr0 = 1'b1;\n                fr1 = 1'b1;\n                dfr = previous_level_higher;\n            end\n            BELOW_S0: begin\n                fr0 = 1'b1;\n                fr1 = 1'b1;\n                fr2 = 1'b1;\n                dfr = 1'b1;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 601,
        "passfail": "R"
    }
}