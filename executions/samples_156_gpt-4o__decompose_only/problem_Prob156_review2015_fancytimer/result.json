{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic data,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done,\n    input logic ack\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        DETECT_1 = 3'b001,\n        DETECT_11 = 3'b010,\n        DETECT_110 = 3'b011,\n        DETECT_1101 = 3'b100,\n        LOAD_DELAY = 3'b101,\n        COUNTING = 3'b110,\n        DONE = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay;\n    logic [9:0] cycle_counter;\n    logic [3:0] bit_counter;\n    logic [3:0] delay_reg;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            cycle_counter <= 10'd0;\n            bit_counter <= 4'd0;\n            delay <= 4'd0;\n            delay_reg <= 4'd0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == LOAD_DELAY) begin\n                delay_reg <= {delay_reg[2:0], data};\n                bit_counter <= bit_counter + 1;\n            end else if (current_state == COUNTING) begin\n                if (cycle_counter == 10'd999) begin\n                    cycle_counter <= 10'd0;\n                    if (delay > 0) begin\n                        delay <= delay - 1;\n                    end\n                end else begin\n                    cycle_counter <= cycle_counter + 1;\n                end\n            end\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        // Default values\n        next_state = current_state;\n        counting = 1'b0;\n        done = 1'b0;\n        count = 4'bxxxx; // Don't care when not counting\n\n        case (current_state)\n            IDLE: begin\n                if (data) next_state = DETECT_1;\n            end\n            DETECT_1: begin\n                if (data) next_state = DETECT_11;\n                else next_state = IDLE;\n            end\n            DETECT_11: begin\n                if (!data) next_state = DETECT_110;\n                else next_state = IDLE;\n            end\n            DETECT_110: begin\n                if (data) next_state = DETECT_1101;\n                else next_state = IDLE;\n            end\n            DETECT_1101: begin\n                next_state = LOAD_DELAY;\n                bit_counter = 4'd0;\n            end\n            LOAD_DELAY: begin\n                if (bit_counter == 4'd3) begin\n                    delay = delay_reg;\n                    next_state = COUNTING;\n                end\n            end\n            COUNTING: begin\n                counting = 1'b1;\n                count = delay;\n                if (delay == 0 && cycle_counter == 10'd999) begin\n                    next_state = DONE;\n                end\n            end\n            DONE: begin\n                done = 1'b1;\n                if (ack) next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}