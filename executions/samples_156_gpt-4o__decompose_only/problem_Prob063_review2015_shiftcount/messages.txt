[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  shift_ena\n - input  count_ena\n - input  data\n - output q (4 bits)\n\nThe module should implement a four-bit shift register that also acts as a\ndown counter. Data is shifted in most-significant-bit first when\nshift_ena is 1. The number currently in the shift register is decremented\nwhen count_ena is 1. Since the full system doesn't ever use shift_ena and\ncount_ena together, it does not matter what your circuit does if both\ncontrol inputs are 1 (this mainly means that it doesn't matter which case\ngets higher priority). Assume all sequential logic is triggered on the\npositive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have decomposed it into the following subtasks and come up with an approach for each:\n                    SUBTASK 1: Define the TopModule with input ports clk, shift_ena, count_ena, data, and output port q[3:0].\nIMPLEMENTATION:\nmodule TopModule (\n    input clk,\n    input shift_ena,\n    input count_ena,\n    input data,\n    output reg [3:0] q\n);\n\n    always @(posedge clk) begin\n        if (shift_ena) begin\n            q <= {q[2:0], data}; // Shift left and insert new data at LSB\n        end else if (count_ena) begin\n            q <= q - 1; // Decrement the current value\n        end\n    end\n\nendmodule\n\nSUBTASK 2: Implement a 4-bit shift register that shifts in data to the most significant bit when shift_ena is high.\nIMPLEMENTATION:\nreg [3:0] shift_reg;\n\nalways @(posedge clk) begin\n    if (shift_ena) begin\n        shift_reg <= {shift_reg[2:0], data};\n    end else if (count_ena) begin\n        shift_reg <= shift_reg - 1;\n    end\nend\n\nassign q = shift_reg;\n\nSUBTASK 3: Implement the down counter functionality that decrements the current value in the shift register when count_ena is high.\nIMPLEMENTATION:\nalways @(posedge clk) begin\n    if (count_ena) begin\n        q <= q - 1;\n    end\nend\n\nSUBTASK 4: Ensure the shift register and counter operations are triggered on the positive edge of the clock.\nIMPLEMENTATION:\nalways @(posedge clk) begin\n    if (shift_ena) begin\n        q <= {q[2:0], data}; // Shift left and insert new data at LSB\n    end else if (count_ena) begin\n        q <= q - 1; // Decrement the counter\n    end\nend\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness. You can use your subtasks as hints to create a single, complete, and coherent Verilog module that satisfies the original specification."
    }
]