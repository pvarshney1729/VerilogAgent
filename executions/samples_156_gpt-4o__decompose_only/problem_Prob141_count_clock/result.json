{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic ena,\n    output logic pm,\n    output logic [7:0] hh,\n    output logic [7:0] mm,\n    output logic [7:0] ss\n);\n\n    // Internal signals for carry between counters\n    logic carry_out_ss;\n    logic carry_out_mm;\n\n    // Seconds counter\n    always @(posedge clk) begin\n        if (reset) begin\n            ss <= 8'b0000_0000; // Reset seconds to 00\n        end else if (ena) begin\n            if (ss == 8'b0101_1001) begin // Check if seconds are 59\n                ss <= 8'b0000_0000; // Reset to 00\n            end else begin\n                ss <= ss + 1; // Increment seconds\n            end\n        end\n    end\n\n    assign carry_out_ss = (ss == 8'b0101_1001) && ena; // Carry out when seconds reset from 59 to 00\n\n    // Minutes counter\n    always @(posedge clk) begin\n        if (reset) begin\n            mm <= 8'b0000_0000; // Reset minutes to 00\n        end else if (carry_out_ss) begin\n            if (mm == 8'b0101_1001) begin // Check if minutes are 59\n                mm <= 8'b0000_0000; // Reset to 00\n            end else begin\n                if (mm[3:0] == 4'b1001) begin // Check if lower BCD digit is 9\n                    mm[3:0] <= 4'b0000; // Reset lower BCD digit\n                    mm[7:4] <= mm[7:4] + 1; // Increment upper BCD digit\n                end else begin\n                    mm[3:0] <= mm[3:0] + 1; // Increment lower BCD digit\n                end\n            end\n        end\n    end\n\n    assign carry_out_mm = (mm == 8'b0101_1001) && carry_out_ss; // Carry out when minutes reset from 59 to 00\n\n    // Hours counter\n    always @(posedge clk) begin\n        if (reset) begin\n            hh <= 8'b0001_0010; // Reset hours to 12\n            pm <= 1'b0;         // Reset to AM\n        end else if (carry_out_mm) begin\n            if (hh == 8'b0001_0010) begin // Check if hours are 12\n                hh <= 8'b0000_0001; // Reset to 01\n                pm <= ~pm;          // Toggle PM\n            end else begin\n                if (hh[3:0] == 4'b1001) begin // If lower BCD digit is 9\n                    hh[3:0] <= 4'b0000;       // Reset lower BCD digit\n                    hh[7:4] <= hh[7:4] + 1;   // Increment upper BCD digit\n                end else begin\n                    hh[3:0] <= hh[3:0] + 1;   // Increment lower BCD digit\n                end\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}