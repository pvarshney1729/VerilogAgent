[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  code (8 bits)\n - output out  (4 bits)\n - output valid\n\nThe module should recognize 8-bit keyboard scancodes for keys 0 through\n9. It should indicate whether one of the 10 cases were recognized\n(valid), and if so, which key was detected. If the 8-bit input is 8'h45,\n8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the\n4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively,\nthe 1-bit valid would be set to 1. If the input does not match any of the\ncases, both output signals would be set to 0.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have decomposed it into the following subtasks and come up with an approach for each:\n                    SUBTASK 1: Define the module TopModule with input port 'code' (8 bits) and output ports 'out' (4 bits) and 'valid' (1 bit).\nIMPLEMENTATION:\nmodule TopModule(\n    input [7:0] code,\n    output reg [3:0] out,\n    output reg valid\n);\n\nalways @(*) begin\n    case (code)\n        8'h45: begin out = 4'd0; valid = 1'b1; end\n        8'h16: begin out = 4'd1; valid = 1'b1; end\n        8'h1e: begin out = 4'd2; valid = 1'b1; end\n        8'h26: begin out = 4'd3; valid = 1'b1; end\n        8'h25: begin out = 4'd4; valid = 1'b1; end\n        8'h2e: begin out = 4'd5; valid = 1'b1; end\n        8'h36: begin out = 4'd6; valid = 1'b1; end\n        8'h3d: begin out = 4'd7; valid = 1'b1; end\n        8'h3e: begin out = 4'd8; valid = 1'b1; end\n        8'h46: begin out = 4'd9; valid = 1'b1; end\n        default: begin out = 4'd0; valid = 1'b0; end\n    endcase\nend\n\nendmodule\n\nSUBTASK 2: Implement logic to compare the input 'code' with the scancode 8'h45 and set 'out' to 4'b0000 and 'valid' to 1 if matched.\nIMPLEMENTATION:\nalways @(*) begin\n    if (code == 8'h45) begin\n        out = 4'b0000;\n        valid = 1'b1;\n    end else begin\n        out = 4'b0000;\n        valid = 1'b0;\n    end\nend\n\nSUBTASK 3: Implement logic to compare the input 'code' with the scancode 8'h16 and set 'out' to 4'b0001 and 'valid' to 1 if matched.\nIMPLEMENTATION:\nalways @(*) begin\n    if (code == 8'h16) begin\n        out = 4'b0001;\n        valid = 1'b1;\n    end else begin\n        out = 4'b0000;\n        valid = 1'b0;\n    end\nend\n\nSUBTASK 4: Implement logic to compare the input 'code' with the scancode 8'h1e and set 'out' to 4'b0010 and 'valid' to 1 if matched.\nIMPLEMENTATION:\nalways @(*) begin\n    if (code == 8'h1e) begin\n        out = 4'b0010;\n        valid = 1'b1;\n    end else begin\n        out = 4'b0000;\n        valid = 1'b0;\n    end\nend\n\nSUBTASK 5: Implement logic to compare the input 'code' with the scancode 8'h26 and set 'out' to 4'b0011 and 'valid' to 1 if matched.\nIMPLEMENTATION:\nalways @(*) begin\n    if (code == 8'h26) begin\n        out = 4'b0011;\n        valid = 1'b1;\n    end else begin\n        out = 4'b0000;\n        valid = 1'b0;\n    end\nend\n\nSUBTASK 6: Implement logic to compare the input 'code' with the scancode 8'h25 and set 'out' to 4'b0100 and 'valid' to 1 if matched.\nIMPLEMENTATION:\nalways @(*) begin\n    if (code == 8'h25) begin\n        out = 4'b0100;\n        valid = 1'b1;\n    end else begin\n        out = 4'b0000;\n        valid = 1'b0;\n    end\nend\n\nSUBTASK 7: Implement logic to compare the input 'code' with the scancode 8'h2e and set 'out' to 4'b0101 and 'valid' to 1 if matched.\nIMPLEMENTATION:\nalways @(*) begin\n    if (code == 8'h2e) begin\n        out = 4'b0101;\n        valid = 1'b1;\n    end else begin\n        out = 4'b0000;\n        valid = 1'b0;\n    end\nend\n\nSUBTASK 8: Implement logic to compare the input 'code' with the scancode 8'h36 and set 'out' to 4'b0110 and 'valid' to 1 if matched.\nIMPLEMENTATION:\nalways @(*) begin\n    if (code == 8'h36) begin\n        out = 4'b0110;\n        valid = 1'b1;\n    end else begin\n        out = 4'b0000;\n        valid = 1'b0;\n    end\nend\n\nSUBTASK 9: Implement logic to compare the input 'code' with the scancode 8'h3d and set 'out' to 4'b0111 and 'valid' to 1 if matched.\nIMPLEMENTATION:\nalways @(*) begin\n    if (code == 8'h3d) begin\n        out = 4'b0111;\n        valid = 1'b1;\n    end else begin\n        out = 4'b0000;\n        valid = 1'b0;\n    end\nend\n\nSUBTASK 10: Implement logic to compare the input 'code' with the scancode 8'h3e and set 'out' to 4'b1000 and 'valid' to 1 if matched.\nIMPLEMENTATION:\nalways @(*) begin\n    if (code == 8'h3e) begin\n        out = 4'b1000;\n        valid = 1'b1;\n    end else begin\n        out = 4'b0000;\n        valid = 1'b0;\n    end\nend\n\nSUBTASK 11: Implement logic to compare the input 'code' with the scancode 8'h46 and set 'out' to 4'b1001 and 'valid' to 1 if matched.\nIMPLEMENTATION:\nalways @(*) begin\n    if (code == 8'h46) begin\n        out = 4'b1001;\n        valid = 1'b1;\n    end else begin\n        out = 4'b0000;\n        valid = 1'b0;\n    end\nend\n\nSUBTASK 12: Implement default logic to set 'out' to 4'b0000 and 'valid' to 0 if the input 'code' does not match any specified scancode.\nIMPLEMENTATION:\nalways @(*) begin\n    case (code)\n        8'h45: begin out = 4'b0000; valid = 1'b1; end\n        8'h16: begin out = 4'b0001; valid = 1'b1; end\n        8'h1e: begin out = 4'b0010; valid = 1'b1; end\n        8'h26: begin out = 4'b0011; valid = 1'b1; end\n        8'h25: begin out = 4'b0100; valid = 1'b1; end\n        8'h2e: begin out = 4'b0101; valid = 1'b1; end\n        8'h36: begin out = 4'b0110; valid = 1'b1; end\n        8'h3d: begin out = 4'b0111; valid = 1'b1; end\n        8'h3e: begin out = 4'b1000; valid = 1'b1; end\n        8'h46: begin out = 4'b1001; valid = 1'b1; end\n        default: begin out = 4'b0000; valid = 1'b0; end\n    endcase\nend\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness. You can use your subtasks as hints to create a single, complete, and coherent Verilog module that satisfies the original specification."
    }
]