[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  bump_left\n - input  bump_right\n - input  ground\n - output walk_left\n - output walk_right\n - output aaah\n\nThe game Lemmings involves critters with fairly simple brains. So simple\nthat we are going to model it using a finite state machine. In the\nLemmings' 2D world, Lemmings can be in one of two states: walking left\n(walk_left is 1) or walking right (walk_right is 1). It will switch\ndirections if it hits an obstacle. In particular, if a Lemming is bumped\non the left (by receiving a 1 on bump_left), it will walk right. If it's\nbumped on the right (by receiving a 1 on bump_right), it will walk left.\nIf it's bumped on both sides at the same time, it will still switch\ndirections.\n\nIn addition to walking left and right and changing direction when bumped,\nwhen ground=0, the Lemming will fall and say \"aaah!\". When the ground\nreappears (ground=1), the Lemming will resume walking in the same\ndirection as before the fall. Being bumped while falling does not affect\nthe walking direction, and being bumped in the same cycle as ground\ndisappears (but not yet falling), or when the ground reappears while\nstill falling, also does not affect the walking direction.\n\nImplement a Moore state machine that models this behaviour. areset is\npositive edge triggered asynchronous reseting the Lemming machine to walk\nleft. Assume all sequential logic is triggered on the positive edge of\nthe clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have decomposed it into the following subtasks and come up with an approach for each:\n                    SUBTASK 1: Define the module TopModule with the specified input and output ports: clk, areset, bump_left, bump_right, ground, walk_left, walk_right, and aaah.\nIMPLEMENTATION:\nmodule TopModule (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    output reg walk_left,\n    output reg walk_right,\n    output reg aaah\n);\n\n    typedef enum reg [1:0] {\n        STATE_WALK_LEFT = 2'b00,\n        STATE_WALK_RIGHT = 2'b01,\n        STATE_FALL_LEFT = 2'b10,\n        STATE_FALL_RIGHT = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= STATE_WALK_LEFT;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always @(*) begin\n        case (current_state)\n            STATE_WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = STATE_FALL_LEFT;\n                end else if (bump_left || bump_right) begin\n                    next_state = STATE_WALK_RIGHT;\n                end else begin\n                    next_state = STATE_WALK_LEFT;\n                end\n            end\n            STATE_WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = STATE_FALL_RIGHT;\n                end else if (bump_left || bump_right) begin\n                    next_state = STATE_WALK_LEFT;\n                end else begin\n                    next_state = STATE_WALK_RIGHT;\n                end\n            end\n            STATE_FALL_LEFT: begin\n                if (ground) begin\n                    next_state = STATE_WALK_LEFT;\n                end else begin\n                    next_state = STATE_FALL_LEFT;\n                end\n            end\n            STATE_FALL_RIGHT: begin\n                if (ground) begin\n                    next_state = STATE_WALK_RIGHT;\n                end else begin\n                    next_state = STATE_FALL_RIGHT;\n                end\n            end\n            default: next_state = STATE_WALK_LEFT;\n        endcase\n    end\n\n    always @(*) begin\n        walk_left = (current_state == STATE_WALK_LEFT);\n        walk_right = (current_state == STATE_WALK_RIGHT);\n        aaah = (current_state == STATE_FALL_LEFT) || (current_state == STATE_FALL_RIGHT);\n    end\n\nendmodule\n\nSUBTASK 2: Define the states for the FSM: WALK_LEFT, WALK_RIGHT, and FALLING.\nIMPLEMENTATION:\n// State encoding for the FSM\n  typedef enum logic [1:0] {\n    WALK_LEFT  = 2'b00,\n    WALK_RIGHT = 2'b01,\n    FALLING    = 2'b10\n  } state_t;\n\nSUBTASK 3: Implement the state transition logic for the FSM based on bump_left, bump_right, and ground signals.\nIMPLEMENTATION:\n```verilog\n[BEGIN]\n  // State encoding\n  typedef enum logic [1:0] {\n    WALK_LEFT  = 2'b00,\n    WALK_RIGHT = 2'b01,\n    FALL_LEFT  = 2'b10,\n    FALL_RIGHT = 2'b11\n  } state_t;\n\n  state_t current_state, next_state;\n\n  // State transition logic\n  always_comb begin\n    case (current_state)\n      WALK_LEFT: begin\n        if (!ground)\n          next_state = FALL_LEFT;\n        else if (bump_left)\n          next_state = WALK_RIGHT;\n        else\n          next_state = WALK_LEFT;\n      end\n      WALK_RIGHT: begin\n        if (!ground)\n          next_state = FALL_RIGHT;\n        else if (bump_right)\n          next_state = WALK_LEFT;\n        else\n          next_state = WALK_RIGHT;\n      end\n      FALL_LEFT: begin\n        if (ground)\n          next_state = WALK_LEFT;\n        else\n          next_state = FALL_LEFT;\n      end\n      FALL_RIGHT: begin\n        if (ground)\n          next_state = WALK_RIGHT;\n        else\n          next_state = FALL_RIGHT;\n      end\n      default: next_state = WALK_LEFT; // Default state\n    endcase\n  end\n[END]\n```\n\nSUBTASK 4: Implement the output logic for walk_left, walk_right, and aaah based on the current state of the FSM.\nIMPLEMENTATION:\nreg walk_left, walk_right, aaah;\n\nalways @(*) begin\n    case (state)\n        WALK_LEFT: begin\n            walk_left = 1;\n            walk_right = 0;\n            aaah = 0;\n        end\n        WALK_RIGHT: begin\n            walk_left = 0;\n            walk_right = 1;\n            aaah = 0;\n        end\n        FALLING: begin\n            walk_left = 0;\n            walk_right = 0;\n            aaah = 1;\n        end\n        default: begin\n            walk_left = 0;\n            walk_right = 0;\n            aaah = 0;\n        end\n    endcase\nend\n\nSUBTASK 5: Implement the asynchronous reset logic to set the initial state to WALK_LEFT when areset is triggered.\nIMPLEMENTATION:\nreg [1:0] state, next_state;\nlocalparam WALK_LEFT = 2'b00, WALK_RIGHT = 2'b01, FALL_LEFT = 2'b10, FALL_RIGHT = 2'b11;\n\n// Asynchronous reset logic\nalways @(posedge areset or posedge clk) begin\n    if (areset) begin\n        state <= WALK_LEFT;\n    end else begin\n        state <= next_state;\n    end\nend\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness. You can use your subtasks as hints to create a single, complete, and coherent Verilog module that satisfies the original specification."
    }
]