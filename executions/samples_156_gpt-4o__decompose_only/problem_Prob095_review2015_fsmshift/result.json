{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    output logic shift_ena\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        IDLE    = 2'b00, // State where shift_ena is low\n        SHIFT_1 = 2'b01, // State for 1st cycle of shift_ena high\n        SHIFT_2 = 2'b10, // State for 2nd cycle of shift_ena high\n        SHIFT_3 = 2'b11  // State for 3rd cycle of shift_ena high\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= SHIFT_1; // Start with shift_ena high for 4 cycles on reset\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            IDLE:    next_state = IDLE; // Remain in IDLE until reset\n            SHIFT_1: next_state = SHIFT_2;\n            SHIFT_2: next_state = SHIFT_3;\n            SHIFT_3: next_state = IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    assign shift_ena = (current_state != IDLE);\n\nendmodule",
    "test_results": {
        "num_mismatch": 2,
        "passfail": "R"
    }
}