[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  load\n - input  ena\n - input  amount (2 bits)\n - input  data (64 bits)\n - output q (64 bits)\n\nThe module should implement a 64-bit arithmetic shift register, with\nsynchronous load. The shifter can shift both left and right, and by 1 or\n8 bit positions, selected by \"amount.\" Assume the right shit is an\narithmetic right shift.\n\nSignals are defined as below:\n\n  (1) load: Loads shift register with data[63:0] instead of shifting.\n       Active high.\n  (2) ena: Chooses whether to shift. Active high.\n  (3) amount: Chooses which direction and how much to shift.\n      (a) 2'b00: shift left by 1 bit.\n      (b) 2'b01: shift left by 8 bits.\n      (c) 2'b10: shift right by 1 bit.\n      (d) 2'b11: shift right by 8 bits.\n  (4) q: The contents of the shifter.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have decomposed it into the following subtasks and come up with an approach for each:\n                    SUBTASK 1: Define the module TopModule with the specified input and output ports: clk, load, ena, amount (2 bits), data (64 bits), and q (64 bits).\nIMPLEMENTATION:\nmodule TopModule (\n    input clk,\n    input load,\n    input ena,\n    input [1:0] amount,\n    input [63:0] data,\n    output reg [63:0] q\n);\n\nalways @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else if (ena) begin\n        case (amount)\n            2'b00: q <= q << 1;\n            2'b01: q <= q << 8;\n            2'b10: q <= $signed(q) >>> 1;\n            2'b11: q <= $signed(q) >>> 8;\n            default: q <= q;\n        endcase\n    end\nend\n\nendmodule\n\nSUBTASK 2: Implement the synchronous load functionality to load data[63:0] into the shift register when load is high.\nIMPLEMENTATION:\nalways @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end\nend\n\nSUBTASK 3: Implement the enable functionality to allow shifting only when ena is high.\nIMPLEMENTATION:\nalways @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else if (ena) begin\n        case (amount)\n            2'b00: q <= q << 1;\n            2'b01: q <= q << 8;\n            2'b10: q <= q >>> 1;\n            2'b11: q <= q >>> 8;\n            default: q <= q;\n        endcase\n    end\nend\n\nSUBTASK 4: Implement the logic to shift left by 1 bit when amount is 2'b00.\nIMPLEMENTATION:\nalways @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else if (ena) begin\n        case (amount)\n            2'b00: q <= q << 1; // Shift left by 1 bit\n            // Other cases not implemented in this snippet\n        endcase\n    end\nend\n\nSUBTASK 5: Implement the logic to shift left by 8 bits when amount is 2'b01.\nIMPLEMENTATION:\nalways @(posedge clk) begin\n    if (ena) begin\n        if (amount == 2'b01) begin\n            q <= q << 8;\n        end\n    end\nend\n\nSUBTASK 6: Implement the logic to perform an arithmetic right shift by 1 bit when amount is 2'b10.\nIMPLEMENTATION:\nalways @(posedge clk) begin\n    if (ena && amount == 2'b10) begin\n        q <= {q[63], q[63:1]}; // Arithmetic right shift by 1 bit\n    end\nend\n\nSUBTASK 7: Implement the logic to perform an arithmetic right shift by 8 bits when amount is 2'b11.\nIMPLEMENTATION:\nalways @(posedge clk) begin\n    if (ena && amount == 2'b11) begin\n        q <= { {8{q[63]}}, q[63:8] }; // Arithmetic right shift by 8 bits\n    end\nend\n\nSUBTASK 8: Assign the contents of the shift register to the output q.\nIMPLEMENTATION:\nassign q = shift_register;\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness. You can use your subtasks as hints to create a single, complete, and coherent Verilog module that satisfies the original specification."
    }
]