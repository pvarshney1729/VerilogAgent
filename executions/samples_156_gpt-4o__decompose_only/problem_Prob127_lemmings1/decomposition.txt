Decomposition Result:[
    {
        "id": "1",
        "content": "Define the module TopModule with input ports clk, areset, bump_left, bump_right, and output ports walk_left, walk_right.",
        "source": "I would like you to implement a module named TopModule with the following interface. All input and output ports are one bit unless otherwise specified.",
        "implementation": "module TopModule (\n    input  wire clk,\n    input  wire areset,\n    input  wire bump_left,\n    input  wire bump_right,\n    output reg  walk_left,\n    output reg  walk_right\n);\n\n    // State encoding\n    typedef enum reg {LEFT, RIGHT} state_t;\n    state_t state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (state)\n            LEFT: begin\n                if (bump_left)\n                    next_state = RIGHT;\n                else\n                    next_state = LEFT;\n            end\n            RIGHT: begin\n                if (bump_right)\n                    next_state = LEFT;\n                else\n                    next_state = RIGHT;\n            end\n            default: next_state = LEFT;\n        endcase\n    end\n\n    // State flip-flops with asynchronous reset\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= LEFT;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    always @(*) begin\n        case (state)\n            LEFT: begin\n                walk_left = 1;\n                walk_right = 0;\n            end\n            RIGHT: begin\n                walk_left = 0;\n                walk_right = 1;\n            end\n            default: begin\n                walk_left = 1;\n                walk_right = 0;\n            end\n        endcase\n    end\n\nendmodule"
    },
    {
        "id": "2",
        "content": "Define the states for the FSM: WALK_LEFT and WALK_RIGHT.",
        "source": "The module should implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour.",
        "implementation": "// State encoding\n  typedef enum logic [1:0] {\n    WALK_LEFT  = 2'b01,\n    WALK_RIGHT = 2'b10\n  } state_t;"
    },
    {
        "id": "3",
        "content": "Implement the state transition logic: If in WALK_LEFT and bump_left is 1, transition to WALK_RIGHT. If in WALK_RIGHT and bump_right is 1, transition to WALK_LEFT. If bumped on both sides, switch directions.",
        "source": "It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions.",
        "implementation": "// State encoding\n  localparam WALK_LEFT  = 1'b0;\n  localparam WALK_RIGHT = 1'b1;\n\n  // State transition logic\n  always @(posedge clk or posedge areset) begin\n    if (areset) begin\n      state <= WALK_LEFT;\n    end else begin\n      case (state)\n        WALK_LEFT: begin\n          if (bump_left) begin\n            state <= WALK_RIGHT;\n          end\n        end\n        WALK_RIGHT: begin\n          if (bump_right) begin\n            state <= WALK_LEFT;\n          end\n        end\n      endcase\n    end\n  end"
    },
    {
        "id": "4",
        "content": "Implement the asynchronous reset logic: On a positive edge of areset, set the state to WALK_LEFT.",
        "source": "areset is positive edge triggered asynchronous resetting the Lemming machine to walk left.",
        "implementation": "reg state;\nlocalparam WALK_LEFT = 1'b0;\nlocalparam WALK_RIGHT = 1'b1;\n\nalways @(posedge areset or posedge clk) begin\n    if (areset) begin\n        state <= WALK_LEFT;\n    end else begin\n        // Other state transition logic will be here\n    end\nend"
    },
    {
        "id": "5",
        "content": "Implement the output logic for the Moore machine: Set walk_left to 1 when in WALK_LEFT state and walk_right to 1 when in WALK_RIGHT state.",
        "source": "In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1).",
        "implementation": "// Output logic for the Moore machine\n  assign walk_left = (state == WALK_LEFT);\n  assign walk_right = (state == WALK_RIGHT);"
    }
]

Modified Base Query:


I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  areset
 - input  bump_left
 - input  bump_right
 - output walk_left
 - output walk_right

The module should implement a simple game called Lemmings which involves
critters with fairly simple brains. So simple that we are going to model
it using a finite state machine. In the Lemmings' 2D world, Lemmings can
be in one of two states: walking left (walk_left is 1) or walking right
(walk_right is 1). It will switch directions if it hits an obstacle. In
particular, if a Lemming is bumped on the left (by receiving a 1 on
bump_left), it will walk right. If it's bumped on the right (by receiving
a 1 on bump_right), it will walk left. If it's bumped on both sides at
the same time, it will still switch directions.

The module should implement a Moore state machine with two states, two
inputs, and one output (internal to the module) that models this
behaviour. areset is positive edge triggered asynchronous resetting the
Lemming machine to walk left. Assume all sequential logic is triggered on
the positive edge of the clock.

