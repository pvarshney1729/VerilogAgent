[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  bump_left\n - input  bump_right\n - output walk_left\n - output walk_right\n\nThe module should implement a simple game called Lemmings which involves\ncritters with fairly simple brains. So simple that we are going to model\nit using a finite state machine. In the Lemmings' 2D world, Lemmings can\nbe in one of two states: walking left (walk_left is 1) or walking right\n(walk_right is 1). It will switch directions if it hits an obstacle. In\nparticular, if a Lemming is bumped on the left (by receiving a 1 on\nbump_left), it will walk right. If it's bumped on the right (by receiving\na 1 on bump_right), it will walk left. If it's bumped on both sides at\nthe same time, it will still switch directions.\n\nThe module should implement a Moore state machine with two states, two\ninputs, and one output (internal to the module) that models this\nbehaviour. areset is positive edge triggered asynchronous resetting the\nLemming machine to walk left. Assume all sequential logic is triggered on\nthe positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have decomposed it into the following subtasks and come up with an approach for each:\n                    SUBTASK 1: Define the module TopModule with input ports clk, areset, bump_left, bump_right, and output ports walk_left, walk_right.\nIMPLEMENTATION:\nmodule TopModule (\n    input  wire clk,\n    input  wire areset,\n    input  wire bump_left,\n    input  wire bump_right,\n    output reg  walk_left,\n    output reg  walk_right\n);\n\n    // State encoding\n    typedef enum reg {LEFT, RIGHT} state_t;\n    state_t state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (state)\n            LEFT: begin\n                if (bump_left)\n                    next_state = RIGHT;\n                else\n                    next_state = LEFT;\n            end\n            RIGHT: begin\n                if (bump_right)\n                    next_state = LEFT;\n                else\n                    next_state = RIGHT;\n            end\n            default: next_state = LEFT;\n        endcase\n    end\n\n    // State flip-flops with asynchronous reset\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= LEFT;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    always @(*) begin\n        case (state)\n            LEFT: begin\n                walk_left = 1;\n                walk_right = 0;\n            end\n            RIGHT: begin\n                walk_left = 0;\n                walk_right = 1;\n            end\n            default: begin\n                walk_left = 1;\n                walk_right = 0;\n            end\n        endcase\n    end\n\nendmodule\n\nSUBTASK 2: Define the states for the FSM: WALK_LEFT and WALK_RIGHT.\nIMPLEMENTATION:\n// State encoding\n  typedef enum logic [1:0] {\n    WALK_LEFT  = 2'b01,\n    WALK_RIGHT = 2'b10\n  } state_t;\n\nSUBTASK 3: Implement the state transition logic: If in WALK_LEFT and bump_left is 1, transition to WALK_RIGHT. If in WALK_RIGHT and bump_right is 1, transition to WALK_LEFT. If bumped on both sides, switch directions.\nIMPLEMENTATION:\n// State encoding\n  localparam WALK_LEFT  = 1'b0;\n  localparam WALK_RIGHT = 1'b1;\n\n  // State transition logic\n  always @(posedge clk or posedge areset) begin\n    if (areset) begin\n      state <= WALK_LEFT;\n    end else begin\n      case (state)\n        WALK_LEFT: begin\n          if (bump_left) begin\n            state <= WALK_RIGHT;\n          end\n        end\n        WALK_RIGHT: begin\n          if (bump_right) begin\n            state <= WALK_LEFT;\n          end\n        end\n      endcase\n    end\n  end\n\nSUBTASK 4: Implement the asynchronous reset logic: On a positive edge of areset, set the state to WALK_LEFT.\nIMPLEMENTATION:\nreg state;\nlocalparam WALK_LEFT = 1'b0;\nlocalparam WALK_RIGHT = 1'b1;\n\nalways @(posedge areset or posedge clk) begin\n    if (areset) begin\n        state <= WALK_LEFT;\n    end else begin\n        // Other state transition logic will be here\n    end\nend\n\nSUBTASK 5: Implement the output logic for the Moore machine: Set walk_left to 1 when in WALK_LEFT state and walk_right to 1 when in WALK_RIGHT state.\nIMPLEMENTATION:\n// Output logic for the Moore machine\n  assign walk_left = (state == WALK_LEFT);\n  assign walk_right = (state == WALK_RIGHT);\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness. You can use your subtasks as hints to create a single, complete, and coherent Verilog module that satisfies the original specification."
    }
]