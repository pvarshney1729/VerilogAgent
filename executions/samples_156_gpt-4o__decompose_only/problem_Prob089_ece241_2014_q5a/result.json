{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic x,\n    output logic z\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,   // Initial state, waiting for input\n        INVERT = 2'b01, // State to invert bits after the first '1' is encountered\n        PASS = 2'b10    // State to pass bits as they are after inversion\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (x == 1'b1)\n                    next_state = INVERT;\n                else\n                    next_state = IDLE;\n            end\n            INVERT: begin\n                next_state = PASS;\n            end\n            PASS: begin\n                next_state = PASS;\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Output logic based on Moore state machine\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            z <= 1'b0;\n        end else begin\n            case (current_state)\n                IDLE: z <= 1'b0; // Output is 0 in idle state\n                INVERT: z <= ~x; // Invert the input bit\n                PASS: z <= x;    // Pass the input bit\n                default: z <= 1'b0;\n            endcase\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 383,
        "passfail": "R"
    }
}