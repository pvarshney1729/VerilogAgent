[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  in  (4 bits)\n - output pos (2 bits)\n\nThe module should implement a priority encoder. A priority encoder is a\ncombinational circuit that, when given an input bit vector, outputs the\nposition of the first 1 bit in the vector. For example, a 8-bit priority\nencoder given the input 8'b10010000 would output 3'd4, because bit[4] is\nfirst bit that is high. Build a 4-bit priority encoder. For this problem,\nif none of the input bits are high (i.e., input is zero), output zero.\nNote that a 4-bit number has 16 possible combinations.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have decomposed it into the following subtasks and come up with an approach for each:\n                    SUBTASK 1: Define the module TopModule with a 4-bit input port 'in' and a 2-bit output port 'pos'.\nIMPLEMENTATION:\nmodule TopModule (\n    input  [3:0] in,\n    output reg [1:0] pos\n);\n\nalways @(*) begin\n    casez (in)\n        4'b1???: pos = 2'd3;\n        4'b01??: pos = 2'd2;\n        4'b001?: pos = 2'd1;\n        4'b0001: pos = 2'd0;\n        default: pos = 2'd0;\n    endcase\nend\n\nendmodule\n\nSUBTASK 2: Implement the logic to check the highest priority bit (bit 3) of the input 'in'. If it is high, set the output 'pos' to 2'b11.\nIMPLEMENTATION:\nassign pos = (in[3] == 1'b1) ? 2'b11 : 2'b00;\n\nSUBTASK 3: Implement the logic to check the next highest priority bit (bit 2) of the input 'in'. If bit 3 is not high and bit 2 is high, set the output 'pos' to 2'b10.\nIMPLEMENTATION:\nassign pos = (~in[3] & in[2]) ? 2'b10 : pos;\n\nSUBTASK 4: Implement the logic to check the next highest priority bit (bit 1) of the input 'in'. If neither bit 3 nor bit 2 are high and bit 1 is high, set the output 'pos' to 2'b01.\nIMPLEMENTATION:\nassign pos = (~in[3] & ~in[2] & in[1]) ? 2'b01 : 2'b00;\n\nSUBTASK 5: Implement the logic to check the lowest priority bit (bit 0) of the input 'in'. If none of the higher bits are high and bit 0 is high, set the output 'pos' to 2'b00.\nIMPLEMENTATION:\nassign pos = (in == 4'b0001) ? 2'b00 : 2'bxx;\n\nSUBTASK 6: Implement the logic to set the output 'pos' to 2'b00 if none of the input bits are high.\nIMPLEMENTATION:\nassign pos = (in == 4'b0000) ? 2'b00 : pos; // Set pos to 2'b00 if none of the input bits are high\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness. You can use your subtasks as hints to create a single, complete, and coherent Verilog module that satisfies the original specification."
    }
]