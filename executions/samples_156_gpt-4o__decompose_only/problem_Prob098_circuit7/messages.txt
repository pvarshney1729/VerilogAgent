[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  a\n - output q\n\nThis is a sequential circuit. Read the simulation waveforms to determine\nwhat the circuit does, then implement it.\n\n  time  clk a   q\n  0ns   0   x   x\n  5ns   1   0   x\n  10ns  0   0   x\n  15ns  1   0   1\n  20ns  0   0   1\n  25ns  1   0   1\n  30ns  0   0   1\n  35ns  1   1   1\n  40ns  0   1   1\n  45ns  1   1   0\n  50ns  0   1   0\n  55ns  1   1   0\n  60ns  0   1   0\n  65ns  1   1   0\n  70ns  0   1   0\n  75ns  1   1   0\n  80ns  0   1   0\n  85ns  1   1   0\n  90ns  0   1   0\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have decomposed it into the following subtasks and come up with an approach for each:\n                    SUBTASK 1: Define the module TopModule with input ports clk and a, and output port q.\nIMPLEMENTATION:\nmodule TopModule (\n    input clk,\n    input a,\n    output reg q\n);\n\nalways @(posedge clk) begin\n    if (a == 1'b1)\n        q <= 1'b0;\n    else\n        q <= 1'b1;\nend\n\nendmodule\n\nSUBTASK 2: Implement a register to hold the state of output q, which updates on the positive edge of clk.\nIMPLEMENTATION:\nreg q;\n\nalways @(posedge clk) begin\n    q <= a ? ~q : q;\nend\n\nSUBTASK 3: Implement the logic to set q to 1 when a is 0 and q is x, and maintain q as 1 when a is 0.\nIMPLEMENTATION:\nreg q;\n\nalways @(posedge clk) begin\n    if (a == 0) begin\n        if (q === 1'bx) begin\n            q <= 1'b1;\n        end\n    end else begin\n        q <= 1'b0;\n    end\nend\n\nSUBTASK 4: Implement the logic to reset q to 0 when a is 1 and q is 1, and maintain q as 0 when a is 1.\nIMPLEMENTATION:\nalways @(posedge clk) begin\n    if (a == 1) begin\n        q <= 0;\n    end else begin\n        q <= 1;\n    end\nend\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness. You can use your subtasks as hints to create a single, complete, and coherent Verilog module that satisfies the original specification."
    }
]