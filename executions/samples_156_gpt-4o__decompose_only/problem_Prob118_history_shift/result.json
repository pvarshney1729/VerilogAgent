{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic predict_valid,\n    input logic predict_taken,\n    input logic train_mispredicted,\n    input logic train_taken,\n    input logic [31:0] train_history,\n    output logic [31:0] predict_history\n);\n\n    // Internal register to hold the current branch history\n    logic [31:0] history_reg;\n\n    // Sequential logic to update the history register\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            // Asynchronous reset: reset history to zero\n            history_reg <= 32'b0;\n        end else if (train_mispredicted) begin\n            // On misprediction, load history with train_history and train_taken\n            history_reg <= {train_history[30:0], train_taken};\n        end else if (predict_valid) begin\n            // On valid prediction, shift in predict_taken\n            history_reg <= {history_reg[30:0], predict_taken};\n        end\n    end\n\n    // Assign the current history register to the output\n    assign predict_history = history_reg;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}