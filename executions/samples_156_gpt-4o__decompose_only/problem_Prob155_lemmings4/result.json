{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        WALK_LEFT  = 3'b000,\n        WALK_RIGHT = 3'b001,\n        FALL_LEFT  = 3'b010,\n        FALL_RIGHT = 3'b011,\n        DIG_LEFT   = 3'b100,\n        DIG_RIGHT  = 3'b101,\n        SPLATTER   = 3'b110\n    } state_t;\n\n    state_t state, next_state;\n    logic [4:0] fall_counter; // 5-bit counter to count up to 20\n\n    // State transition logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= WALK_LEFT;\n            fall_counter <= 5'd0;\n        end else begin\n            state <= next_state;\n            if (state == FALL_LEFT || state == FALL_RIGHT) begin\n                fall_counter <= fall_counter + 1;\n            end else begin\n                fall_counter <= 5'd0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (state)\n            WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = FALL_LEFT;\n                end else if (dig) begin\n                    next_state = DIG_LEFT;\n                end else if (bump_left) begin\n                    next_state = WALK_RIGHT;\n                end else begin\n                    next_state = WALK_LEFT;\n                end\n            end\n            WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = FALL_RIGHT;\n                end else if (dig) begin\n                    next_state = DIG_RIGHT;\n                end else if (bump_right) begin\n                    next_state = WALK_LEFT;\n                end else begin\n                    next_state = WALK_RIGHT;\n                end\n            end\n            FALL_LEFT, FALL_RIGHT: begin\n                if (ground) begin\n                    if (fall_counter > 5'd20) begin\n                        next_state = SPLATTER;\n                    end else if (state == FALL_LEFT) begin\n                        next_state = WALK_LEFT;\n                    end else begin\n                        next_state = WALK_RIGHT;\n                    end\n                end else begin\n                    next_state = state;\n                end\n            end\n            DIG_LEFT: begin\n                if (!ground) begin\n                    next_state = FALL_LEFT;\n                end else begin\n                    next_state = DIG_LEFT;\n                end\n            end\n            DIG_RIGHT: begin\n                if (!ground) begin\n                    next_state = FALL_RIGHT;\n                end else begin\n                    next_state = DIG_RIGHT;\n                end\n            end\n            SPLATTER: begin\n                next_state = SPLATTER;\n            end\n            default: begin\n                next_state = WALK_LEFT;\n            end\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left = (state == WALK_LEFT);\n        walk_right = (state == WALK_RIGHT);\n        aaah = (state == FALL_LEFT || state == FALL_RIGHT);\n        digging = (state == DIG_LEFT || state == DIG_RIGHT);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 156,
        "passfail": "R"
    }
}