[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  bump_left\n - input  bump_right\n - input  ground\n - input  dig\n - output walk_left\n - output walk_right\n - output aaah\n - output digging\n\nThe game Lemmings involves critters with fairly simple brains. So simple\nthat we are going to model it using a finite state machine. In the\nLemmings' 2D world, Lemmings can be in one of two states: walking left\n(walk_left is 1) or walking right (walk_right is 1). It will switch\ndirections if it hits an obstacle. In particular, if a Lemming is bumped\non the left (by receiving a 1 on bump_left), it will walk right. If it's\nbumped on the right (by receiving a 1 on bump_right), it will walk left.\nIf it's bumped on both sides at the same time, it will still switch\ndirections.\n\nIn addition to walking left and right and changing direction when bumped,\nwhen ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground\nreappears (ground=1), the Lemming will resume walking in the same\ndirection as before the fall. Being bumped while falling does not affect\nthe walking direction, and being bumped in the same cycle as ground\ndisappears (but not yet falling), or when the ground reappears while\nstill falling, also does not affect the walking direction.\n\nIn addition to walking and falling, Lemmings can sometimes be told to do\nuseful things, like dig (it starts digging when dig=1). A Lemming can dig\nif it is currently walking on ground (ground=1 and not falling), and will\ncontinue digging until it reaches the other side (ground=0). At that\npoint, since there is no ground, it will fall (aaah!), then continue\nwalking in its original direction once it hits ground again. As with\nfalling, being bumped while digging has no effect, and being told to dig\nwhen falling or when there is no ground is ignored. (In other words, a\nwalking Lemming can fall, dig, or switch directions. If more than one of\nthese conditions are satisfied, fall has higher precedence than dig,\nwhich has higher precedence than switching directions.)\n\nAlthough Lemmings can walk, fall, and dig, Lemmings aren't invulnerable.\nIf a Lemming falls for too long then hits the ground, it can splatter. In\nparticular, if a Lemming falls for more than 20 clock cycles then hits\nthe ground, it will splatter and cease walking, falling, or digging (all\n4 outputs become 0), forever (Or until the FSM gets reset). There is no\nupper limit on how far a Lemming can fall before hitting the ground.\nLemmings only splatter when hitting the ground; they do not splatter in\nmid-air.\n\nImplement a Moore state machine that models this behaviour. areset is\npositive edge triggered asynchronous reseting the Lemming machine to walk\nleft.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have decomposed it into the following subtasks and come up with an approach for each:\n                    SUBTASK 1: Define the module TopModule with the specified input and output ports.\nIMPLEMENTATION:\nmodule TopModule (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output reg walk_left,\n    output reg walk_right,\n    output reg aaah,\n    output reg digging\n);\n\n    // State encoding\n    typedef enum reg [2:0] {\n        WALK_LEFT = 3'b000,\n        WALK_RIGHT = 3'b001,\n        FALL_LEFT = 3'b010,\n        FALL_RIGHT = 3'b011,\n        DIG_LEFT = 3'b100,\n        DIG_RIGHT = 3'b101,\n        SPLATTER = 3'b110\n    } state_t;\n\n    state_t state, next_state;\n    reg [4:0] fall_counter; // 5-bit counter to count up to 20\n\n    // State transition logic\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= WALK_LEFT;\n            fall_counter <= 0;\n        end else begin\n            state <= next_state;\n            if (state == FALL_LEFT || state == FALL_RIGHT) begin\n                fall_counter <= fall_counter + 1;\n            end else begin\n                fall_counter <= 0;\n            end\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = FALL_LEFT;\n                end else if (dig) begin\n                    next_state = DIG_LEFT;\n                end else if (bump_left) begin\n                    next_state = WALK_RIGHT;\n                end else begin\n                    next_state = WALK_LEFT;\n                end\n            end\n            WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = FALL_RIGHT;\n                end else if (dig) begin\n                    next_state = DIG_RIGHT;\n                end else if (bump_right) begin\n                    next_state = WALK_LEFT;\n                end else begin\n                    next_state = WALK_RIGHT;\n                end\n            end\n            FALL_LEFT, FALL_RIGHT: begin\n                if (ground) begin\n                    if (fall_counter > 20) begin\n                        next_state = SPLATTER;\n                    end else if (state == FALL_LEFT) begin\n                        next_state = WALK_LEFT;\n                    end else begin\n                        next_state = WALK_RIGHT;\n                    end\n                end else begin\n                    next_state = state;\n                end\n            end\n            DIG_LEFT: begin\n                if (!ground) begin\n                    next_state = FALL_LEFT;\n                end else begin\n                    next_state = DIG_LEFT;\n                end\n            end\n            DIG_RIGHT: begin\n                if (!ground) begin\n                    next_state = FALL_RIGHT;\n                end else begin\n                    next_state = DIG_RIGHT;\n                end\n            end\n            SPLATTER: begin\n                next_state = SPLATTER;\n            end\n            default: begin\n                next_state = WALK_LEFT;\n            end\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = (state == WALK_LEFT);\n        walk_right = (state == WALK_RIGHT);\n        aaah = (state == FALL_LEFT || state == FALL_RIGHT);\n        digging = (state == DIG_LEFT || state == DIG_RIGHT);\n    end\n\nendmodule\n\nSUBTASK 2: Define the states for the FSM: WALK_LEFT, WALK_RIGHT, FALLING, DIGGING, and SPLATTERED.\nIMPLEMENTATION:\n// State encoding for the FSM\n  typedef enum logic [2:0] {\n    WALK_LEFT    = 3'b000,\n    WALK_RIGHT   = 3'b001,\n    FALLING      = 3'b010,\n    DIGGING      = 3'b011,\n    SPLATTERED   = 3'b100\n  } state_t;\n\nSUBTASK 3: Implement the state transition logic for walking left and right, including direction changes when bumped.\nIMPLEMENTATION:\n```verilog\n[BEGIN]\n  // State encoding\n  typedef enum logic [1:0] {\n    WALK_LEFT  = 2'b00,\n    WALK_RIGHT = 2'b01,\n    FALLING    = 2'b10,\n    DIGGING    = 2'b11\n  } state_t;\n\n  state_t current_state, next_state;\n\n  // State transition logic\n  always_comb begin\n    case (current_state)\n      WALK_LEFT: begin\n        if (bump_left || (bump_left && bump_right))\n          next_state = WALK_RIGHT;\n        else\n          next_state = WALK_LEFT;\n      end\n      WALK_RIGHT: begin\n        if (bump_right || (bump_left && bump_right))\n          next_state = WALK_LEFT;\n        else\n          next_state = WALK_RIGHT;\n      end\n      default: next_state = current_state; // For other states like FALLING, DIGGING\n    endcase\n  end\n[END]\n```\n\nSUBTASK 4: Implement the state transition logic for falling when ground=0 and resuming walking when ground=1.\nIMPLEMENTATION:\n```verilog\n[BEGIN]\n  // State encoding\n  typedef enum logic [1:0] {\n    WALK_LEFT  = 2'b00,\n    WALK_RIGHT = 2'b01,\n    FALLING    = 2'b10\n  } state_t;\n\n  state_t current_state, next_state;\n  logic [4:0] fall_counter; // 5-bit counter to track falling duration\n\n  // State transition logic\n  always_ff @(posedge clk or posedge areset) begin\n    if (areset) begin\n      current_state <= WALK_LEFT;\n      fall_counter <= 5'd0;\n    end else begin\n      current_state <= next_state;\n      if (current_state == FALLING) begin\n        fall_counter <= fall_counter + 1;\n      end else begin\n        fall_counter <= 5'd0;\n      end\n    end\n  end\n\n  // Next state logic\n  always_comb begin\n    case (current_state)\n      WALK_LEFT: begin\n        if (!ground) begin\n          next_state = FALLING;\n        end else if (bump_left) begin\n          next_state = WALK_RIGHT;\n        end else begin\n          next_state = WALK_LEFT;\n        end\n      end\n      WALK_RIGHT: begin\n        if (!ground) begin\n          next_state = FALLING;\n        end else if (bump_right) begin\n          next_state = WALK_LEFT;\n        end else begin\n          next_state = WALK_RIGHT;\n        end\n      end\n      FALLING: begin\n        if (ground) begin\n          if (fall_counter > 5'd20) begin\n            next_state = FALLING; // Splattered state, but not explicitly defined\n          end else begin\n            next_state = (current_state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n          end\n        end else begin\n          next_state = FALLING;\n        end\n      end\n      default: begin\n        next_state = WALK_LEFT;\n      end\n    endcase\n  end\n[END]\n```\n\nSUBTASK 5: Implement the state transition logic for digging when dig=1 and ground=1, and transition to falling when ground=0.\nIMPLEMENTATION:\n```verilog\n[BEGIN]\n  // State encoding\n  typedef enum logic [1:0] {\n    WALK_LEFT  = 2'b00,\n    WALK_RIGHT = 2'b01,\n    DIGGING    = 2'b10,\n    FALLING    = 2'b11\n  } state_t;\n\n  state_t current_state, next_state;\n\n  // State transition logic\n  always_comb begin\n    case (current_state)\n      WALK_LEFT: begin\n        if (ground == 0) begin\n          next_state = FALLING;\n        end else if (dig == 1) begin\n          next_state = DIGGING;\n        end else begin\n          next_state = WALK_LEFT;\n        end\n      end\n      WALK_RIGHT: begin\n        if (ground == 0) begin\n          next_state = FALLING;\n        end else if (dig == 1) begin\n          next_state = DIGGING;\n        end else begin\n          next_state = WALK_RIGHT;\n        end\n      end\n      DIGGING: begin\n        if (ground == 0) begin\n          next_state = FALLING;\n        end else begin\n          next_state = DIGGING;\n        end\n      end\n      FALLING: begin\n        if (ground == 1) begin\n          next_state = (current_state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n        end else begin\n          next_state = FALLING;\n        end\n      end\n      default: begin\n        next_state = WALK_LEFT;\n      end\n    endcase\n  end\n[END]\n```\n\nSUBTASK 6: Implement the splatter logic: if a Lemming falls for more than 20 clock cycles and then hits the ground, it will splatter.\nIMPLEMENTATION:\n```verilog\n[BEGIN]\nreg [4:0] fall_counter;\nreg splattered;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        fall_counter <= 5'd0;\n        splattered <= 1'b0;\n    end else if (!ground && !splattered) begin\n        if (fall_counter < 5'd21)\n            fall_counter <= fall_counter + 1'b1;\n    end else if (ground && !splattered) begin\n        if (fall_counter > 5'd20)\n            splattered <= 1'b1;\n        fall_counter <= 5'd0;\n    end\nend\n[END]\n```\n\nSUBTASK 7: Implement the output logic for each state: walk_left, walk_right, aaah, and digging.\nIMPLEMENTATION:\n// State encoding\n    localparam WALK_LEFT  = 3'b000;\n    localparam WALK_RIGHT = 3'b001;\n    localparam AAAH       = 3'b010;\n    localparam DIGGING    = 3'b011;\n    localparam SPLATTER   = 3'b100;\n\n    // Output logic based on the current state\n    always @(*) begin\n        walk_left  = (state == WALK_LEFT);\n        walk_right = (state == WALK_RIGHT);\n        aaah       = (state == AAAH);\n        digging    = (state == DIGGING);\n    end\n\nSUBTASK 8: Implement the asynchronous reset logic to reset the FSM to the WALK_LEFT state.\nIMPLEMENTATION:\nalways @(posedge areset or posedge clk) begin\n    if (areset) begin\n        // Reset the FSM to the WALK_LEFT state\n        walk_left <= 1'b1;\n        walk_right <= 1'b0;\n        aaah <= 1'b0;\n        digging <= 1'b0;\n    end else begin\n        // Other FSM logic would go here\n    end\nend\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness. You can use your subtasks as hints to create a single, complete, and coherent Verilog module that satisfies the original specification."
    }
]