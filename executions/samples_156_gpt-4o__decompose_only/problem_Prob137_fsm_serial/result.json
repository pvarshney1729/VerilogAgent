{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic in,\n    output logic done\n);\n\n    // State encoding\n    typedef enum logic [3:0] {\n        IDLE        = 4'b0000,\n        START_BIT   = 4'b0001,\n        DATA_BIT_0  = 4'b0010,\n        DATA_BIT_1  = 4'b0011,\n        DATA_BIT_2  = 4'b0100,\n        DATA_BIT_3  = 4'b0101,\n        DATA_BIT_4  = 4'b0110,\n        DATA_BIT_5  = 4'b0111,\n        DATA_BIT_6  = 4'b1000,\n        DATA_BIT_7  = 4'b1001,\n        STOP_BIT    = 4'b1010\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n\n    // State transition logic\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 3'b000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DATA_BIT_0 || current_state == DATA_BIT_1 ||\n                current_state == DATA_BIT_2 || current_state == DATA_BIT_3 ||\n                current_state == DATA_BIT_4 || current_state == DATA_BIT_5 ||\n                current_state == DATA_BIT_6 || current_state == DATA_BIT_7) begin\n                bit_count <= bit_count + 1;\n            end else begin\n                bit_count <= 3'b000;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) // Detect start bit\n                    next_state = START_BIT;\n                else\n                    next_state = IDLE;\n            end\n            START_BIT: begin\n                next_state = DATA_BIT_0;\n            end\n            DATA_BIT_0: begin\n                next_state = DATA_BIT_1;\n            end\n            DATA_BIT_1: begin\n                next_state = DATA_BIT_2;\n            end\n            DATA_BIT_2: begin\n                next_state = DATA_BIT_3;\n            end\n            DATA_BIT_3: begin\n                next_state = DATA_BIT_4;\n            end\n            DATA_BIT_4: begin\n                next_state = DATA_BIT_5;\n            end\n            DATA_BIT_5: begin\n                next_state = DATA_BIT_6;\n            end\n            DATA_BIT_6: begin\n                next_state = DATA_BIT_7;\n            end\n            DATA_BIT_7: begin\n                next_state = STOP_BIT;\n            end\n            STOP_BIT: begin\n                if (in == 1'b1) // Verify stop bit\n                    next_state = IDLE;\n                else\n                    next_state = STOP_BIT; // Wait for stop bit\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Output logic\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset) begin\n            done <= 1'b0;\n        end else if (current_state == STOP_BIT && in == 1'b1) begin\n            done <= 1'b1;\n        end else begin\n            done <= 1'b0;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 79,
        "passfail": "r"
    }
}