{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    output logic [2:0] ena,\n    output logic [15:0] q\n);\n\n    // Internal registers for each BCD digit\n    logic [3:0] ones_digit;\n    logic [3:0] tens_digit;\n    logic [3:0] hundreds_digit;\n    logic [3:0] thousands_digit;\n\n    // Synchronous reset and BCD counter logic\n    always @(posedge clk) begin\n        if (reset) begin\n            // Reset all digits to 0\n            ones_digit <= 4'b0000;\n            tens_digit <= 4'b0000;\n            hundreds_digit <= 4'b0000;\n            thousands_digit <= 4'b0000;\n            ena <= 3'b000;\n        end else begin\n            // Increment ones digit\n            if (ones_digit == 4'b1001) begin\n                ones_digit <= 4'b0000;\n                ena[0] <= 1'b1; // Enable tens digit increment\n            end else begin\n                ones_digit <= ones_digit + 1;\n                ena[0] <= 1'b0;\n            end\n\n            // Increment tens digit\n            if (ena[0]) begin\n                if (tens_digit == 4'b1001) begin\n                    tens_digit <= 4'b0000;\n                    ena[1] <= 1'b1; // Enable hundreds digit increment\n                end else begin\n                    tens_digit <= tens_digit + 1;\n                    ena[1] <= 1'b0;\n                end\n            end\n\n            // Increment hundreds digit\n            if (ena[1]) begin\n                if (hundreds_digit == 4'b1001) begin\n                    hundreds_digit <= 4'b0000;\n                    ena[2] <= 1'b1; // Enable thousands digit increment\n                end else begin\n                    hundreds_digit <= hundreds_digit + 1;\n                    ena[2] <= 1'b0;\n                end\n            end\n\n            // Increment thousands digit\n            if (ena[2]) begin\n                if (thousands_digit == 4'b1001) begin\n                    thousands_digit <= 4'b0000;\n                end else begin\n                    thousands_digit <= thousands_digit + 1;\n                end\n            end\n        end\n    end\n\n    // Assign the BCD digits to the output q\n    assign q[3:0] = ones_digit;\n    assign q[7:4] = tens_digit;\n    assign q[11:8] = hundreds_digit;\n    assign q[15:12] = thousands_digit;\n\nendmodule",
    "test_results": {
        "num_mismatch": 39166,
        "passfail": "R"
    }
}