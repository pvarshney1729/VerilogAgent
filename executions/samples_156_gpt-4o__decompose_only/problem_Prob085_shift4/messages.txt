[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  load\n - input  ena\n - input  data (4 bits)\n - output q (4 bits)\n\nThe module should implement a 4-bit shift register (right shift), with\nasynchronous positive edge triggered areset, synchronous active high\nsignals load, and enable.\n\n  (1) areset: Resets shift register to zero.\n\n  (2) load: Loads shift register with data[3:0] instead of shifting.\n\n  (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and\n       disappears).\n\n  (4) q: The contents of the shift register. If both the load and ena\n       inputs are asserted (1), the load input has higher priority.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have decomposed it into the following subtasks and come up with an approach for each:\n                    SUBTASK 1: Define the module TopModule with input ports clk, areset, load, ena, and data (4 bits), and output port q (4 bits).\nIMPLEMENTATION:\nmodule TopModule (\n    input clk,\n    input areset,\n    input load,\n    input ena,\n    input [3:0] data,\n    output reg [3:0] q\n);\n\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        q <= 4'b0000;\n    end else if (load) begin\n        q <= data;\n    end else if (ena) begin\n        q <= {1'b0, q[3:1]};\n    end\nend\n\nendmodule\n\nSUBTASK 2: Implement the asynchronous reset logic to set the shift register to zero when areset is high.\nIMPLEMENTATION:\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        q <= 4'b0000;\n    end\n    // Other logic will be implemented here\nend\n\nSUBTASK 3: Implement the synchronous load logic to load the shift register with data[3:0] when load is high.\nIMPLEMENTATION:\nalways @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end\nend\n\nSUBTASK 4: Implement the synchronous enable logic to shift the register to the right when ena is high, ensuring q[3] becomes zero and q[0] is shifted out.\nIMPLEMENTATION:\nalways @(posedge clk) begin\n    if (ena) begin\n        q[3] <= 1'b0;\n        q[2:0] <= q[3:1];\n    end\nend\n\nSUBTASK 5: Ensure that when both load and ena are high, the load operation has higher priority over the shift operation.\nIMPLEMENTATION:\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        q <= 4'b0000;\n    end else if (load) begin\n        q <= data;\n    end else if (ena) begin\n        q <= {1'b0, q[3:1]};\n    end\nend\n                    "
    },
    {
        "role": "user",
        "content": "Okay, now please implement the module, ensuring syntactical and functional correctness. You can use your subtasks as hints to create a single, complete, and coherent Verilog module that satisfies the original specification."
    }
]