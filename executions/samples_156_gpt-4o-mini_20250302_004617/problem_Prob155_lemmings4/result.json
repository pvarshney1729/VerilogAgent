{
    "code": "module fsm (\n    input logic clk,\n    input logic reset,\n    input logic ground_status,\n    input logic bump,\n    input logic dig,\n    output logic digging,\n    output logic moving\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        GROUND = 2'b01,\n        BUMP = 2'b10,\n        DIGGING = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                if (ground_status) begin\n                    next_state = GROUND;\n                end else if (bump) begin\n                    next_state = BUMP;\n                end else if (dig) begin\n                    next_state = DIGGING;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            GROUND: begin\n                if (dig) begin\n                    next_state = DIGGING;\n                end else begin\n                    next_state = GROUND;\n                end\n            end\n            BUMP: begin\n                if (ground_status) begin\n                    next_state = GROUND;\n                end else begin\n                    next_state = BUMP;\n                end\n            end\n            DIGGING: begin\n                if (!dig) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = DIGGING;\n                end\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        digging = (current_state == DIGGING);\n        moving = (current_state == GROUND || current_state == BUMP);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}