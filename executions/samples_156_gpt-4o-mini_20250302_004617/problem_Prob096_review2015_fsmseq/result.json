{
    "code": "module fsm_sequence_detector (\n    input logic clk,\n    input logic reset,\n    input logic data_in,\n    output logic start_shifting\n);\n\n    typedef enum logic [1:0] {\n        S0 = 2'b00,\n        S1 = 2'b01,\n        S2 = 2'b10,\n        S3 = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= S0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            S0: begin\n                if (data_in) next_state = S1;\n                else next_state = S0;\n            end\n            S1: begin\n                if (data_in) next_state = S2;\n                else next_state = S0;\n            end\n            S2: begin\n                if (~data_in) next_state = S3;\n                else next_state = S1;\n            end\n            S3: begin\n                if (data_in) begin\n                    next_state = S1; // Detecting '1' after '1101'\n                    start_shifting = 1'b1; // Output high for one cycle\n                end else begin\n                    next_state = S0;\n                    start_shifting = 1'b0; // Reset output\n                end\n            end\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic\n    assign start_shifting = (current_state == S3 && data_in);\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}