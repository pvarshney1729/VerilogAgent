{
    "code": "module state_machine (\n    input logic clk,\n    input logic rst_n,\n    output logic [2:0] state_out\n);\n\n    typedef enum logic [2:0] {\n        A = 3'b000,\n        B = 3'b001,\n        C = 3'b010,\n        D = 3'b011,\n        E = 3'b100,\n        F = 3'b101\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (!rst_n) begin\n            current_state <= A;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            A: next_state = B;\n            B: next_state = C;\n            C: next_state = D;\n            D: next_state = E;\n            E: next_state = F;\n            F: next_state = A;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign state_out = current_state;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}