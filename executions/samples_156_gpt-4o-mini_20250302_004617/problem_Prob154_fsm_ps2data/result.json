{
    "code": "module byte_receiver (\n    input logic clk,\n    input logic reset,\n    input logic byte_valid,\n    input logic [7:0] byte_in,\n    output logic done,\n    output logic [23:0] data_out\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        RECEIVE_BYTE1,\n        RECEIVE_BYTE2,\n        RECEIVE_BYTE3,\n        DONE\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [23:0] data_reg;\n    logic [2:0] byte_count;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            data_reg <= 24'b0;\n            byte_count <= 3'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == RECEIVE_BYTE1 || current_state == RECEIVE_BYTE2 || current_state == RECEIVE_BYTE3) begin\n                data_reg <= {data_reg[15:0], byte_in}; // Shift in the new byte\n                byte_count <= byte_count + 3'b1;\n            end\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            IDLE: begin\n                if (byte_valid) begin\n                    next_state = RECEIVE_BYTE1;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            RECEIVE_BYTE1: begin\n                if (byte_valid) begin\n                    next_state = RECEIVE_BYTE2;\n                end else begin\n                    next_state = RECEIVE_BYTE1;\n                end\n            end\n            RECEIVE_BYTE2: begin\n                if (byte_valid) begin\n                    next_state = RECEIVE_BYTE3;\n                end else begin\n                    next_state = RECEIVE_BYTE2;\n                end\n            end\n            RECEIVE_BYTE3: begin\n                next_state = DONE; // Move to DONE after receiving the third byte\n            end\n            DONE: begin\n                next_state = DONE; // Stay in DONE state\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    assign done = (current_state == DONE);\n    assign data_out = data_reg;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}