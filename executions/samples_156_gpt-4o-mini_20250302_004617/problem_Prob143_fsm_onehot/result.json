{
    "code": "module state_machine (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic out1,\n    output logic out2\n);\n\n    logic [9:0] state, next_state;\n\n    // State encoding\n    localparam S0 = 10'b0000000001;\n    localparam S1 = 10'b0000000010;\n    localparam S2 = 10'b0000000100;\n    localparam S3 = 10'b0000001000;\n    localparam S4 = 10'b0000010000;\n    localparam S5 = 10'b0000100000;\n    localparam S6 = 10'b0001000000;\n    localparam S7 = 10'b0010000000;\n    localparam S8 = 10'b0100000000;\n    localparam S9 = 10'b1000000000;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            state <= 10'b0000000000; // Initialize all flip-flops to zero\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            S0: next_state = in ? S1 : S0;\n            S1: next_state = in ? S2 : S0;\n            S2: next_state = in ? S3 : S1;\n            S3: next_state = in ? S4 : S2;\n            S4: next_state = in ? S5 : S3;\n            S5: next_state = in ? S6 : S4;\n            S6: next_state = in ? S7 : S5;\n            S7: next_state = in ? S8 : S6;\n            S8: next_state = in ? S9 : S7;\n            S9: next_state = in ? S0 : S8;\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic\n    assign out1 = (state == S0) || (state == S2) || (state == S4) || (state == S6) || (state == S8);\n    assign out2 = (state == S1) || (state == S3) || (state == S5) || (state == S7) || (state == S9);\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}