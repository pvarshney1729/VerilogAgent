{
    "code": "module one_hot_fsm (\n    input logic clk,\n    input logic reset,\n    input logic w,\n    output logic Y1,\n    output logic Y3\n);\n\n    // State encoding\n    typedef enum logic [3:0] {\n        S0 = 4'b0001,\n        S1 = 4'b0010,\n        S2 = 4'b0100,\n        S3 = 4'b1000\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= S0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            S0: next_state = (w) ? S1 : S0;\n            S1: next_state = (w) ? S2 : S0;\n            S2: next_state = (w) ? S3 : S0;\n            S3: next_state = (w) ? S3 : S0;\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic\n    assign Y1 = (current_state == S1) || (current_state == S3);\n    assign Y3 = (current_state == S2);\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}