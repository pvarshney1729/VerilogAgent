{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in_signal,\n    output logic out_signal\n);\n\n    typedef enum logic [1:0] {\n        A = 2'b00,\n        B = 2'b01,\n        C = 2'b10,\n        D = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= A;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            A: begin\n                if (in_signal) \n                    next_state = B;\n                else \n                    next_state = A;\n            end\n            B: begin\n                if (in_signal) \n                    next_state = C;\n                else \n                    next_state = A;\n            end\n            C: begin\n                if (in_signal) \n                    next_state = D;\n                else \n                    next_state = A;\n            end\n            D: begin\n                if (in_signal) \n                    next_state = A;\n                else \n                    next_state = D;\n            end\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign out_signal = (current_state == C);\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    },
    "iterations_used": 3
}