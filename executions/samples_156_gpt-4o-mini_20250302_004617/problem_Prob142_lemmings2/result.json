{
    "code": "module lemming_behavior (\n    input logic clk,\n    input logic reset,\n    input logic start,\n    output logic move,\n    output logic jump,\n    output logic dig\n);\n\n    typedef enum logic [1:0] {\n        S_IDLE = 2'b00,\n        S_MOVE = 2'b01,\n        S_JUMP = 2'b10,\n        S_DIG  = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Synchronous reset and state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= S_IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            S_IDLE: begin\n                if (start) begin\n                    next_state = S_MOVE;\n                end else begin\n                    next_state = S_IDLE;\n                end\n            end\n            S_MOVE: begin\n                next_state = S_JUMP; // Move leads to Jump\n            end\n            S_JUMP: begin\n                next_state = S_DIG; // Jump leads to Dig\n            end\n            S_DIG: begin\n                next_state = S_IDLE; // Dig leads back to Idle\n            end\n            default: next_state = S_IDLE;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        move = 1'b0;\n        jump = 1'b0;\n        dig  = 1'b0;\n        case (current_state)\n            S_MOVE: move = 1'b1;\n            S_JUMP: jump = 1'b1;\n            S_DIG:  dig  = 1'b1;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    },
    "iterations_used": 3
}