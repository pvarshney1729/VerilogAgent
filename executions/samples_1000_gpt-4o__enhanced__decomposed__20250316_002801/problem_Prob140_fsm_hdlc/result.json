{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        S0, // Initial state, equivalent to having seen a '0'\n        S1, // Seen '01'\n        S2, // Seen '011'\n        S3, // Seen '0111'\n        S4, // Seen '01111'\n        S5, // Seen '011111'\n        S6, // Seen '0111111'\n        S7  // Seen '01111111' or more\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= S0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always @(*) begin\n        // Default outputs\n        disc = 1'b0;\n        flag = 1'b0;\n        err  = 1'b0;\n        next_state = current_state;\n\n        case (current_state)\n            S0: next_state = in ? S1 : S0;\n            S1: next_state = in ? S2 : S0;\n            S2: next_state = in ? S3 : S0;\n            S3: next_state = in ? S4 : S0;\n            S4: next_state = in ? S5 : S0;\n            S5: begin\n                if (in) next_state = S6;\n                else begin\n                    next_state = S0;\n                    disc = 1'b1; // 0111110 detected\n                end\n            end\n            S6: begin\n                if (in) begin\n                    next_state = S7;\n                    flag = 1'b1; // 01111110 detected\n                end else begin\n                    next_state = S0;\n                    flag = 1'b1; // 01111110 detected\n                end\n            end\n            S7: begin\n                if (in) begin\n                    next_state = S7;\n                    err = 1'b1; // 01111111... detected\n                end else begin\n                    next_state = S0;\n                end\n            end\n            default: next_state = S0;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}