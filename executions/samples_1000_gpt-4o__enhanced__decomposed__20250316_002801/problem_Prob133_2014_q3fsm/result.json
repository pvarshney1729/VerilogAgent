{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic s,\n    input logic w,\n    output logic z\n);\n\n    // State encoding\n    typedef enum logic [0:0] {\n        STATE_A = 1'b0,\n        STATE_B = 1'b1\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [1:0] cycle_count; // Counter for cycles in STATE_B\n    logic [1:0] w_count;     // Counter for w = 1 occurrences\n\n    // State register with synchronous reset\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= STATE_A;\n            cycle_count <= 2'b00;\n            w_count <= 2'b00;\n            z <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always @(*) begin\n        // Default assignments\n        next_state = current_state;\n        z = 1'b0;\n\n        case (current_state)\n            STATE_A: begin\n                if (s) begin\n                    next_state = STATE_B;\n                    cycle_count = 2'b00;\n                    w_count = 2'b00;\n                end\n            end\n\n            STATE_B: begin\n                if (cycle_count == 2'b10) begin\n                    if (w_count == 2'b10) begin\n                        z = 1'b1;\n                    end\n                    next_state = STATE_B; // Continue in STATE_B\n                    cycle_count = 2'b00;  // Reset cycle counter\n                    w_count = 2'b00;      // Reset w counter\n                end else begin\n                    cycle_count = cycle_count + 1;\n                    if (w) begin\n                        w_count = w_count + 1;\n                    end\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 197,
        "passfail": "R"
    }
}