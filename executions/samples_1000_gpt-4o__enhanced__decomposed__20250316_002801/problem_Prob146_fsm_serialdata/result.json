{
    "code": "module TopModule (\n    input logic clk,\n    input logic in,\n    input logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        START = 3'b001,\n        DATA = 3'b010,\n        STOP = 3'b011,\n        ERROR = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n    logic [7:0] data_reg;\n\n    // State transition and output logic\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_byte <= 8'b0;\n            done <= 1'b0;\n            bit_count <= 3'b0;\n            data_reg <= 8'b0;\n        end else begin\n            current_state <= next_state;\n            case (current_state)\n                IDLE: begin\n                    done <= 1'b0;\n                    if (in == 1'b0) begin // Detect start bit\n                        next_state <= START;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                START: begin\n                    if (in == 1'b0) begin // Confirm start bit\n                        next_state <= DATA;\n                        bit_count <= 3'b0;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                DATA: begin\n                    data_reg[bit_count] <= in;\n                    if (bit_count == 3'b111) begin\n                        next_state <= STOP;\n                    end else begin\n                        bit_count <= bit_count + 1;\n                        next_state <= DATA;\n                    end\n                end\n                STOP: begin\n                    if (in == 1'b1) begin // Detect stop bit\n                        out_byte <= data_reg;\n                        done <= 1'b1;\n                        next_state <= IDLE;\n                    end else begin\n                        next_state <= ERROR;\n                    end\n                end\n                ERROR: begin\n                    if (in == 1'b1) begin // Wait for stop bit\n                        next_state <= IDLE;\n                    end else begin\n                        next_state <= ERROR;\n                    end\n                end\n                default: next_state <= IDLE;\n            endcase\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 60,
        "passfail": "R"
    }
}