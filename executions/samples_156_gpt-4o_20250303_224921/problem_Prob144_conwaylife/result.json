{
    "code": "module TopModule (\n    input logic clk,            // Clock signal\n    input logic load,           // Active high, synchronous load signal\n    input logic [255:0] data,   // 256-bit input for initial grid state\n    output logic [255:0] q      // 256-bit output for current grid state\n);\n\n    logic [255:0] next_q;\n\n    // Function to calculate the number of alive neighbors\n    function automatic logic [3:0] count_neighbors(input logic [255:0] grid, input int row, input int col);\n        logic [3:0] count;\n        int r, c;\n        count = 0;\n        for (r = -1; r <= 1; r = r + 1) begin\n            for (c = -1; c <= 1; c = c + 1) begin\n                if (r != 0 || c != 0) begin\n                    int wrapped_row = (row + r + 16) % 16;\n                    int wrapped_col = (col + c + 16) % 16;\n                    count = count + grid[wrapped_row * 16 + wrapped_col];\n                end\n            end\n        end\n        return count;\n    endfunction\n\n    // Combinational logic to compute the next state\n    always @(*) begin\n        for (int i = 0; i < 16; i = i + 1) begin\n            for (int j = 0; j < 16; j = j + 1) begin\n                logic [3:0] neighbors = count_neighbors(q, i, j);\n                logic current_state = q[i * 16 + j];\n                case (neighbors)\n                    4'd2: next_q[i * 16 + j] = current_state;\n                    4'd3: next_q[i * 16 + j] = 1'b1;\n                    default: next_q[i * 16 + j] = 1'b0;\n                endcase\n            end\n        end\n    end\n\n    // Sequential logic to update the grid state\n    always_ff @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else begin\n            q <= next_q;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    }
}