{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    typedef enum logic [2:0] {\n        STATE_WALK_LEFT,\n        STATE_WALK_RIGHT,\n        STATE_FALLING,\n        STATE_DIGGING,\n        STATE_SPLATTER\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [4:0] fall_counter; // 5-bit counter for 0 to 31\n\n    // State transition logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= STATE_WALK_LEFT;\n            fall_counter <= 5'd0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == STATE_FALLING) begin\n                fall_counter <= fall_counter + 1;\n            end else begin\n                fall_counter <= 5'd0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state; // Default to hold state\n        case (current_state)\n            STATE_WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = STATE_FALLING;\n                end else if (dig) begin\n                    next_state = STATE_DIGGING;\n                end else if (bump_left) begin\n                    next_state = STATE_WALK_RIGHT;\n                end\n            end\n            STATE_WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = STATE_FALLING;\n                end else if (dig) begin\n                    next_state = STATE_DIGGING;\n                end else if (bump_right) begin\n                    next_state = STATE_WALK_LEFT;\n                end\n            end\n            STATE_FALLING: begin\n                if (ground) begin\n                    if (fall_counter >= 5'd20) begin\n                        next_state = STATE_SPLATTER;\n                    end else begin\n                        next_state = STATE_WALK_LEFT;\n                    end\n                end\n            end\n            STATE_DIGGING: begin\n                if (!ground) begin\n                    next_state = STATE_FALLING;\n                end\n            end\n            STATE_SPLATTER: begin\n                // Remain in splatter state until reset\n            end\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n        case (current_state)\n            STATE_WALK_LEFT: walk_left = 1'b1;\n            STATE_WALK_RIGHT: walk_right = 1'b1;\n            STATE_FALLING: aaah = 1'b1;\n            STATE_DIGGING: digging = 1'b1;\n            STATE_SPLATTER: begin\n                // All outputs are 0\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 104,
        "passfail": "R"
    }
}