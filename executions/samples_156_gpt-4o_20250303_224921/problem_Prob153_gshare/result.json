{
    "code": "```verilog\nmodule branch_predictor (\n    input logic clk,\n    input logic areset,\n    input logic predict_valid,\n    input logic [6:0] predict_pc,\n    input logic train_valid,\n    input logic train_taken,\n    input logic train_mispredicted,\n    input logic [6:0] train_history,\n    input logic [6:0] train_pc,\n    output logic predict_taken,\n    output logic [6:0] predict_history\n);\n\n    // Define the PHT as an array of 2-bit counters\n    logic [1:0] PHT [0:127];\n    logic [6:0] global_history;\n\n    // Initialize PHT and global history\n    initial begin\n        integer i;\n        for (i = 0; i < 128; i = i + 1) begin\n            PHT[i] = 2'b01; // Weakly not taken\n        end\n        global_history = 7'b0;\n    end\n\n    // Predict logic\n    always @(*) begin\n        if (predict_valid) begin\n            logic [6:0] index;\n            index = predict_pc ^ global_history;\n            predict_taken = PHT[index][1]; // MSB of the counter\n            predict_history = global_history;\n        end\n    end\n\n    // Sequential logic for updating global history and training\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            global_history <= 7'b0;\n        end else begin\n            if (train_valid) begin\n                logic [6:0] train_index;\n                train_index = train_pc ^ train_history;\n                if (train_taken) begin\n                    if (PHT[train_index] < 2'b11) begin\n                        PHT[train_index] <= PHT[train_index] + 1;\n                    end\n                end else begin\n                    if (PHT[train_index] > 2'b00) begin\n                        PHT[train_index] <= PHT[train_index] - 1;\n                    end\n                end\n                if (train_mispredicted) begin\n                    global_history <= train_history;\n                end\n            end else if (predict_valid) begin\n                global_history <= {global_history[5:0], predict_taken};\n            end\n        end\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}