{
    "code": "module TopModule (\n    input logic clk,        // Clock signal, positive edge-triggered\n    input logic areset,     // Asynchronous reset, active high\n    input logic bump_left,  // Bump detected on the left side\n    input logic bump_right, // Bump detected on the right side\n    input logic ground,     // Ground detection (1 = on ground, 0 = falling)\n    input logic dig,        // Command to start digging\n    output logic walk_left, // Output high when walking left\n    output logic walk_right,// Output high when walking right\n    output logic aaah,      // Output high when falling (ahh!)\n    output logic digging    // Output high when digging\n);\n\n    typedef enum logic [2:0] {\n        WALK_LEFT,\n        WALK_RIGHT,\n        FALLING,\n        DIGGING,\n        SPLATTERED\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [4:0] fall_counter; // 5-bit counter for falling cycles\n\n    // State transition logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= WALK_LEFT;\n            fall_counter <= 5'd0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == FALLING)\n                fall_counter <= fall_counter + 1;\n            else\n                fall_counter <= 5'd0;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            WALK_LEFT: begin\n                if (!ground)\n                    next_state = FALLING;\n                else if (dig)\n                    next_state = DIGGING;\n                else if (bump_left)\n                    next_state = WALK_RIGHT;\n            end\n            WALK_RIGHT: begin\n                if (!ground)\n                    next_state = FALLING;\n                else if (dig)\n                    next_state = DIGGING;\n                else if (bump_right)\n                    next_state = WALK_LEFT;\n            end\n            FALLING: begin\n                if (ground) begin\n                    if (fall_counter > 5'd20)\n                        next_state = SPLATTERED;\n                    else\n                        next_state = (bump_left) ? WALK_RIGHT : WALK_LEFT;\n                end\n            end\n            DIGGING: begin\n                if (!ground)\n                    next_state = FALLING;\n                else if (!dig)\n                    next_state = (bump_left) ? WALK_RIGHT : WALK_LEFT;\n            end\n            SPLATTERED: begin\n                // Remain in SPLATTERED state\n            end\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left = (current_state == WALK_LEFT);\n        walk_right = (current_state == WALK_RIGHT);\n        aaah = (current_state == FALLING);\n        digging = (current_state == DIGGING);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    },
    "iterations_used": 1
}