{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        S1,\n        S2,\n        S3,\n        S4,\n        S5,\n        S6,\n        DISC,\n        FLAG,\n        ERR\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] one_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            one_count <= 3'b000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == S6 && in == 1'b1) begin\n                one_count <= one_count + 1;\n            end else if (in == 1'b0) begin\n                one_count <= 3'b000;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) next_state = S1;\n            end\n            S1: begin\n                if (in == 1'b1) next_state = S2;\n                else next_state = S1;\n            end\n            S2: begin\n                if (in == 1'b1) next_state = S3;\n                else next_state = S1;\n            end\n            S3: begin\n                if (in == 1'b1) next_state = S4;\n                else next_state = S1;\n            end\n            S4: begin\n                if (in == 1'b1) next_state = S5;\n                else next_state = S1;\n            end\n            S5: begin\n                if (in == 1'b1) next_state = S6;\n                else next_state = S1;\n            end\n            S6: begin\n                if (in == 1'b0) next_state = DISC;\n                else if (one_count >= 3'b110) next_state = ERR;\n            end\n            DISC: begin\n                disc = 1'b1;\n                next_state = IDLE;\n            end\n            FLAG: begin\n                flag = 1'b1;\n                next_state = IDLE;\n            end\n            ERR: begin\n                err = 1'b1;\n                next_state = IDLE;\n            end\n            default: next_state = IDLE;\n        endcase\n\n        if (current_state == S6 && in == 1'b0) begin\n            if (one_count == 3'b110) next_state = FLAG;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    },
    "iterations_used": 1
}