{
    "code": "module TopModule (\n    input logic clk,\n    input logic in,\n    input logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        RECEIVING = 2'b01,\n        STOP = 2'b10,\n        ERROR = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n    logic [7:0] shift_reg;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_byte <= 8'bXXXX_XXXX;\n            done <= 1'b0;\n            bit_count <= 3'b000;\n            shift_reg <= 8'b0000_0000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == RECEIVING) begin\n                shift_reg <= {in, shift_reg[7:1]};\n                bit_count <= bit_count + 1;\n            end\n            if (current_state == STOP && in == 1'b1) begin\n                out_byte <= shift_reg;\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = RECEIVING;\n                end\n            end\n            RECEIVING: begin\n                if (bit_count == 3'b111) begin\n                    next_state = STOP;\n                end else if (in == 1'b0) begin\n                    next_state = ERROR;\n                end\n            end\n            STOP: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = ERROR;\n                end\n            end\n            ERROR: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 42,
        "passfail": "R"
    },
    "iterations_used": 1
}