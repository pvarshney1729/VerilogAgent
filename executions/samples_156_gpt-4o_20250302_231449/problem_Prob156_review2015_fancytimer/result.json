{
    "code": "```verilog\nmodule pattern_timer (\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic ack,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        PATTERN_DETECT,\n        LOAD_DELAY,\n        COUNTING,\n        WAIT_ACK\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay;\n    logic [3:0] bit_counter;\n    logic [9:0] cycle_counter;\n    logic [3:0] shift_reg;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            count <= 4'b0000;\n            counting <= 1'b0;\n            done <= 1'b0;\n            delay <= 4'b0000;\n            bit_counter <= 4'b0000;\n            cycle_counter <= 10'b0000000000;\n            shift_reg <= 4'b0000;\n        end else begin\n            current_state <= next_state;\n            case (current_state)\n                IDLE: begin\n                    count <= 4'b0000;\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                    if (data) begin\n                        shift_reg <= {shift_reg[2:0], data};\n                        if (shift_reg == 4'b110) begin\n                            next_state <= PATTERN_DETECT;\n                        end\n                    end\n                end\n                PATTERN_DETECT: begin\n                    shift_reg <= {shift_reg[2:0], data};\n                    if (shift_reg == 4'b1101) begin\n                        next_state <= LOAD_DELAY;\n                        bit_counter <= 4'b0000;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                LOAD_DELAY: begin\n                    delay <= {delay[2:0], data};\n                    bit_counter <= bit_counter + 1;\n                    if (bit_counter == 4'b0011) begin\n                        next_state <= COUNTING;\n                        count <= delay;\n                        counting <= 1'b1;\n                        cycle_counter <= 10'b0000000000;\n                    end\n                end\n                COUNTING: begin\n                    if (cycle_counter == 10'd999) begin\n                        cycle_counter <= 10'b0000000000;\n                        if (count == 4'b0000) begin\n                            next_state <= WAIT_ACK;\n                            counting <= 1'b0;\n                            done <= 1'b1;\n                        end else begin\n                            count <= count - 1;\n                        end\n                    end else begin\n                        cycle_counter <= cycle_counter + 1;\n                    end\n                end\n                WAIT_ACK: begin\n                    if (ack) begin\n                        next_state <= IDLE;\n                        done <= 1'b0;\n                    end\n                end\n            endcase\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    },
    "iterations_used": 1
}