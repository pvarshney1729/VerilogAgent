{
    "code": "module TopModule (\n    input  logic clk,        // Clock input, positive edge triggered\n    input  logic reset,      // Active-high synchronous reset\n    input  logic in,         // Serial data input, 1-bit\n    output logic done        // Output signal indicating a byte has been correctly received\n);\n\n    typedef enum logic [3:0] {\n        IDLE  = 4'b0000,\n        START = 4'b0001,\n        DATA0 = 4'b0010,\n        DATA1 = 4'b0011,\n        DATA2 = 4'b0100,\n        DATA3 = 4'b0101,\n        DATA4 = 4'b0110,\n        DATA5 = 4'b0111,\n        DATA6 = 4'b1000,\n        DATA7 = 4'b1001,\n        STOP  = 4'b1010\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] data_byte;\n    logic [2:0] bit_counter;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            done <= 1'b0;\n            data_byte <= 8'b0;\n            bit_counter <= 3'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        done = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = START;\n                end\n            end\n            START: begin\n                next_state = DATA0;\n            end\n            DATA0: begin\n                data_byte[0] = in;\n                next_state = DATA1;\n            end\n            DATA1: begin\n                data_byte[1] = in;\n                next_state = DATA2;\n            end\n            DATA2: begin\n                data_byte[2] = in;\n                next_state = DATA3;\n            end\n            DATA3: begin\n                data_byte[3] = in;\n                next_state = DATA4;\n            end\n            DATA4: begin\n                data_byte[4] = in;\n                next_state = DATA5;\n            end\n            DATA5: begin\n                data_byte[5] = in;\n                next_state = DATA6;\n            end\n            DATA6: begin\n                data_byte[6] = in;\n                next_state = DATA7;\n            end\n            DATA7: begin\n                data_byte[7] = in;\n                next_state = STOP;\n            end\n            STOP: begin\n                if (in == 1'b1) begin\n                    done = 1'b1;\n                    next_state = IDLE;\n                end\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 78,
        "passfail": "R"
    },
    "iterations_used": 1
}