{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    output logic shift_ena\n);\n\n    typedef enum logic [1:0] {\n        STATE_IDLE   = 2'b00, // Waiting for reset or pattern detection\n        STATE_ACTIVE = 2'b01, // Shift enabled for 4 cycles\n        STATE_DONE   = 2'b10  // After 4 cycles, shift disabled\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [1:0] cycle_counter; // Counter for 4 clock cycles\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= STATE_ACTIVE;\n            cycle_counter <= 2'b00;\n        end else begin\n            current_state <= next_state;\n            if (current_state == STATE_ACTIVE) begin\n                cycle_counter <= cycle_counter + 1;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            STATE_IDLE: begin\n                if (reset) begin\n                    next_state = STATE_ACTIVE;\n                end else begin\n                    next_state = STATE_IDLE;\n                end\n            end\n            STATE_ACTIVE: begin\n                if (cycle_counter == 2'b11) begin\n                    next_state = STATE_DONE;\n                end else begin\n                    next_state = STATE_ACTIVE;\n                end\n            end\n            STATE_DONE: begin\n                next_state = STATE_DONE;\n            end\n            default: begin\n                next_state = STATE_IDLE;\n            end\n        endcase\n    end\n\n    // Output logic\n    assign shift_ena = (current_state == STATE_ACTIVE);\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}