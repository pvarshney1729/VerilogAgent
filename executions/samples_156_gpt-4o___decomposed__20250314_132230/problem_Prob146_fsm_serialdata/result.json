{
    "code": "module TopModule(\n    input logic clk,\n    input logic in,\n    input logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        START = 2'b01,\n        DATA_RECEIVE = 2'b10,\n        STOP = 2'b11\n    } state_t;\n\n    // Internal registers\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n    logic [7:0] shift_reg;\n    logic done_reg;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 3'd0;\n            shift_reg <= 8'b0;\n            done_reg <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DATA_RECEIVE) begin\n                shift_reg <= {in, shift_reg[7:1]};\n                bit_count <= bit_count + 1;\n            end\n        end\n    end\n\n    // Next state and output logic\n    always_comb begin\n        next_state = current_state;\n        done_reg = 1'b0;\n        \n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin // Detect start bit\n                    next_state = START;\n                end\n            end\n            \n            START: begin\n                next_state = DATA_RECEIVE;\n                bit_count = 3'd0;\n            end\n            \n            DATA_RECEIVE: begin\n                if (bit_count == 3'd7) begin\n                    next_state = STOP;\n                end\n            end\n            \n            STOP: begin\n                if (in == 1'b1) begin // Detect stop bit\n                    done_reg = 1'b1;\n                    next_state = IDLE;\n                end else begin\n                    next_state = IDLE; // Wait for stop bit if not correct\n                end\n            end\n            \n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Output assignments\n    assign out_byte = done_reg ? shift_reg : 8'bxxxx_xxxx;\n    assign done = done_reg;\n\nendmodule",
    "test_results": {
        "num_mismatch": 50,
        "passfail": "R"
    }
}