{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [3:0] {\n        S_IDLE      = 4'b0000,\n        S_0         = 4'b0001,\n        S_01        = 4'b0010,\n        S_011       = 4'b0011,\n        S_0111      = 4'b0100,\n        S_01111     = 4'b0101,\n        S_011111    = 4'b0110,\n        S_0111111   = 4'b0111,\n        S_01111110  = 4'b1000,\n        S_ERROR     = 4'b1001\n    } state_t;\n\n    state_t current_state, next_state;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= S_IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always @(*) begin\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n\n        case (current_state)\n            S_IDLE: begin\n                if (in == 1'b0) next_state = S_0;\n                else next_state = S_IDLE;\n            end\n            S_0: begin\n                if (in == 1'b1) next_state = S_01;\n                else next_state = S_IDLE;\n            end\n            S_01: begin\n                if (in == 1'b1) next_state = S_011;\n                else next_state = S_IDLE;\n            end\n            S_011: begin\n                if (in == 1'b1) next_state = S_0111;\n                else next_state = S_IDLE;\n            end\n            S_0111: begin\n                if (in == 1'b1) next_state = S_01111;\n                else next_state = S_IDLE;\n            end\n            S_01111: begin\n                if (in == 1'b1) next_state = S_011111;\n                else next_state = S_IDLE;\n            end\n            S_011111: begin\n                if (in == 1'b1) next_state = S_0111111;\n                else begin\n                    next_state = S_IDLE;\n                    disc = 1'b1;\n                end\n            end\n            S_0111111: begin\n                if (in == 1'b0) begin\n                    next_state = S_01111110;\n                    flag = 1'b1;\n                end else begin\n                    next_state = S_ERROR;\n                    err = 1'b1;\n                end\n            end\n            S_01111110: begin\n                next_state = S_IDLE;\n            end\n            S_ERROR: begin\n                next_state = S_IDLE;\n            end\n            default: next_state = S_IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 250,
        "passfail": "R"
    }
}