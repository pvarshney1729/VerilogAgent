{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic x,\n    output logic z\n);\n\n    // State Encoding\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        INVERT = 2'b01,\n        PASS = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= IDLE;\n        else\n            current_state <= next_state;\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (x)\n                    next_state = INVERT;\n                else\n                    next_state = PASS;\n                z = 0;\n            end\n            INVERT: begin\n                next_state = PASS;\n                z = ~x;\n            end\n            PASS: begin\n                next_state = PASS;\n                z = x;\n            end\n            default: begin\n                next_state = IDLE;\n                z = 0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 208,
        "passfail": "R"
    }
}