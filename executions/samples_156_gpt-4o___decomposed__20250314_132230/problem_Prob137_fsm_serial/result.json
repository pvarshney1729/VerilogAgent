{
    "code": "module TopModule (\n  input  logic clk,\n  input  logic reset,\n  input  logic in,\n  output logic done\n);\n\n  // Define states for the FSM\n  typedef enum logic [3:0] {\n    IDLE      = 4'b0000,\n    START_BIT = 4'b0001,\n    DATA_0    = 4'b0010,\n    DATA_1    = 4'b0011,\n    DATA_2    = 4'b0100,\n    DATA_3    = 4'b0101,\n    DATA_4    = 4'b0110,\n    DATA_5    = 4'b0111,\n    DATA_6    = 4'b1000,\n    DATA_7    = 4'b1001,\n    STOP_BIT  = 4'b1010,\n    ERROR     = 4'b1011\n  } state_t;\n\n  state_t current_state, next_state;\n  logic [2:0] bit_counter;\n\n  // State transition logic\n  always_ff @(posedge clk) begin\n    if (reset) begin\n      current_state <= IDLE;\n      bit_counter <= 3'd0;\n      done <= 1'b0;\n    end else begin\n      current_state <= next_state;\n      if (current_state == START_BIT || current_state == DATA_0 || current_state == DATA_1 ||\n          current_state == DATA_2 || current_state == DATA_3 || current_state == DATA_4 ||\n          current_state == DATA_5 || current_state == DATA_6 || current_state == DATA_7) begin\n        bit_counter <= bit_counter + 3'd1;\n      end else begin\n        bit_counter <= 3'd0;\n      end\n    end\n  end\n\n  // Next state logic\n  always_comb begin\n    next_state = current_state;\n    done = 1'b0;\n    case (current_state)\n      IDLE: begin\n        if (in == 1'b0) begin\n          next_state = START_BIT;\n        end\n      end\n      START_BIT: begin\n        next_state = DATA_0;\n      end\n      DATA_0: begin\n        next_state = DATA_1;\n      end\n      DATA_1: begin\n        next_state = DATA_2;\n      end\n      DATA_2: begin\n        next_state = DATA_3;\n      end\n      DATA_3: begin\n        next_state = DATA_4;\n      end\n      DATA_4: begin\n        next_state = DATA_5;\n      end\n      DATA_5: begin\n        next_state = DATA_6;\n      end\n      DATA_6: begin\n        next_state = DATA_7;\n      end\n      DATA_7: begin\n        next_state = STOP_BIT;\n      end\n      STOP_BIT: begin\n        if (in == 1'b1) begin\n          done = 1'b1;\n          next_state = IDLE;\n        end else begin\n          next_state = ERROR;\n        end\n      end\n      ERROR: begin\n        if (in == 1'b1) begin\n          next_state = IDLE;\n        end\n      end\n    endcase\n  end\n\nendmodule",
    "test_results": {
        "num_mismatch": 47,
        "passfail": "R"
    }
}