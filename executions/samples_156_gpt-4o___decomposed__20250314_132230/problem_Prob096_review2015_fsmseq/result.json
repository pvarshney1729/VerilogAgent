{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic data,\n    output logic start_shifting\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        IDLE    = 3'b000,\n        S1      = 3'b001,\n        S11     = 3'b010,\n        S110    = 3'b011,\n        S1101   = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(posedge clk) begin\n        if (reset)\n            current_state <= IDLE;\n        else\n            current_state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            IDLE:   next_state = (data == 1'b1) ? S1    : IDLE;\n            S1:     next_state = (data == 1'b1) ? S11   : IDLE;\n            S11:    next_state = (data == 1'b0) ? S110  : S11;\n            S110:   next_state = (data == 1'b1) ? S1101 : IDLE;\n            S1101:  next_state = S1101;  // Remain in S1101 once sequence is detected\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    always @(posedge clk) begin\n        if (reset)\n            start_shifting <= 1'b0;\n        else if (current_state == S1101)\n            start_shifting <= 1'b1;\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}