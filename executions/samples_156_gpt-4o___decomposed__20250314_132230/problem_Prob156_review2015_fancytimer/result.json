{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic ack,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done\n);\n\n    // Internal signals\n    logic [3:0] delay;\n    logic [3:0] pattern_shift_reg;\n    logic [13:0] cycle_counter;\n    logic [2:0] state, next_state;\n\n    // State encoding\n    localparam IDLE         = 3'b000;\n    localparam DETECT_1     = 3'b001;\n    localparam DETECT_11    = 3'b010;\n    localparam DETECT_110   = 3'b011;\n    localparam DETECT_1101  = 3'b100;\n    localparam LOAD_DELAY   = 3'b101;\n    localparam COUNTING     = 3'b110;\n    localparam DONE         = 3'b111;\n\n    // State Machine\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            state <= IDLE;\n            counting <= 1'b0;\n            done <= 1'b0;\n            count <= 4'b0000;\n            pattern_shift_reg <= 4'b0000;\n            cycle_counter <= 14'b0;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = state; // Default to hold state\n        case (state)\n            IDLE: begin\n                pattern_shift_reg = {pattern_shift_reg[2:0], data};\n                if (pattern_shift_reg == 4'b1101) begin\n                    next_state = LOAD_DELAY;\n                end\n            end\n            LOAD_DELAY: begin\n                delay = {delay[2:0], data};\n                if (&delay) begin // All bits shifted in\n                    next_state = COUNTING;\n                    cycle_counter = 1000;\n                    counting = 1'b1;\n                    count = delay;\n                end\n            end\n            COUNTING: begin\n                if (cycle_counter == 0) begin\n                    if (count > 0) begin\n                        count = count - 1;\n                        cycle_counter = 1000;\n                    end else begin\n                        next_state = DONE;\n                        counting = 1'b0;\n                        done = 1'b1;\n                    end\n                end else begin\n                    cycle_counter = cycle_counter - 1;\n                end\n            end\n            DONE: begin\n                if (ack) begin\n                    next_state = IDLE;\n                    done = 1'b0;\n                end\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            counting <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            counting <= (state == COUNTING);\n            done <= (state == DONE);\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}