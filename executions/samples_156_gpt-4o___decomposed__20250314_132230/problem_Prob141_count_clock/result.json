{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic ena,\n    output logic pm,\n    output logic [7:0] hh,\n    output logic [7:0] mm,\n    output logic [7:0] ss\n);\n\n    // Internal registers for BCD counters\n    logic [3:0] hh_tens, hh_units;\n    logic [3:0] mm_tens, mm_units;\n    logic [3:0] ss_tens, ss_units;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            // Reset all counters to \"12:00:00 AM\"\n            hh_tens <= 4'd1;\n            hh_units <= 4'd2;\n            mm_tens <= 4'd0;\n            mm_units <= 4'd0;\n            ss_tens <= 4'd0;\n            ss_units <= 4'd0;\n            pm <= 1'b0;\n        end else if (ena) begin\n            // Increment seconds\n            if (ss_units == 4'd9) begin\n                ss_units <= 4'd0;\n                if (ss_tens == 4'd5) begin\n                    ss_tens <= 4'd0;\n                    \n                    // Increment minutes\n                    if (mm_units == 4'd9) begin\n                        mm_units <= 4'd0;\n                        if (mm_tens == 4'd5) begin\n                            mm_tens <= 4'd0;\n                            \n                            // Increment hours\n                            if (hh_units == 4'd9 || (hh_tens == 4'd1 && hh_units == 4'd2)) begin\n                                hh_units <= 4'd1;\n                                hh_tens <= 4'd0;\n                                pm <= ~pm; // Toggle AM/PM\n                            end else begin\n                                hh_units <= hh_units + 1;\n                            end\n                        end else begin\n                            mm_tens <= mm_tens + 1;\n                        end\n                    end else begin\n                        mm_units <= mm_units + 1;\n                    end\n                end else begin\n                    ss_tens <= ss_tens + 1;\n                end\n            end else begin\n                ss_units <= ss_units + 1;\n            end\n        end\n    end\n\n    // Concatenate BCD digits to form the output\n    always @(*) begin\n        hh = {hh_tens, hh_units};\n        mm = {mm_tens, mm_units};\n        ss = {ss_tens, ss_units};\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}