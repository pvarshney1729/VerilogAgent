{
    "code": "module TopModule (\n    input logic clk,\n    input logic load,\n    input logic [255:0] data,\n    output logic [255:0] q\n);\n\n    logic [255:0] current_state, next_state;\n\n    // Function to count the number of alive neighbors\n    function automatic logic [3:0] count_neighbors(\n        input logic [255:0] state,\n        input int row,\n        input int col\n    );\n        int r, c;\n        logic [3:0] count;\n        count = 0;\n        for (r = -1; r <= 1; r = r + 1) begin\n            for (c = -1; c <= 1; c = c + 1) begin\n                if (!(r == 0 && c == 0)) begin\n                    int neighbor_row = (row + r + 16) % 16;\n                    int neighbor_col = (col + c + 16) % 16;\n                    count = count + state[neighbor_row * 16 + neighbor_col];\n                end\n            end\n        end\n        return count;\n    endfunction\n\n    // Combinational logic to compute the next state\n    always @(*) begin\n        for (int row = 0; row < 16; row = row + 1) begin\n            for (int col = 0; col < 16; col = col + 1) begin\n                logic [3:0] neighbors = count_neighbors(current_state, row, col);\n                logic cell = current_state[row * 16 + col];\n                if (neighbors < 2 || neighbors > 3) begin\n                    next_state[row * 16 + col] = 1'b0;\n                end else if (neighbors == 3) begin\n                    next_state[row * 16 + col] = 1'b1;\n                end else begin\n                    next_state[row * 16 + col] = cell;\n                end\n            end\n        end\n    end\n\n    // Sequential logic to update the state\n    always_ff @(posedge clk) begin\n        if (load) begin\n            current_state <= data;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Output the current state\n    assign q = current_state;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}