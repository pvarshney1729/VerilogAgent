{
    "code": "```verilog\nmodule TopModule (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    typedef enum logic [1:0] {\n        WALK_LEFT  = 2'b00,\n        WALK_RIGHT = 2'b01,\n        FALL       = 2'b10,\n        DIG        = 2'b11\n    } state_t;\n\n    state_t state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (state)\n            WALK_LEFT: begin\n                if (!ground)\n                    next_state = FALL;\n                else if (dig)\n                    next_state = DIG;\n                else if (bump_left || bump_right)\n                    next_state = WALK_RIGHT;\n                else\n                    next_state = WALK_LEFT;\n            end\n            WALK_RIGHT: begin\n                if (!ground)\n                    next_state = FALL;\n                else if (dig)\n                    next_state = DIG;\n                else if (bump_left || bump_right)\n                    next_state = WALK_LEFT;\n                else\n                    next_state = WALK_RIGHT;\n            end\n            FALL: begin\n                if (ground)\n                    next_state = (state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n                else\n                    next_state = FALL;\n            end\n            DIG: begin\n                if (!ground)\n                    next_state = FALL;\n                else\n                    next_state = DIG;\n            end\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    // State register\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = (state == WALK_LEFT);\n        walk_right = (state == WALK_RIGHT);\n        aaah = (state == FALL);\n        digging = (state == DIG);\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "R"
    }
}