{
    "code": "module TopModule(\n    input  logic clk,           // Clock signal (fast-running)\n    input  logic reset,         // Active-high synchronous reset\n    input  logic ena,           // Enable signal for time increment (one pulse per second)\n    output logic pm,            // AM/PM indicator (1 for PM, 0 for AM)\n    output logic [7:0] hh,      // Hours in BCD (01 to 12)\n    output logic [7:0] mm,      // Minutes in BCD (00 to 59)\n    output logic [7:0] ss       // Seconds in BCD (00 to 59)\n);\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            // Reset to 12:00:00 AM\n            hh <= 8'b0001_0010; // 12 in BCD\n            mm <= 8'b0000_0000; // 00 in BCD\n            ss <= 8'b0000_0000; // 00 in BCD\n            pm <= 1'b0;         // AM\n        end else if (ena) begin\n            // Increment seconds\n            if (ss == 8'b0101_1001) begin\n                ss <= 8'b0000_0000;\n                // Increment minutes\n                if (mm == 8'b0101_1001) begin\n                    mm <= 8'b0000_0000;\n                    // Increment hours\n                    if (hh == 8'b0001_0010) begin\n                        hh <= 8'b0000_0001;\n                        // Toggle AM/PM\n                        pm <= ~pm;\n                    end else if (hh == 8'b0000_1001) begin\n                        hh <= 8'b0001_0000;\n                    end else if (hh == 8'b0001_0000) begin\n                        hh <= 8'b0001_0001;\n                    end else if (hh == 8'b0001_0001) begin\n                        hh <= 8'b0001_0010;\n                    end else begin\n                        hh <= hh + 1;\n                    end\n                end else begin\n                    mm <= mm + 1;\n                end\n            end else begin\n                ss <= ss + 1;\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    },
    "iterations_used": 1
}