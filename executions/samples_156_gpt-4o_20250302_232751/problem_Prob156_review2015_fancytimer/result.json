{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic ack,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        LOAD_DELAY = 2'b01,\n        COUNT = 2'b10,\n        DONE = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay;\n    logic [3:0] pattern_shift;\n    logic [15:0] cycle_counter;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            pattern_shift <= 4'b0000;\n            delay <= 4'b0000;\n            cycle_counter <= 16'b0;\n            count <= 4'b0000;\n            counting <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == LOAD_DELAY) begin\n                delay <= {delay[2:0], data};\n            end\n            if (current_state == COUNT) begin\n                if (cycle_counter == 16'd0) begin\n                    count <= count - 1;\n                    cycle_counter <= 16'd999;\n                end else begin\n                    cycle_counter <= cycle_counter - 1;\n                end\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (current_state == IDLE) begin\n            pattern_shift <= {pattern_shift[2:0], data};\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        counting = 1'b0;\n        done = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (pattern_shift == 4'b1101) begin\n                    next_state = LOAD_DELAY;\n                end\n            end\n            LOAD_DELAY: begin\n                if (delay == 4'b1111) begin\n                    next_state = COUNT;\n                    count = delay + 1;\n                    cycle_counter = 16'd999;\n                end\n            end\n            COUNT: begin\n                counting = 1'b1;\n                if (count == 4'b0000 && cycle_counter == 16'd0) begin\n                    next_state = DONE;\n                end\n            end\n            DONE: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    },
    "iterations_used": 1
}