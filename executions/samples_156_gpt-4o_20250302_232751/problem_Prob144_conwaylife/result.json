{
    "code": "module TopModule (\n    input logic clk,\n    input logic rst_n,\n    input logic load,\n    input logic [255:0] data,\n    output logic [255:0] q\n);\n\n    logic [255:0] next_q;\n\n    // Function to calculate the number of alive neighbours\n    function automatic logic [3:0] count_neighbours(input logic [255:0] grid, input int i, input int j);\n        logic [3:0] count;\n        count = grid[((i-1+16)%16)*16 + ((j-1+16)%16)] +\n                grid[((i-1+16)%16)*16 + j] +\n                grid[((i-1+16)%16)*16 + ((j+1)%16)] +\n                grid[i*16 + ((j-1+16)%16)] +\n                grid[i*16 + ((j+1)%16)] +\n                grid[((i+1)%16)*16 + ((j-1+16)%16)] +\n                grid[((i+1)%16)*16 + j] +\n                grid[((i+1)%16)*16 + ((j+1)%16)];\n        return count;\n    endfunction\n\n    // Combinational logic to determine the next state of the grid\n    always @(*) begin\n        for (int i = 0; i < 16; i++) begin\n            for (int j = 0; j < 16; j++) begin\n                logic [3:0] neighbours;\n                neighbours = count_neighbours(q, i, j);\n                case (neighbours)\n                    4'd2: next_q[i*16 + j] = q[i*16 + j]; // Remains unchanged\n                    4'd3: next_q[i*16 + j] = 1'b1;        // Becomes alive\n                    default: next_q[i*16 + j] = 1'b0;     // Becomes dead\n                endcase\n            end\n        end\n    end\n\n    // Sequential logic for state update\n    always_ff @(posedge clk) begin\n        if (!rst_n) begin\n            q <= 256'b0; // Reset to all zeros\n        end else if (load) begin\n            q <= data;   // Load new state\n        end else begin\n            q <= next_q; // Update to next state\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}