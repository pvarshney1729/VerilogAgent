{
    "code": "module TopModule (\n    input logic clk,         // Clock signal, active on rising edge.\n    input logic reset,       // Synchronous reset signal, active high.\n    input logic load,        // Load signal, active high.\n    input logic ena,         // Enable signal, active high.\n    input logic [1:0] amount,// Determines shift direction and amount.\n    input logic [63:0] data, // Input data for loading into the shift register.\n    output logic [63:0] q    // Output of the shift register.\n);\n\nalways @(posedge clk) begin\n    if (reset) begin\n        q <= 64'b0;\n    end else if (load) begin\n        q <= data;\n    end else if (ena) begin\n        case (amount)\n            2'b00: q <= q << 1;\n            2'b01: q <= q << 8;\n            2'b10: q <= {q[63], q[63:1]}; // Arithmetic right shift by 1\n            2'b11: q <= { {8{q[63]}}, q[63:8] }; // Arithmetic right shift by 8\n            default: q <= q; // Default case to handle unexpected values\n        endcase\n    end\nend\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 2
}