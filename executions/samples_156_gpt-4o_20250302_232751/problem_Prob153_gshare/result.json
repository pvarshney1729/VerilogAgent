{
    "code": "module TopModule (\n    input  logic          clk,             // Clock input\n    input  logic          areset,          // Asynchronous reset, active high\n    input  logic          predict_valid,   // Prediction request valid\n    input  logic [6:0]    predict_pc,      // 7-bit program counter for prediction\n    output logic          predict_taken,   // Prediction result: branch taken or not\n    output logic [6:0]    predict_history, // Branch history used in prediction\n    input  logic          train_valid,     // Training request valid\n    input  logic          train_taken,     // Actual branch outcome for training\n    input  logic          train_mispredicted, // Indicates if the branch was mispredicted\n    input  logic [6:0]    train_history,   // Branch history for training\n    input  logic [6:0]    train_pc         // 7-bit program counter for training\n);\n\n    logic [6:0] global_history;\n    logic [1:0] PHT [0:127]; // 128-entry table of two-bit saturating counters\n\n    // Initialize PHT and global_history on reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            global_history <= 7'b0000000;\n            for (int i = 0; i < 128; i++) begin\n                PHT[i] <= 2'b01; // Weakly not-taken state\n            end\n        end else begin\n            if (train_valid) begin\n                logic [6:0] train_index = train_pc ^ train_history;\n                if (train_taken && PHT[train_index] != 2'b11) begin\n                    PHT[train_index] <= PHT[train_index] + 1;\n                end else if (!train_taken && PHT[train_index] != 2'b00) begin\n                    PHT[train_index] <= PHT[train_index] - 1;\n                end\n                if (train_mispredicted) begin\n                    global_history <= train_history;\n                end\n            end\n        end\n    end\n\n    // Prediction logic\n    always_comb begin\n        if (predict_valid) begin\n            logic [6:0] predict_index = predict_pc ^ global_history;\n            predict_taken = PHT[predict_index][1]; // MSB determines taken or not\n            predict_history = global_history;\n        end else begin\n            predict_taken = 1'b0;\n            predict_history = 7'b0000000;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 610,
        "passfail": "R"
    },
    "iterations_used": 1
}