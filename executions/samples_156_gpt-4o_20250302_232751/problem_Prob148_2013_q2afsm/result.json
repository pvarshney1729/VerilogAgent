{
    "code": "module TopModule (\n    input  wire clk,             // Clock signal\n    input  wire resetn,          // Active-low synchronous reset\n    input  wire [2:0] r,         // Request signals (r[0]: high priority, r[2]: low priority)\n    output reg  [2:0] g          // Grant signals (g[0]: high priority, g[2]: low priority)\n);\n\n    reg [1:0] state, next_state;\n\n    // State encoding\n    localparam A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\n    // State register\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: begin\n                if (r[0])        next_state = B;\n                else if (r[1])   next_state = C;\n                else if (r[2])   next_state = D;\n                else             next_state = A;\n            end\n            B: begin\n                if (r[0])        next_state = B;\n                else             next_state = A;\n            end\n            C: begin\n                if (r[1])        next_state = C;\n                else             next_state = A;\n            end\n            D: begin\n                if (r[2])        next_state = D;\n                else             next_state = A;\n            end\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        g = 3'b000; // Default output\n        case (state)\n            B: g[0] = 1;\n            C: g[1] = 1;\n            D: g[2] = 1;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "R"
    },
    "iterations_used": 1
}