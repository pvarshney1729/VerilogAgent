{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic [7:0] in,\n    output logic [23:0] out_bytes,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE  = 2'b00,\n        BYTE1 = 2'b01,\n        BYTE2 = 2'b10,\n        BYTE3 = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (in[3] == 1) begin\n                    next_state = BYTE1;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            BYTE1: next_state = BYTE2;\n            BYTE2: next_state = BYTE3;\n            BYTE3: next_state = IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            out_bytes <= 24'b0;\n            done <= 1'b0;\n        end else begin\n            done <= 1'b0; // Default deassert done\n            case (current_state)\n                BYTE1: out_bytes[23:16] <= in;\n                BYTE2: out_bytes[15:8] <= in;\n                BYTE3: begin\n                    out_bytes[7:0] <= in;\n                    done <= 1'b1; // Assert done for one cycle\n                end\n            endcase\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 676,
        "passfail": "R"
    },
    "iterations_used": 2
}