{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic predict_valid,\n    input logic [6:0] predict_pc,\n    output logic predict_taken,\n    output logic [6:0] predict_history,\n    input logic train_valid,\n    input logic train_taken,\n    input logic train_mispredicted,\n    input logic [6:0] train_history,\n    input logic [6:0] train_pc\n);\n\n    logic [1:0] PHT [127:0]; // Pattern History Table\n    logic [6:0] global_history; // Global history register\n    logic [6:0] index; // Index for PHT\n    logic [1:0] pht_entry; // Current PHT entry\n    logic [1:0] next_pht_entry; // Next PHT entry after training\n\n    // Calculate index for PHT\n    assign index = predict_pc ^ global_history;\n\n    // Combinational logic for prediction\n    always @(*) begin\n        pht_entry = PHT[index];\n        case (pht_entry)\n            2'b00: predict_taken = 0;\n            2'b01: predict_taken = 0;\n            2'b10: predict_taken = 1;\n            2'b11: predict_taken = 1;\n            default: predict_taken = 0; // Default case\n        endcase\n        predict_history = global_history;\n    end\n\n    // Sequential logic for training and updating PHT and global history\n    always @(posedge clk) begin\n        if (areset) begin\n            global_history <= 7'b0;\n            for (int i = 0; i < 128; i++) begin\n                PHT[i] <= 2'b00;\n            end\n        end else begin\n            if (train_valid) begin\n                // Update PHT based on training\n                if (train_taken) begin\n                    if (PHT[train_pc ^ train_history] < 2'b11) begin\n                        PHT[train_pc ^ train_history] <= PHT[train_pc ^ train_history] + 1;\n                    end\n                end else begin\n                    if (PHT[train_pc ^ train_history] > 2'b00) begin\n                        PHT[train_pc ^ train_history] <= PHT[train_pc ^ train_history] - 1;\n                    end\n                end\n                // Update global history\n                if (train_mispredicted) begin\n                    global_history <= train_history; // Recover to history after misprediction\n                end else begin\n                    global_history <= {global_history[5:0], train_taken}; // Shift in the new outcome\n                end\n            end else if (predict_valid) begin\n                // Update global history for prediction\n                global_history <= {global_history[5:0], predict_taken}; // Shift in the predicted outcome\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 558,
        "passfail": "R"
    }
}