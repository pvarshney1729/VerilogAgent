{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic x,\n    output logic z\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        INVERT,\n        OUTPUT\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [1:0] count;\n    logic inverted_bit;\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= IDLE;\n            count <= 2'b00;\n            inverted_bit <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (current_state == INVERT) begin\n            inverted_bit <= ~x;\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (current_state == OUTPUT) begin\n            z <= inverted_bit;\n        end\n    end\n\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (!areset) begin\n                    next_state = INVERT;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            INVERT: begin\n                if (count < 2'b11) begin\n                    count = count + 1;\n                    next_state = INVERT;\n                end else begin\n                    next_state = OUTPUT;\n                end\n            end\n            OUTPUT: begin\n                next_state = IDLE;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 436,
        "passfail": "R"
    }
}