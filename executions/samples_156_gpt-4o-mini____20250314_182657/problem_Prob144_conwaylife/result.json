{
    "code": "module TopModule (\n    input logic clk,\n    input logic load,\n    input logic [255:0] data,\n    output logic [255:0] q\n);\n\n    logic [255:0] current_state, next_state;\n\n    // Synchronous load\n    always @(posedge clk) begin\n        if (load) begin\n            current_state <= data;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Neighbour count and next state logic\n    always @(*) begin\n        next_state = 256'b0; // Initialize next state to all dead cells\n        for (int i = 0; i < 256; i++) begin\n            int count = 0;\n            // Calculate the number of alive neighbours\n            for (int dx = -1; dx <= 1; dx++) begin\n                for (int dy = -1; dy <= 1; dy++) begin\n                    if (dx == 0 && dy == 0) continue; // Skip the cell itself\n                    int x = (i % 16 + dx + 16) % 16; // Wrap around x\n                    int y = (i / 16 + dy + 16) % 16; // Wrap around y\n                    count += current_state[y * 16 + x];\n                end\n            end\n            \n            // Determine the next state based on the count of neighbours\n            if (current_state[i]) begin\n                if (count == 2 || count == 3) begin\n                    next_state[i] = 1'b1; // Stay alive\n                end\n            end else begin\n                if (count == 3) begin\n                    next_state[i] = 1'b1; // Become alive\n                end\n            end\n        end\n    end\n\n    assign q = current_state; // Output the current state\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}