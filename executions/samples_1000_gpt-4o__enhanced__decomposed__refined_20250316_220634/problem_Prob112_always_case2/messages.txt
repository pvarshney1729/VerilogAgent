[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  in  (4 bits)\n - output pos (2 bits)\n\nThe module should implement a priority encoder. A priority encoder is a\ncombinational circuit that, when given an input bit vector, outputs the\nposition of the first 1 bit in the vector. For example, a 8-bit priority\nencoder given the input 8'b10010000 would output 3'd4, because bit[4] is\nfirst bit that is high. Build a 4-bit priority encoder. For this problem,\nif none of the input bits are high (i.e., input is zero), output zero.\nNote that a 4-bit number has 16 possible combinations.\n\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    The module \"TopModule\" is a combinational logic circuit designed as a priority encoder with the following specifications:\n\n- **Module Name**: TopModule\n- **Inputs**:\n  - `in`: A 4-bit vector input, denoted as `in[3:0]`. Here, `in[3]` is the most significant bit (MSB) and `in[0]` is the least significant bit (LSB).\n  \n- **Outputs**:\n  - `pos`: A 2-bit vector output, denoted as `pos[1:0]`, representing the binary position of the first high ('1') bit found in the input vector `in`.\n\n**Functionality**:\n- The priority encoder scans the input `in` from the MSB (`in[3]`) to the LSB (`in[0]`).\n- The output `pos` provides the binary index of the first high ('1') bit encountered during this scan. The index is based on a 0-based counting system (`in[0]` corresponds to position 0).\n- If the input `in` is `4'b0000` (i.e., all bits are low), the output `pos` should be `2'b00`.\n\n**Behavioral Examples**:\n- Example 1: If `in` is `4'b1000`, then `pos` should be `2'b11` since the first high bit is at position 3.\n- Example 2: If `in` is `4'b0100`, then `pos` should be `2'b10` since the first high bit is at position 2.\n- Example 3: If `in` is `4'b0010`, then `pos` should be `2'b01` since the first high bit is at position 1.\n- Example 4: If `in` is `4'b0001`, then `pos` should be `2'b00` since the first high bit is at position 0.\n- Example 5: If `in` is `4'b0000`, then `pos` should be `2'b00` as no high bit is present.\n\n**Notes**:\n- This module should be implemented as a purely combinational circuit, meaning there are no clock inputs or sequential elements involved.\n- The operation of the module should be completed in a single evaluation cycle of the simulation or synthesis tool.\n- No reset signal is necessary as there are no state-holding elements in this design.\n                    "
    },
    {
        "role": "user",
        "content": "Now using ALL the research you have done so far, please implement the Verilog module for the original specification:\n<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  in  (4 bits)\n - output pos (2 bits)\n\nThe module should implement a priority encoder. A priority encoder is a\ncombinational circuit that, when given an input bit vector, outputs the\nposition of the first 1 bit in the vector. For example, a 8-bit priority\nencoder given the input 8'b10010000 would output 3'd4, because bit[4] is\nfirst bit that is high. Build a 4-bit priority encoder. For this problem,\nif none of the input bits are high (i.e., input is zero), output zero.\nNote that a 4-bit number has 16 possible combinations.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n"
    }
]