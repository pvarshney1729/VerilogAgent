[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  j\n - input  k\n - output out\n\nThe module should implement a Moore state machine with two states, two\ninputs, and one output according to diagram described below. Reset is an\nactive-high asynchronous reset to state OFF.\n\n  OFF (out=0) --j=0--> OFF\n  OFF (out=0) --j=1--> ON\n  ON  (out=1) --k=0--> ON\n  ON  (out=1) --k=1--> OFF\n\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nPort Definitions:\n- input clk: A clock signal, positive edge-triggered, width = 1 bit.\n- input areset: An asynchronous active-high reset signal, width = 1 bit.\n- input j: Input signal used to control state transitions, width = 1 bit.\n- input k: Input signal used to control state transitions, width = 1 bit.\n- output out: Output signal representing the state output, width = 1 bit.\n\nState Machine Description:\n- This module implements a Moore state machine with two states: OFF and ON.\n- The machine transitions between states based on the values of inputs j and k.\n- State transitions occur on the rising edge of the clock signal.\n- The initial state after reset is OFF.\n\nState Definitions:\n1. State OFF:\n   - Output: out = 0\n   - Transitions:\n     - If j = 0, remain in OFF.\n     - If j = 1, transition to ON.\n\n2. State ON:\n   - Output: out = 1\n   - Transitions:\n     - If k = 0, remain in ON.\n     - If k = 1, transition to OFF.\n\nReset Behavior:\n- The reset signal (areset) is active-high and asynchronous.\n- When areset is asserted (high), the state machine immediately transitions to the OFF state, regardless of the clock.\n- Upon release of areset (returning low), normal state transitions based on inputs j and k resume on the next rising edge of clk.\n\nBit Indexing and Conventions:\n- All inputs and outputs are treated as single-bit signals.\n- Bit indexing is not applicable due to single-bit nature of the ports.\n\nEdge Cases and Input Boundaries:\n- The behavior is fully defined for all possible combinations of inputs j and k in both states.\n- The transition logic ensures no race conditions, as changes occur synchronously with the clock except during asynchronous reset.\n                    "
    },
    {
        "role": "user",
        "content": "Now using ALL the research you have done so far, please implement the Verilog module for the original specification:\n<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  j\n - input  k\n - output out\n\nThe module should implement a Moore state machine with two states, two\ninputs, and one output according to diagram described below. Reset is an\nactive-high asynchronous reset to state OFF.\n\n  OFF (out=0) --j=0--> OFF\n  OFF (out=0) --j=1--> ON\n  ON  (out=1) --k=0--> ON\n  ON  (out=1) --k=1--> OFF\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n"
    }
]