[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk,\n - input  load,\n - input  data (512 bits)\n - output q    (512 bits)\n\nThe module should implement Rule 90, a one-dimensional cellular automaton\nwith interesting properties. The rules are simple. There is a\none-dimensional array of cells (on or off). At each time step, the next\nstate of each cell is the XOR of the cell's two current neighbours:\n\n  Left | Center | Right | Center's next state\n  1    | 1      | 1     | 0\n  1    | 1      | 0     | 1\n  1    | 0      | 1     | 0\n  1    | 0      | 0     | 1\n  0    | 1      | 1     | 1\n  0    | 1      | 0     | 0\n  0    | 0      | 1     | 1\n  0    | 0      | 0     | 0\n\nIn this circuit, create a 512-cell system (q[511:0]), and advance by one\ntime step each clock cycle. The load input indicates the state of the\nsystem should be loaded with data[511:0]. Assume the boundaries (q[-1]\nand q[512]) are both zero (off). Assume all sequential logic is triggered\non the positive edge of the clock.\n\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    The module, named TopModule, should have the following interface, with all input and output ports defined as below:\n\n- Input Ports:\n  - `input wire clk` : Clock signal for synchronization, active on the rising edge.\n  - `input wire load` : Control signal for loading initial data into the system.\n  - `input wire [511:0] data` : 512-bit wide input data used to initialize the cellular automaton state when load is asserted.\n\n- Output Ports:\n  - `output reg [511:0] q` : 512-bit wide output representing the current state of the cellular automaton.\n\nFunctional Description:\n\n1. The module implements Rule 90, a one-dimensional cellular automaton. The main operation is the computation of the next state of each cell, based on the XOR of its two current neighbors.\n\n2. The transition rules for each cell (Center) based on its neighbors (Left and Right) are as follows:\n   - If Left = 1, Center = 1, Right = 1, then the next state of Center = 0\n   - If Left = 1, Center = 1, Right = 0, then the next state of Center = 1\n   - If Left = 1, Center = 0, Right = 1, then the next state of Center = 0\n   - If Left = 1, Center = 0, Right = 0, then the next state of Center = 1\n   - If Left = 0, Center = 1, Right = 1, then the next state of Center = 1\n   - If Left = 0, Center = 1, Right = 0, then the next state of Center = 0\n   - If Left = 0, Center = 0, Right = 1, then the next state of Center = 1\n   - If Left = 0, Center = 0, Right = 0, then the next state of Center = 0\n\n3. Boundary conditions are defined as follows:\n   - Assume q[-1] (Left neighbor of q[0]) and q[512] (Right neighbor of q[511]) are both logically zero (off).\n\n4. The system operates as follows:\n   - On the rising edge of the clock (`clk`), if `load` is asserted (high), the state of the cellular automaton is initialized with the input data (`data[511:0]`).\n   - Otherwise, the state advances by one time step according to Rule 90.\n\n5. Initialization and Reset:\n   - The initial state of `q` is undefined until the first load or clock edge operation.\n\n6. The design should ensure that all sequential logic elements are triggered on the positive edge of `clk`.\n\n7. No explicit reset signal is provided; ensure the module supports initialization through the `load` signal.\n\n8. The bit indexing convention is such that `q[0]` refers to the least significant bit and `q[511]` refers to the most significant bit.\n\nThis specification ensures correct implementation by defining input/output widths, operation rules, and clock cycle dependencies.\n                    "
    },
    {
        "role": "user",
        "content": "Now using ALL the research you have done so far, please implement the Verilog module for the original specification:\n<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk,\n - input  load,\n - input  data (512 bits)\n - output q    (512 bits)\n\nThe module should implement Rule 90, a one-dimensional cellular automaton\nwith interesting properties. The rules are simple. There is a\none-dimensional array of cells (on or off). At each time step, the next\nstate of each cell is the XOR of the cell's two current neighbours:\n\n  Left | Center | Right | Center's next state\n  1    | 1      | 1     | 0\n  1    | 1      | 0     | 1\n  1    | 0      | 1     | 0\n  1    | 0      | 0     | 1\n  0    | 1      | 1     | 1\n  0    | 1      | 0     | 0\n  0    | 0      | 1     | 1\n  0    | 0      | 0     | 0\n\nIn this circuit, create a 512-cell system (q[511:0]), and advance by one\ntime step each clock cycle. The load input indicates the state of the\nsystem should be loaded with data[511:0]. Assume the boundaries (q[-1]\nand q[512]) are both zero (off). Assume all sequential logic is triggered\non the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n"
    }
]