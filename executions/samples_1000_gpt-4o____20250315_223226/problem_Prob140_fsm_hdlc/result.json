{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [2:0] {\n        IDLE       = 3'b000,\n        ONE        = 3'b001,\n        TWO_ONES   = 3'b010,\n        THREE_ONES = 3'b011,\n        FOUR_ONES  = 3'b100,\n        FIVE_ONES  = 3'b101,\n        SIX_ONES   = 3'b110,\n        SEVEN_ONES = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_comb begin\n        // Default outputs\n        disc = 1'b0;\n        flag = 1'b0;\n        err  = 1'b0;\n        next_state = current_state;\n\n        case (current_state)\n            IDLE: begin\n                if (in) next_state = ONE;\n            end\n            ONE: begin\n                if (in) next_state = TWO_ONES;\n                else next_state = IDLE;\n            end\n            TWO_ONES: begin\n                if (in) next_state = THREE_ONES;\n                else next_state = IDLE;\n            end\n            THREE_ONES: begin\n                if (in) next_state = FOUR_ONES;\n                else next_state = IDLE;\n            end\n            FOUR_ONES: begin\n                if (in) next_state = FIVE_ONES;\n                else next_state = IDLE;\n            end\n            FIVE_ONES: begin\n                if (in) next_state = SIX_ONES;\n                else begin\n                    next_state = IDLE;\n                    disc = 1'b1; // 0111110 detected\n                end\n            end\n            SIX_ONES: begin\n                if (in) next_state = SEVEN_ONES;\n                else begin\n                    next_state = IDLE;\n                    flag = 1'b1; // 01111110 detected\n                end\n            end\n            SEVEN_ONES: begin\n                if (in) begin\n                    next_state = SEVEN_ONES;\n                    err = 1'b1; // 01111111... detected\n                end else begin\n                    next_state = IDLE;\n                    err = 1'b1; // 01111111 detected\n                end\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 29,
        "passfail": "R"
    }
}