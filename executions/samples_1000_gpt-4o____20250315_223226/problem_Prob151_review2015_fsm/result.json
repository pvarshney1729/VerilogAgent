{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic data,\n    input  logic done_counting,\n    input  logic ack,\n    output logic shift_ena,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        IDLE        = 3'b000,\n        DETECT_1    = 3'b001,\n        DETECT_11   = 3'b010,\n        DETECT_110  = 3'b011,\n        DETECT_1101 = 3'b100,\n        SHIFT       = 3'b101,\n        COUNT       = 3'b110,\n        DONE        = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [1:0] shift_counter;\n\n    // State transition\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            shift_counter <= 2'b00;\n        end else begin\n            current_state <= next_state;\n            if (current_state == SHIFT)\n                shift_counter <= shift_counter + 1;\n            else\n                shift_counter <= 2'b00;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        next_state = current_state;\n        shift_ena = 1'b0;\n        counting = 1'b0;\n        done = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (data == 1'b1)\n                    next_state = DETECT_1;\n            end\n            DETECT_1: begin\n                if (data == 1'b1)\n                    next_state = DETECT_11;\n                else\n                    next_state = IDLE;\n            end\n            DETECT_11: begin\n                if (data == 1'b0)\n                    next_state = DETECT_110;\n                else\n                    next_state = IDLE;\n            end\n            DETECT_110: begin\n                if (data == 1'b1)\n                    next_state = DETECT_1101;\n                else\n                    next_state = IDLE;\n            end\n            DETECT_1101: begin\n                next_state = SHIFT;\n            end\n            SHIFT: begin\n                shift_ena = 1'b1;\n                if (shift_counter == 2'b11)\n                    next_state = COUNT;\n            end\n            COUNT: begin\n                counting = 1'b1;\n                if (done_counting)\n                    next_state = DONE;\n            end\n            DONE: begin\n                done = 1'b1;\n                if (ack)\n                    next_state = IDLE;\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 824,
        "passfail": "R"
    }
}