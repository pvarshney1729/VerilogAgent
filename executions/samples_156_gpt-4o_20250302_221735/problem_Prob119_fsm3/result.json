{
    "code": "module TopModule (\n    input logic clk,       // Clock signal, positive edge-triggered\n    input logic areset,    // Asynchronous active-high reset\n    input logic in,        // Input signal, 1-bit\n    output logic out       // Output signal, 1-bit\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        STATE_A = 2'b00,\n        STATE_B = 2'b01,\n        STATE_C = 2'b10,\n        STATE_D = 2'b11\n    } state_t;\n\n    state_t state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (state)\n            STATE_A: begin\n                if (in) next_state = STATE_B;\n                else next_state = STATE_A;\n                out = 1'b0;\n            end\n            STATE_B: begin\n                if (in) next_state = STATE_B;\n                else next_state = STATE_C;\n                out = 1'b0;\n            end\n            STATE_C: begin\n                if (in) next_state = STATE_D;\n                else next_state = STATE_A;\n                out = 1'b0;\n            end\n            STATE_D: begin\n                if (in) next_state = STATE_B;\n                else next_state = STATE_C;\n                out = 1'b1;\n            end\n            default: begin\n                next_state = STATE_A;\n                out = 1'b0;\n            end\n        endcase\n    end\n\n    // State register with asynchronous reset\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= STATE_A;\n            out <= 1'b0;\n        end else begin\n            state <= next_state;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}