{
    "code": "module TopModule (\n    input  logic        clk,\n    input  logic        load,\n    input  logic [255:0] data,\n    output logic [255:0] q\n);\n\n    logic [255:0] next_q;\n\n    // Function to calculate the number of alive neighbors for a given cell\n    function automatic logic [3:0] count_neighbors(input logic [255:0] grid, input int row, input int col);\n        logic [3:0] count;\n        int r, c;\n        count = 4'b0;\n        for (int i = -1; i <= 1; i++) begin\n            for (int j = -1; j <= 1; j++) begin\n                if (i != 0 || j != 0) begin\n                    r = (row + i + 16) % 16;\n                    c = (col + j + 16) % 16;\n                    count = count + grid[r * 16 + c];\n                end\n            end\n        end\n        return count;\n    endfunction\n\n    // Combinational logic to calculate next state\n    always @(*) begin\n        for (int row = 0; row < 16; row++) begin\n            for (int col = 0; col < 16; col++) begin\n                logic [3:0] neighbors;\n                neighbors = count_neighbors(q, row, col);\n                case (neighbors)\n                    4'd2: next_q[row * 16 + col] = q[row * 16 + col];\n                    4'd3: next_q[row * 16 + col] = 1'b1;\n                    default: next_q[row * 16 + col] = 1'b0;\n                endcase\n            end\n        end\n    end\n\n    // Sequential logic for state update\n    always_ff @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else begin\n            q <= next_q;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}