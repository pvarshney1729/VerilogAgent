{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        S1   = 3'b001,\n        S11  = 3'b010,\n        S111 = 3'b011,\n        S1111 = 3'b100,\n        S11111 = 3'b101,\n        S111110 = 3'b110,\n        S111111 = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] one_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            one_count <= 3'b000;\n        end else begin\n            current_state <= next_state;\n            if (in) begin\n                one_count <= (one_count == 3'b111) ? one_count : one_count + 1;\n            end else begin\n                one_count <= 3'b000;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (in) next_state = S1;\n            end\n            S1: begin\n                if (in) next_state = S11;\n                else next_state = IDLE;\n            end\n            S11: begin\n                if (in) next_state = S111;\n                else next_state = IDLE;\n            end\n            S111: begin\n                if (in) next_state = S1111;\n                else next_state = IDLE;\n            end\n            S1111: begin\n                if (in) next_state = S11111;\n                else next_state = IDLE;\n            end\n            S11111: begin\n                if (in) next_state = S111110;\n                else next_state = IDLE;\n            end\n            S111110: begin\n                if (in) next_state = S111111;\n                else begin\n                    next_state = IDLE;\n                    disc = 1'b1;\n                end\n            end\n            S111111: begin\n                if (in) begin\n                    next_state = S111111;\n                    err = 1'b1;\n                end else begin\n                    next_state = IDLE;\n                    flag = 1'b1;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 48,
        "passfail": "R"
    },
    "iterations_used": 1
}