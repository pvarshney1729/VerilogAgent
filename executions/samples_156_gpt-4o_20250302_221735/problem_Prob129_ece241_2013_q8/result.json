{
    "code": "module TopModule (\n    input logic clk,         // Clock signal, positive edge triggered\n    input logic aresetn,     // Asynchronous active-low reset\n    input logic x,           // Input signal for sequence detection\n    output logic z           // Output signal, asserted high when \"101\" sequence is detected\n);\n\n    typedef enum logic [1:0] {\n        S0 = 2'b00,\n        S1 = 2'b01,\n        S2 = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk or negedge aresetn) begin\n        if (!aresetn)\n            current_state <= S0;\n        else\n            current_state <= next_state;\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            S0: begin\n                if (x)\n                    next_state = S1;\n                else\n                    next_state = S0;\n            end\n            S1: begin\n                if (x)\n                    next_state = S1;\n                else\n                    next_state = S2;\n            end\n            S2: begin\n                if (x)\n                    next_state = S0;\n                else\n                    next_state = S1;\n            end\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        z = 1'b0;\n        if (current_state == S2 && x)\n            z = 1'b1;\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 18,
        "passfail": "R"
    },
    "iterations_used": 1
}