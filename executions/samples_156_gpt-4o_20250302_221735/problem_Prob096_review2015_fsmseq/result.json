{
    "code": "module TopModule (\n    input  logic clk,               // Clock input\n    input  logic reset,             // Active high synchronous reset\n    input  logic data,              // Single bit data stream input\n    output logic start_shifting     // Output to indicate sequence detection\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        IDLE  = 3'b000,\n        S1    = 3'b001,\n        S11   = 3'b010,\n        S110  = 3'b011,\n        FOUND = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            start_shifting <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == FOUND)\n                start_shifting <= 1'b1;\n            else\n                start_shifting <= 1'b0;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (data)\n                    next_state = S1;\n                else\n                    next_state = IDLE;\n            end\n            S1: begin\n                if (data)\n                    next_state = S11;\n                else\n                    next_state = IDLE;\n            end\n            S11: begin\n                if (data)\n                    next_state = S11;\n                else\n                    next_state = S110;\n            end\n            S110: begin\n                if (data)\n                    next_state = FOUND;\n                else\n                    next_state = IDLE;\n            end\n            FOUND: begin\n                next_state = FOUND;\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 12,
        "passfail": "R"
    },
    "iterations_used": 1
}