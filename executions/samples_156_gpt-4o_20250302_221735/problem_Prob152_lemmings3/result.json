{
    "code": "module TopModule (\n    input  logic clk,         // Clock signal, positive edge triggered\n    input  logic areset,      // Asynchronous reset, active high\n    input  logic bump_left,   // Bump sensor on the left\n    input  logic bump_right,  // Bump sensor on the right\n    input  logic ground,      // Ground presence sensor\n    input  logic dig,         // Digging command\n    output logic walk_left,   // Lemming walks left\n    output logic walk_right,  // Lemming walks right\n    output logic aaah,        // Lemming is falling\n    output logic digging      // Lemming is digging\n);\n\n    typedef enum logic [2:0] {\n        STATE_WALK_LEFT    = 3'b000,\n        STATE_WALK_RIGHT   = 3'b001,\n        STATE_FALLING_LEFT = 3'b010,\n        STATE_FALLING_RIGHT= 3'b011,\n        STATE_DIG_LEFT     = 3'b100,\n        STATE_DIG_RIGHT    = 3'b101\n    } state_t;\n\n    state_t state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= STATE_WALK_LEFT;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        // Default assignments\n        next_state = state;\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (state)\n            STATE_WALK_LEFT: begin\n                walk_left = 1'b1;\n                if (!ground) begin\n                    next_state = STATE_FALLING_LEFT;\n                end else if (dig) begin\n                    next_state = STATE_DIG_LEFT;\n                end else if (bump_left) begin\n                    next_state = STATE_WALK_RIGHT;\n                end\n            end\n            STATE_WALK_RIGHT: begin\n                walk_right = 1'b1;\n                if (!ground) begin\n                    next_state = STATE_FALLING_RIGHT;\n                end else if (dig) begin\n                    next_state = STATE_DIG_RIGHT;\n                end else if (bump_right) begin\n                    next_state = STATE_WALK_LEFT;\n                end\n            end\n            STATE_FALLING_LEFT: begin\n                aaah = 1'b1;\n                if (ground) begin\n                    next_state = STATE_WALK_LEFT;\n                end\n            end\n            STATE_FALLING_RIGHT: begin\n                aaah = 1'b1;\n                if (ground) begin\n                    next_state = STATE_WALK_RIGHT;\n                end\n            end\n            STATE_DIG_LEFT: begin\n                digging = 1'b1;\n                if (!ground) begin\n                    next_state = STATE_FALLING_LEFT;\n                end\n            end\n            STATE_DIG_RIGHT: begin\n                digging = 1'b1;\n                if (!ground) begin\n                    next_state = STATE_FALLING_RIGHT;\n                end\n            end\n            default: begin\n                next_state = STATE_WALK_LEFT;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}