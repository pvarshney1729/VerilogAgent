{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic ack,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        PATTERN_DETECT = 2'b01,\n        COUNTING = 2'b10,\n        COMPLETION = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] shift_reg;\n    logic [3:0] delay;\n    logic [13:0] cycle_counter;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            count <= 4'b0000;\n            counting <= 1'b0;\n            done <= 1'b0;\n            shift_reg <= 4'b0000;\n            delay <= 4'b0000;\n            cycle_counter <= 14'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == PATTERN_DETECT) begin\n                shift_reg <= {shift_reg[2:0], data};\n            end\n            if (current_state == COUNTING) begin\n                cycle_counter <= cycle_counter + 1;\n                count <= cycle_counter[13:10];\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        counting = 1'b0;\n        done = 1'b0;\n        case (current_state)\n            IDLE: begin\n                if (shift_reg == 4'b1101) begin\n                    next_state = PATTERN_DETECT;\n                end\n            end\n            PATTERN_DETECT: begin\n                if (shift_reg == 4'b1101) begin\n                    delay = {shift_reg[2:0], data};\n                    next_state = COUNTING;\n                end\n            end\n            COUNTING: begin\n                counting = 1'b1;\n                if (cycle_counter == ((delay + 1) * 1000) - 1) begin\n                    next_state = COMPLETION;\n                end\n            end\n            COMPLETION: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    },
    "iterations_used": 1
}