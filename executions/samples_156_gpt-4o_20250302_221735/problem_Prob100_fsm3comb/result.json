{
    "code": "module TopModule (\n    input logic clk,           // Clock signal for sequential logic\n    input logic rst_n,         // Active low asynchronous reset\n    input logic in,            // 1-bit input signal\n    input logic [1:0] state,   // 2-bit current state input\n    output logic [1:0] next_state, // 2-bit next state output\n    output logic out           // 1-bit output signal\n);\n\n    // Combinational logic for next state and output\n    always @(*) begin\n        case (state)\n            2'b00: begin // State A\n                if (in == 1'b0) \n                    next_state = 2'b00; // Remain in State A\n                else \n                    next_state = 2'b01; // Transition to State B\n                out = 1'b0;\n            end\n            2'b01: begin // State B\n                if (in == 1'b0) \n                    next_state = 2'b10; // Transition to State C\n                else \n                    next_state = 2'b01; // Remain in State B\n                out = 1'b0;\n            end\n            2'b10: begin // State C\n                if (in == 1'b0) \n                    next_state = 2'b00; // Transition to State A\n                else \n                    next_state = 2'b11; // Transition to State D\n                out = 1'b0;\n            end\n            2'b11: begin // State D\n                if (in == 1'b0) \n                    next_state = 2'b10; // Transition to State C\n                else \n                    next_state = 2'b01; // Transition to State B\n                out = 1'b1;\n            end\n            default: begin\n                next_state = 2'b00; // Default to State A\n                out = 1'b0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}