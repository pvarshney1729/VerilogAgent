{
    "code": "module TopModule (\n    input  logic clk,          // Clock signal, positive edge-triggered\n    input  logic areset,       // Asynchronous reset signal, active high\n    input  logic bump_left,    // Bump from the left, active high\n    input  logic bump_right,   // Bump from the right, active high\n    input  logic ground,       // Ground presence signal, active high\n    input  logic dig,          // Digging command signal, active high\n    output logic walk_left,    // Lemming walking left indicator\n    output logic walk_right,   // Lemming walking right indicator\n    output logic aaah,         // Lemming falling indicator\n    output logic digging       // Lemming digging indicator\n);\n\n    typedef enum logic [2:0] {\n        WALK_LEFT,\n        WALK_RIGHT,\n        FALLING,\n        DIGGING,\n        SPLATTERED\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [4:0] fall_counter; // Counter for falling cycles\n\n    // Asynchronous reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= WALK_LEFT;\n            fall_counter <= 5'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        case (current_state)\n            WALK_LEFT: begin\n                if (ground == 1'b0) begin\n                    next_state <= FALLING;\n                end else if (bump_left == 1'b1) begin\n                    next_state <= WALK_RIGHT;\n                end else if (dig == 1'b1 && ground == 1'b1) begin\n                    next_state <= DIGGING;\n                end else begin\n                    next_state <= WALK_LEFT;\n                end\n            end\n\n            WALK_RIGHT: begin\n                if (ground == 1'b0) begin\n                    next_state <= FALLING;\n                end else if (bump_right == 1'b1) begin\n                    next_state <= WALK_LEFT;\n                end else if (dig == 1'b1 && ground == 1'b1) begin\n                    next_state <= DIGGING;\n                end else begin\n                    next_state <= WALK_RIGHT;\n                end\n            end\n\n            FALLING: begin\n                fall_counter <= fall_counter + 1;\n                if (ground == 1'b1) begin\n                    if (fall_counter < 5'd21) begin\n                        next_state <= (current_state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n                    end else begin\n                        next_state <= SPLATTERED;\n                    end\n                end else begin\n                    next_state <= FALLING;\n                end\n            end\n\n            DIGGING: begin\n                if (ground == 1'b0) begin\n                    next_state <= FALLING;\n                end else begin\n                    next_state <= (current_state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n                end\n            end\n\n            SPLATTERED: begin\n                next_state <= SPLATTERED; // Remain in splattered state\n            end\n\n            default: next_state <= WALK_LEFT; // Default to walking left\n        endcase\n    end\n\n    // Output logic based on current state\n    always_comb begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (current_state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n            end\n            WALK_RIGHT: begin\n                walk_right = 1'b1;\n            end\n            FALLING: begin\n                aaah = 1'b1;\n            end\n            DIGGING: begin\n                digging = 1'b1;\n            end\n            SPLATTERED: begin\n                // No outputs active in splattered state\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 433,
        "passfail": "C"
    }
}