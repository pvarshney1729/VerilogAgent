{
    "code": "module TopModule (\n    input logic clk,               // Clock signal, positive edge triggered\n    input logic reset,             // Active high synchronous reset\n    input logic data,              // Serial data input, 1-bit\n    input logic done_counting,     // 1-bit signal indicating counting completion\n    input logic ack,               // 1-bit acknowledgment input\n    output logic shift_ena,        // 1-bit output, active during bit shift\n    output logic counting,         // 1-bit output, active during counting phase\n    output logic done              // 1-bit output, active when timer is done\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        SHIFT = 2'b01,\n        COUNT = 2'b10,\n        DONE = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] shift_counter;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            shift_ena <= 0;\n            counting <= 0;\n            done <= 0;\n            shift_counter <= 0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        case (current_state)\n            IDLE: begin\n                shift_ena <= 0;\n                counting <= 0;\n                done <= 0;\n                if (data == 1 && shift_counter == 0) begin\n                    shift_counter <= 1;\n                end else if (shift_counter == 3) begin\n                    next_state <= SHIFT;\n                    shift_counter <= 0;\n                end else if (data == 0) begin\n                    shift_counter <= 0;\n                end\n            end\n            SHIFT: begin\n                shift_ena <= 1;\n                if (shift_counter < 3) begin\n                    shift_counter <= shift_counter + 1;\n                end else begin\n                    shift_ena <= 0;\n                    next_state <= COUNT;\n                end\n            end\n            COUNT: begin\n                counting <= 1;\n                if (done_counting) begin\n                    next_state <= DONE;\n                end\n            end\n            DONE: begin\n                done <= 1;\n                if (ack) begin\n                    next_state <= IDLE;\n                end\n            end\n        endcase\n    end\n\n    always_comb begin\n        case (current_state)\n            IDLE: next_state = (shift_counter == 3) ? SHIFT : IDLE;\n            SHIFT: next_state = (shift_counter == 3) ? COUNT : SHIFT;\n            COUNT: next_state = (done_counting) ? DONE : COUNT;\n            DONE: next_state = (ack) ? IDLE : DONE;\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}