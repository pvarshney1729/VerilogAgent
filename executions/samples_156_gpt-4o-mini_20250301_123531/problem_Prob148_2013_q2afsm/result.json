{
    "code": "module TopModule (\n    input logic clk,\n    input logic resetn,\n    input logic [2:0] r,\n    output logic [2:0] g\n);\n\n    typedef enum logic [1:0] {\n        STATE_A = 2'b00,\n        STATE_B = 2'b01,\n        STATE_C = 2'b10,\n        STATE_D = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Sequential block for state register\n    always_ff @(posedge clk) begin\n        if (!resetn) begin\n            current_state <= STATE_A;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Combinational block for state transition logic\n    always_comb begin\n        case (current_state)\n            STATE_A: begin\n                if (r[0]) begin\n                    next_state = STATE_B;\n                end else if (r[1]) begin\n                    next_state = STATE_C;\n                end else if (r[2]) begin\n                    next_state = STATE_D;\n                end else begin\n                    next_state = STATE_A;\n                end\n            end\n            STATE_B: begin\n                if (r[0]) begin\n                    next_state = STATE_B;\n                end else begin\n                    next_state = STATE_A;\n                end\n            end\n            STATE_C: begin\n                if (r[1]) begin\n                    next_state = STATE_C;\n                end else begin\n                    next_state = STATE_A;\n                end\n            end\n            default: begin\n                next_state = STATE_A;\n            end\n        endcase\n    end\n\n    // Combinational block for output logic\n    always_comb begin\n        case (current_state)\n            STATE_A: g = 3'b000;\n            STATE_B: g = 3'b001;\n            STATE_C: g = 3'b010;\n            STATE_D: g = 3'b100;\n            default: g = 3'b000;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 56,
        "passfail": "R"
    }
}