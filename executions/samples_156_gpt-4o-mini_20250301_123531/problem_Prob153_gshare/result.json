{
    "code": "module TopModule (\n    input logic clk,               // Clock signal, positive edge-triggered\n    input logic areset,            // Asynchronous reset, active-high\n\n    input logic predict_valid,     // Prediction request valid signal\n    input logic [6:0] predict_pc,  // 7-bit program counter for prediction\n    output logic predict_taken,     // Predicted branch direction\n    output logic [6:0] predict_history, // 7-bit branch history state used for prediction\n\n    input logic train_valid,       // Training request valid signal\n    input logic train_taken,       // Actual outcome of branch during training\n    input logic train_mispredicted,// Indicates if the branch was mispredicted\n    input logic [6:0] train_history, // 7-bit branch history during training\n    input logic [6:0] train_pc    // 7-bit program counter during training\n);\n\n    logic [6:0] global_history;\n    logic [1:0] PHT [127:0]; // 128-entry table of two-bit saturating counters\n\n    // Initialize PHT and global_history on reset\n    always @(posedge clk) begin\n        if (areset) begin\n            global_history <= 7'b0;\n            for (int i = 0; i < 128; i++) begin\n                PHT[i] <= 2'b10; // Initialize to weakly taken\n            end\n        end else begin\n            if (train_valid) begin\n                logic [6:0] index = train_pc ^ train_history;\n                if (train_taken) begin\n                    if (PHT[index] < 2'b11) PHT[index] <= PHT[index] + 1;\n                end else begin\n                    if (PHT[index] > 2'b00) PHT[index] <= PHT[index] - 1;\n                end\n                if (train_mispredicted) begin\n                    global_history <= train_history; // Restore history on mispredict\n                end\n            end else if (predict_valid) begin\n                logic [6:0] index = predict_pc ^ global_history;\n                predict_taken <= (PHT[index] >= 2'b10);\n                predict_history <= global_history;\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 610,
        "passfail": "R"
    }
}