{
    "code": "module TopModule (\n    input logic clk,                // Clock input, positive edge-triggered\n    input logic in,                 // Serial data input\n    input logic reset,              // Active-high synchronous reset\n    output logic [7:0] out_byte,    // Output byte, valid when `done` is high\n    output logic done               // Output flag, high when a byte is correctly received\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        RECEIVE,\n        VERIFY,\n        COMPLETE\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] bit_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            out_byte <= 8'b0;\n            done <= 1'b0;\n            bit_count <= 4'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == RECEIVE) begin\n                out_byte <= {in, out_byte[7:1]};\n                bit_count <= bit_count + 1;\n            end else if (current_state == COMPLETE) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) // Start bit detected\n                    next_state = RECEIVE;\n                else\n                    next_state = IDLE;\n            end\n            RECEIVE: begin\n                if (bit_count == 4'd8)\n                    next_state = VERIFY;\n                else\n                    next_state = RECEIVE;\n            end\n            VERIFY: begin\n                if (in == 1'b1) // Stop bit detected\n                    next_state = COMPLETE;\n                else\n                    next_state = IDLE; // Incorrect stop bit\n            end\n            COMPLETE: begin\n                next_state = IDLE; // Return to IDLE after done\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 50,
        "passfail": "R"
    }
}