{
    "code": "module TopModule (\n    input logic clk,               // Fast-running clock signal\n    input logic reset,             // Active high synchronous reset\n    input logic ena,               // Enable signal for incrementing time\n    output logic pm,                // PM indicator, 1 for PM, 0 for AM\n    output logic [7:0] hh,          // Hours in BCD, range: 01 to 12\n    output logic [7:0] mm,          // Minutes in BCD, range: 00 to 59\n    output logic [7:0] ss           // Seconds in BCD, range: 00 to 59\n);\n\n    always @(posedge clk) begin\n        if (reset) begin\n            hh <= 8'b0001_0010; // 12 in BCD\n            mm <= 8'b0000_0000; // 00 in BCD\n            ss <= 8'b0000_0000; // 00 in BCD\n            pm <= 1'b0;         // AM\n        end else if (ena) begin\n            if (ss == 8'b0000_0100_1111) begin // 59 in BCD\n                ss <= 8'b0000_0000; // Reset seconds to 00\n                if (mm == 8'b0000_0100_1111) begin // 59 in BCD\n                    mm <= 8'b0000_0000; // Reset minutes to 00\n                    if (hh == 8'b0001_0010) begin // 12 in BCD\n                        hh <= 8'b0000_0001; // Reset hours to 01\n                        pm <= ~pm; // Toggle PM/AM\n                    end else begin\n                        hh <= hh + 8'b0000_0001; // Increment hours\n                    end\n                end else begin\n                    mm <= mm + 8'b0000_0001; // Increment minutes\n                end\n            end else begin\n                ss <= ss + 8'b0000_0001; // Increment seconds\n            end\n        end\n    end\n\n    initial begin\n        hh = 8'b0001_0010; // 12 in BCD\n        mm = 8'b0000_0000; // 00 in BCD\n        ss = 8'b0000_0000; // 00 in BCD\n        pm = 1'b0;         // AM\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}