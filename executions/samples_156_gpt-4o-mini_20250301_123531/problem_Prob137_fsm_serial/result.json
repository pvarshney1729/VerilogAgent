{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        RECEIVE,\n        VERIFY,\n        ERROR\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] data;\n    logic [2:0] bit_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            data <= 8'b0;\n            bit_count <= 3'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == RECEIVE) begin\n                data[bit_count] <= in;\n                bit_count <= bit_count + 1'b1;\n            end else if (current_state == VERIFY) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = RECEIVE;\n                    bit_count = 3'b0;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            RECEIVE: begin\n                if (bit_count == 3'b111) begin\n                    next_state = VERIFY;\n                end else begin\n                    next_state = RECEIVE;\n                end\n            end\n            VERIFY: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = ERROR;\n                end\n            end\n            ERROR: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = ERROR;\n                end\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 28,
        "passfail": "R"
    }
}