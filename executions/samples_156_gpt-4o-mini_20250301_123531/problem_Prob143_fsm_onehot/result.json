{
    "code": "module TopModule (\n    input logic in,                   // Current input signal\n    input logic [9:0] state,          // Current state, one-hot encoded\n    output logic [9:0] next_state,     // Next state, one-hot encoded\n    output logic out1,                 // Output signal 1\n    output logic out2                  // Output signal 2\n);\n\nalways @(*) begin\n    // Default outputs\n    out1 = 0;\n    out2 = 0;\n    next_state = 10'b0000000000;\n\n    // State S0\n    if (state[0]) begin\n        if (in) next_state[1] = 1; // S0 --1--> S1\n        else next_state[0] = 1;    // S0 --0--> S0\n    end\n    // State S1\n    else if (state[1]) begin\n        if (in) next_state[2] = 1; // S1 --1--> S2\n        else next_state[0] = 1;    // S1 --0--> S0\n    end\n    // State S2\n    else if (state[2]) begin\n        if (in) next_state[3] = 1; // S2 --1--> S3\n        else next_state[0] = 1;    // S2 --0--> S0\n    end\n    // State S3\n    else if (state[3]) begin\n        if (in) next_state[4] = 1; // S3 --1--> S4\n        else next_state[0] = 1;    // S3 --0--> S0\n    end\n    // State S4\n    else if (state[4]) begin\n        if (in) next_state[5] = 1; // S4 --1--> S5\n        else next_state[0] = 1;    // S4 --0--> S0\n    end\n    // State S5\n    else if (state[5]) begin\n        if (in) next_state[6] = 1; // S5 --1--> S6\n        else next_state[0] = 1;    // S5 --0--> S0\n    end\n    // State S6\n    else if (state[6]) begin\n        if (in) next_state[7] = 1; // S6 --1--> S7\n        else next_state[0] = 1;    // S6 --0--> S0\n    end\n    // State S7\n    else if (state[7]) begin\n        out1 = 1;                   // S7 sets out1\n        if (in) next_state[8] = 1; // S7 --1--> S8\n        else next_state[0] = 1;    // S7 --0--> S0\n    end\n    // State S8\n    else if (state[8]) begin\n        out2 = 1;                   // S8 sets out2\n        if (in) next_state[9] = 1; // S8 --1--> S9\n        else next_state[0] = 1;    // S8 --0--> S0\n    end\n    // State S9\n    else if (state[9]) begin\n        out1 = 1;                   // S9 sets out1\n        out2 = 1;                   // S9 sets out2\n        next_state[0] = 1;          // S9 --0--> S0\n    end\n    // Default to S0 if no valid state is active\n    else begin\n        next_state[0] = 1;          // Default to S0\n    end\nend\n\nendmodule",
    "test_results": {
        "num_mismatch": 79,
        "passfail": "R"
    }
}