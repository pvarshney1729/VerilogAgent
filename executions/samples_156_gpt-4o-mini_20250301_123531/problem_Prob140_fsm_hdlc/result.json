{
    "code": "module TopModule (\n    input logic clk,            // Clock signal\n    input logic reset,          // Synchronous active-high reset\n    input logic in,             // Serial data input\n    output logic disc,          // Discard signal\n    output logic flag,          // Frame boundary signal\n    output logic err            // Error signal\n);\n\n    typedef enum logic [3:0] {\n        State0 = 4'b0000,\n        State1 = 4'b0001,\n        State2 = 4'b0010,\n        State3 = 4'b0011,\n        State4 = 4'b0100,\n        State5 = 4'b0101,\n        State6 = 4'b0110,\n        State7 = 4'b0111,\n        Error  = 4'b1000\n    } state_t;\n\n    state_t current_state, next_state;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= State0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        disc <= 1'b0;\n        flag <= 1'b0;\n        err <= 1'b0;\n\n        case (current_state)\n            State0: begin\n                if (in == 1'b0) begin\n                    next_state <= State1;\n                end else begin\n                    next_state <= State0;\n                end\n            end\n            State1: begin\n                if (in == 1'b1) begin\n                    next_state <= State2;\n                end else begin\n                    next_state <= State0;\n                end\n            end\n            State2: begin\n                if (in == 1'b1) begin\n                    next_state <= State3;\n                end else begin\n                    next_state <= State0;\n                end\n            end\n            State3: begin\n                if (in == 1'b1) begin\n                    next_state <= State4;\n                end else begin\n                    next_state <= State0;\n                end\n            end\n            State4: begin\n                if (in == 1'b1) begin\n                    next_state <= State5;\n                end else begin\n                    next_state <= State0;\n                end\n            end\n            State5: begin\n                if (in == 1'b1) begin\n                    next_state <= State6;\n                end else begin\n                    next_state <= State0;\n                end\n            end\n            State6: begin\n                if (in == 1'b0) begin\n                    disc <= 1'b1;\n                    next_state <= State7;\n                end else begin\n                    next_state <= Error;\n                end\n            end\n            State7: begin\n                if (in == 1'b0) begin\n                    flag <= 1'b1;\n                    next_state <= State1;\n                end else begin\n                    next_state <= State0;\n                end\n            end\n            Error: begin\n                err <= 1'b1;\n                next_state <= State0;\n            end\n            default: begin\n                next_state <= State0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 230,
        "passfail": "R"
    }
}