{
    "code": "module TopModule (\n    input logic clk,      // Clock signal, positive edge-triggered\n    input logic reset,    // Active high, synchronous reset\n    output logic shift_ena // Output to enable shift register\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        ENABLE = 2'b01,\n        HOLD = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] cycle_count; // 3 bits to count up to 4\n\n    localparam PROPER_PATTERN = 4'b1010; // Define the proper pattern\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= ENABLE; // Initialize to ENABLE state on reset\n            cycle_count <= 3'b000;    // Reset cycle count\n        end else begin\n            current_state <= next_state; // Transition to next state\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state; // Default to hold current state\n        case (current_state)\n            IDLE: begin\n                if (/* condition to detect PROPER_PATTERN */) begin\n                    next_state = ENABLE; // Transition to ENABLE on pattern detection\n                end\n            end\n            ENABLE: begin\n                if (cycle_count < 3'b011) begin\n                    cycle_count = cycle_count + 1; // Increment cycle count\n                    next_state = ENABLE; // Stay in ENABLE state\n                end else begin\n                    next_state = HOLD; // Transition to HOLD after 4 cycles\n                end\n            end\n            HOLD: begin\n                next_state = IDLE; // Transition back to IDLE\n            end\n        endcase\n    end\n\n    // Output logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            shift_ena <= 1'b1; // Assert shift_ena during reset\n        end else if (current_state == ENABLE) begin\n            shift_ena <= 1'b1; // Assert shift_ena in ENABLE state\n        end else begin\n            shift_ena <= 1'b0; // Deassert shift_ena in HOLD state\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}