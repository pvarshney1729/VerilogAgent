{
    "code": "module TopModule (\n    input  logic clk,            // Clock signal\n    input  logic reset,          // Synchronous active-high reset\n    output logic [2:0] ena,      // Enable signals for upper three BCD digits\n    output logic [15:0] q        // 4-digit BCD counter output\n);\n\n    always @(posedge clk) begin\n        if (reset) begin\n            q <= 16'b0;\n            ena <= 3'b0;\n        end else begin\n            // Increment logic for BCD counter\n            if (q[3:0] == 4'b1001) begin\n                q[3:0] <= 4'b0; // Reset ones place\n                if (q[7:4] == 4'b1001) begin\n                    q[7:4] <= 4'b0; // Reset tens place\n                    if (q[11:8] == 4'b1001) begin\n                        q[11:8] <= 4'b0; // Reset hundreds place\n                        if (q[15:12] == 4'b1001) begin\n                            q[15:12] <= 4'b0; // Reset thousands place\n                        end else begin\n                            q[15:12] <= q[15:12] + 1; // Increment thousands place\n                        end\n                    end else begin\n                        q[11:8] <= q[11:8] + 1; // Increment hundreds place\n                    end\n                end else begin\n                    q[7:4] <= q[7:4] + 1; // Increment tens place\n                end\n            end else begin\n                q[3:0] <= q[3:0] + 1; // Increment ones place\n            end\n            \n            // Enable signal logic\n            ena[0] <= (q[7:0] == 8'b00001001); // Enable for tens\n            ena[1] <= (q[11:0] == 12'b000000110001); // Enable for hundreds\n            ena[2] <= (q[15:0] == 16'b0000000011111001); // Enable for thousands\n        end\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 4422,
        "passfail": "R"
    }
}