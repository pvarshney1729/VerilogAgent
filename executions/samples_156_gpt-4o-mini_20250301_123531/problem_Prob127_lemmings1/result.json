{
    "code": "module TopModule (\n    input logic clk,            // Clock signal, positive edge triggered\n    input logic areset,         // Asynchronous active high reset\n    input logic bump_left,      // Input signal indicating an obstacle on the left\n    input logic bump_right,     // Input signal indicating an obstacle on the right\n    output logic walk_left,      // Output signal, high when walking left\n    output logic walk_right      // Output signal, high when walking right\n);\n\n    typedef enum logic {0, 1} state_t;\n    state_t current_state, next_state;\n\n    always_ff @(posedge clk) begin\n        if (areset) begin\n            current_state <= 0; // Reset to Walking Left\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_comb begin\n        case (current_state)\n            0: begin // Walking Left\n                walk_left = 1'b1;\n                walk_right = 1'b0;\n                if (bump_left || bump_right) begin\n                    next_state = 1; // Transition to Walking Right\n                end else begin\n                    next_state = 0; // Remain Walking Left\n                end\n            end\n            1: begin // Walking Right\n                walk_left = 1'b0;\n                walk_right = 1'b1;\n                if (bump_right || bump_left) begin\n                    next_state = 0; // Transition to Walking Left\n                end else begin\n                    next_state = 1; // Remain Walking Right\n                end\n            end\n            default: begin\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n                next_state = 0; // Default state\n            end\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}