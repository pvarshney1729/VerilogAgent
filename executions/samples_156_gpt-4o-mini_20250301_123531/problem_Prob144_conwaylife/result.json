{
    "code": "module TopModule (\n    input logic clk,          // Clock signal, positive edge triggered\n    input logic load,         // Load signal, active high, synchronous\n    input logic [255:0] data, // 256-bit data input for grid initialization\n    output logic [255:0] q     // 256-bit output representing the current state of the grid\n);\n\n    logic [255:0] next_q; // Next state of the grid\n\n    always @(*) begin\n        next_q = q; // Default to current state\n        if (load) begin\n            next_q = data; // Load new data if load is high\n        end else begin\n            // Compute next state based on current state\n            for (int i = 0; i < 16; i++) begin\n                for (int j = 0; j < 16; j++) begin\n                    int alive_neighbors = 0;\n                    // Count alive neighbors with wrap-around logic\n                    for (int di = -1; di <= 1; di++) begin\n                        for (int dj = -1; dj <= 1; dj++) begin\n                            if (di == 0 && dj == 0) continue; // Skip the cell itself\n                            int ni = (i + di + 16) % 16; // Wrapped row index\n                            int nj = (j + dj + 16) % 16; // Wrapped column index\n                            alive_neighbors += q[ni * 16 + nj]; // Count alive neighbors\n                        end\n                    end\n                    // Apply the rules to determine the next state of the cell\n                    if (alive_neighbors < 2) begin\n                        next_q[i * 16 + j] = 0;\n                    end else if (alive_neighbors == 2) begin\n                        next_q[i * 16 + j] = q[i * 16 + j];\n                    end else if (alive_neighbors == 3) begin\n                        next_q[i * 16 + j] = 1;\n                    end else begin\n                        next_q[i * 16 + j] = 0;\n                    end\n                end\n            end\n        end\n    end\n\n    always @(posedge clk) begin\n        q <= next_q; // Update the state on the clock edge\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    }
}