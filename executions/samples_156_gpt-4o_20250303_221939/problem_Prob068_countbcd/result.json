{
    "code": "module TopModule (\n    input logic clk,        // 1-bit clock signal\n    input logic reset,      // 1-bit synchronous active-high reset\n    output logic [2:0] ena, // 3-bit enable signal\n    output logic [15:0] q   // 16-bit BCD counter output\n);\n\n    // Internal registers for BCD digits\n    logic [3:0] ones, tens, hundreds, thousands;\n\n    // Sequential logic for BCD counter\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            // Reset all BCD digits and enable signals\n            ones <= 4'b0000;\n            tens <= 4'b0000;\n            hundreds <= 4'b0000;\n            thousands <= 4'b0000;\n            ena <= 3'b000;\n        end else begin\n            // Increment ones digit\n            if (ones == 4'd9) begin\n                ones <= 4'b0000;\n                ena[0] <= 1'b1;\n            end else begin\n                ones <= ones + 1'b1;\n                ena[0] <= 1'b0;\n            end\n\n            // Increment tens digit\n            if (ena[0]) begin\n                if (tens == 4'd9) begin\n                    tens <= 4'b0000;\n                    ena[1] <= 1'b1;\n                end else begin\n                    tens <= tens + 1'b1;\n                    ena[1] <= 1'b0;\n                end\n            end\n\n            // Increment hundreds digit\n            if (ena[1]) begin\n                if (hundreds == 4'd9) begin\n                    hundreds <= 4'b0000;\n                    ena[2] <= 1'b1;\n                end else begin\n                    hundreds <= hundreds + 1'b1;\n                    ena[2] <= 1'b0;\n                end\n            end\n\n            // Increment thousands digit\n            if (ena[2]) begin\n                if (thousands == 4'd9) begin\n                    thousands <= 4'b0000;\n                end else begin\n                    thousands <= thousands + 1'b1;\n                end\n            end\n        end\n    end\n\n    // Concatenate BCD digits to form the output\n    always_comb begin\n        q = {thousands, hundreds, tens, ones};\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "R"
    }
}