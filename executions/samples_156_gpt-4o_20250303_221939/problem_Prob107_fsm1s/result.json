{
    "code": "```verilog\nmodule TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic out\n);\n\n    typedef enum logic [0:0] {\n        STATE_A = 1'b0,\n        STATE_B = 1'b1\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            STATE_B: begin\n                if (in)\n                    next_state = STATE_B;\n                else\n                    next_state = STATE_A;\n            end\n            STATE_A: begin\n                if (in)\n                    next_state = STATE_A;\n                else\n                    next_state = STATE_B;\n            end\n            default: next_state = STATE_B; // Handle illegal states\n        endcase\n    end\n\n    // State register and output logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= STATE_B;\n            out <= 1'b1;\n        end else begin\n            current_state <= next_state;\n            case (next_state)\n                STATE_B: out <= 1'b1;\n                STATE_A: out <= 1'b0;\n            endcase\n        end\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}