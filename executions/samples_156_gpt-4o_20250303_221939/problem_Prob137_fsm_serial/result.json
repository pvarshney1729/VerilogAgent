{
    "code": "```verilog\nmodule TopModule (\n    input logic clk,           // Clock input, positive edge-triggered\n    input logic reset,         // Active-high synchronous reset\n    input logic in,            // Serial data input, 1-bit\n    output logic done          // Output signal, active high when a byte is successfully received\n);\n\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        START = 3'b001,\n        DATA_RECEIVE = 3'b010,\n        STOP = 3'b011,\n        ERROR = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n    logic [7:0] data_reg;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 3'b000;\n            data_reg <= 8'b00000000;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        next_state = current_state;\n        done = 1'b0;\n\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = START;\n                end\n            end\n\n            START: begin\n                next_state = DATA_RECEIVE;\n            end\n\n            DATA_RECEIVE: begin\n                if (bit_count == 3'b111) begin\n                    next_state = STOP;\n                end\n            end\n\n            STOP: begin\n                if (in == 1'b1) begin\n                    done = 1'b1;\n                    next_state = IDLE;\n                end else begin\n                    next_state = ERROR;\n                end\n            end\n\n            ERROR: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end\n            end\n\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Data reception logic\n    always_ff @(posedge clk) begin\n        if (current_state == DATA_RECEIVE) begin\n            data_reg <= {in, data_reg[7:1]};\n            bit_count <= bit_count + 1;\n        end else begin\n            bit_count <= 3'b000;\n        end\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}