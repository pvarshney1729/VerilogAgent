[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  j\n - input  k\n - output out\n\nThe module should implement a Moore state machine with two states, two\ninputs, and one output according to diagram described below. Reset is an\nactive-high asynchronous reset to state OFF.\n\n  OFF (out=0) --j=0--> OFF\n  OFF (out=0) --j=1--> ON\n  ON  (out=1) --k=0--> ON\n  ON  (out=1) --k=1--> OFF\n\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input clk`: Clock signal, active on the rising edge.\n  - `input areset`: Asynchronous reset signal, active high. Resets the state machine to the initial state (OFF).\n  - `input j`: Input signal for state transition from OFF to ON.\n  - `input k`: Input signal for state transition from ON to OFF.\n- Output Ports:\n  - `output out`: Output signal representing the current state (0 for OFF, 1 for ON).\n\nSpecifications:\n1. State Machine Type: Moore\n2. States:\n   - State `OFF`: \n     - Output `out` = 0\n     - Transitions:\n       - Remain in `OFF` when `j = 0`\n       - Transition to `ON` when `j = 1`\n   - State `ON`: \n     - Output `out` = 1\n     - Transitions:\n       - Remain in `ON` when `k = 0`\n       - Transition to `OFF` when `k = 1`\n\n3. Reset Behavior:\n   - Reset Type: Asynchronous\n   - Reset Condition: Active-high signal on `areset`.\n   - Reset Action: Immediately transitions the state machine to the `OFF` state, regardless of the clock.\n\n4. Clock Domain:\n   - The state transitions occur on the rising edge of `clk`.\n   - The state output (`out`) is updated at the same clock edge as the state transition.\n\n5. Initial Conditions:\n   - On reset (`areset` = 1), the initial state is `OFF` with `out` = 0.\n\n6. Additional Considerations:\n   - Inputs `j` and `k` are evaluated only on the rising edge of the `clk` unless `areset` is active.\n   - Ensure correct handling of race conditions by prioritizing the `areset` signal over clock-induced transitions.\n   - All transitions and outputs should adhere strictly to the state transition diagram described.\n\nThis specification ensures a clear implementation of the Moore state machine with well-defined input, output, and reset behaviors.\n                    "
    },
    {
        "role": "user",
        "content": "Now using ALL the research you have done so far, please implement the Verilog module for the original specification:\n<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  j\n - input  k\n - output out\n\nThe module should implement a Moore state machine with two states, two\ninputs, and one output according to diagram described below. Reset is an\nactive-high asynchronous reset to state OFF.\n\n  OFF (out=0) --j=0--> OFF\n  OFF (out=0) --j=1--> ON\n  ON  (out=1) --k=0--> ON\n  ON  (out=1) --k=1--> OFF\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n"
    }
]