{
    "code": "module TopModule(\n    input logic clk,\n    input logic rst,\n    input logic load,\n    input logic [255:0] data,\n    output logic [255:0] q\n);\n\n    logic [255:0] next_q;\n\n    always_ff @(posedge clk) begin\n        if (rst) begin\n            q <= 256'b0;\n        end else if (load) begin\n            q <= data;\n        end else begin\n            q <= next_q;\n        end\n    end\n\n    always_comb begin\n        for (int i = 0; i < 16; i++) begin\n            for (int j = 0; j < 16; j++) begin\n                int count = 0;\n                // Calculate neighbors with toroidal wrapping\n                count += q[((i-1) & 4'hF) * 16 + ((j-1) & 4'hF)];\n                count += q[((i-1) & 4'hF) * 16 + j];\n                count += q[((i-1) & 4'hF) * 16 + ((j+1) & 4'hF)];\n                count += q[i * 16 + ((j-1) & 4'hF)];\n                count += q[i * 16 + ((j+1) & 4'hF)];\n                count += q[((i+1) & 4'hF) * 16 + ((j-1) & 4'hF)];\n                count += q[((i+1) & 4'hF) * 16 + j];\n                count += q[((i+1) & 4'hF) * 16 + ((j+1) & 4'hF)];\n\n                // Apply state transition rules\n                if (count == 3 || (count == 2 && q[i * 16 + j])) begin\n                    next_q[i * 16 + j] = 1;\n                end else begin\n                    next_q[i * 16 + j] = 0;\n                end\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 780,
        "passfail": "R"
    },
    "iterations_used": 1
}