{
    "code": "module TopModule (\n    input logic clk,          // Clock input\n    input logic areset,       // Asynchronous reset, active on positive edge\n    input logic bump_left,    // Indicates an obstacle on the left\n    input logic bump_right,   // Indicates an obstacle on the right\n    input logic ground,       // Indicates presence of ground\n    input logic dig,          // Command to start digging\n    output logic walk_left,   // Lemming is walking left\n    output logic walk_right,  // Lemming is walking right\n    output logic aaah,        // Lemming is falling\n    output logic digging      // Lemming is digging\n);\n\n    typedef enum logic [2:0] {\n        WALK_LEFT = 3'b000,\n        WALK_RIGHT = 3'b001,\n        FALLING = 3'b010,\n        DIGGING = 3'b011,\n        SPLATTERED = 3'b100\n    } state_t;\n\n    state_t state, next_state;\n    logic [4:0] fall_counter;\n    state_t prev_walk_state;\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= WALK_LEFT;\n            fall_counter <= 5'd0;\n            prev_walk_state <= WALK_LEFT;\n        end else begin\n            state <= next_state;\n            if (state == FALLING) begin\n                fall_counter <= fall_counter + 5'd1;\n            end else begin\n                fall_counter <= 5'd0;\n            end\n            if (state == WALK_LEFT || state == WALK_RIGHT) begin\n                prev_walk_state <= state;\n            end\n        end\n    end\n\n    always_comb begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n        next_state = state;\n\n        case (state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                end else if (dig && ground) begin\n                    next_state = DIGGING;\n                end else if (bump_left) begin\n                    next_state = WALK_RIGHT;\n                end\n            end\n\n            WALK_RIGHT: begin\n                walk_right = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                end else if (dig && ground) begin\n                    next_state = DIGGING;\n                end else if (bump_right) begin\n                    next_state = WALK_LEFT;\n                end\n            end\n\n            FALLING: begin\n                aaah = 1'b1;\n                if (ground) begin\n                    if (fall_counter > 5'd20) begin\n                        next_state = SPLATTERED;\n                    end else begin\n                        next_state = prev_walk_state;\n                    end\n                end\n            end\n\n            DIGGING: begin\n                digging = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                end\n            end\n\n            SPLATTERED: begin\n                // All outputs remain 0\n            end\n        endcase\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 156,
        "passfail": "R"
    },
    "iterations_used": 1
}