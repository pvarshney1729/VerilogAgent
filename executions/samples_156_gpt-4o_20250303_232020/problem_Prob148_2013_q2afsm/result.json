{
    "code": "module TopModule (\n    input logic clk,         // Clock input\n    input logic resetn,      // Active-low synchronous reset\n    input logic [2:0] r,     // Request inputs (r[0] for device 0, r[1] for device 1, r[2] for device 2)\n    output logic [2:0] g     // Grant outputs (g[0] for device 0, g[1] for device 1, g[2] for device 2)\n);\n\n    logic [1:0] state, next_state;\n\n    localparam A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\n    // State register update\n    always @(posedge clk) begin\n        if (!resetn)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: begin\n                if (r[0]) next_state = B;\n                else if (r[1]) next_state = C;\n                else if (r[2]) next_state = D;\n                else next_state = A;\n            end\n            B: begin\n                if (!r[0]) next_state = A;\n                else next_state = B;\n            end\n            C: begin\n                if (!r[1]) next_state = A;\n                else next_state = C;\n            end\n            D: begin\n                if (!r[2]) next_state = A;\n                else next_state = D;\n            end\n            default: next_state = A;\n        endcase\n    end\n\n    // Grant outputs\n    always @(*) begin\n        g = 3'b000;\n        case (state)\n            B: g[0] = 1;\n            C: g[1] = 1;\n            D: g[2] = 1;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 2
}