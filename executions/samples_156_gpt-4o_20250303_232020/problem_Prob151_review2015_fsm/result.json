{
    "code": "module TopModule (\n    input logic clk,             // Clock signal, active on the rising edge\n    input logic reset,           // Active-high synchronous reset signal\n    input logic data,            // Serial data input (1-bit)\n    input logic done_counting,   // Signal indicating counting completion (1-bit)\n    input logic ack,             // Acknowledgment signal from user (1-bit)\n    output logic shift_ena,      // Output to enable shifting (1-bit)\n    output logic counting,       // Output indicating counting state (1-bit)\n    output logic done            // Output indicating timer completion (1-bit)\n);\n\n    typedef enum logic [1:0] {\n        STATE_IDLE  = 2'b00,\n        STATE_SHIFT = 2'b01,\n        STATE_COUNT = 2'b10,\n        STATE_DONE  = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] shift_counter;\n    logic [3:0] pattern_shift;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= STATE_IDLE;\n            shift_counter <= 4'b0000;\n            pattern_shift <= 4'b0000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == STATE_SHIFT) begin\n                shift_counter <= shift_counter + 1;\n            end else begin\n                shift_counter <= 4'b0000;\n            end\n            pattern_shift <= {pattern_shift[2:0], data};\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state;\n        shift_ena = 1'b0;\n        counting = 1'b0;\n        done = 1'b0;\n\n        case (current_state)\n            STATE_IDLE: begin\n                if (pattern_shift == 4'b1101) begin\n                    next_state = STATE_SHIFT;\n                end\n            end\n            STATE_SHIFT: begin\n                shift_ena = 1'b1;\n                if (shift_counter == 4'b0100) begin\n                    next_state = STATE_COUNT;\n                end\n            end\n            STATE_COUNT: begin\n                counting = 1'b1;\n                if (done_counting) begin\n                    next_state = STATE_DONE;\n                end\n            end\n            STATE_DONE: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = STATE_IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 478,
        "passfail": "R"
    },
    "iterations_used": 2
}