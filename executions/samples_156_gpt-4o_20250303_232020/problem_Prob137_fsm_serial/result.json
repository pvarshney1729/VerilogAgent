{
    "code": "module TopModule (\n    input logic clk,          // Clock signal, positive-edge triggered\n    input logic reset,        // Active-high synchronous reset\n    input logic in,           // Serial data input\n    output logic done         // Output signal indicating a byte has been correctly received\n);\n\n    typedef enum logic [2:0] {\n        IDLE  = 3'b000,\n        START = 3'b001,\n        DATA0 = 3'b010,\n        DATA1 = 3'b011,\n        DATA2 = 3'b100,\n        DATA3 = 3'b101,\n        DATA4 = 3'b110,\n        DATA5 = 3'b111,\n        DATA6 = 3'b000,\n        DATA7 = 3'b001,\n        STOP  = 3'b010,\n        ERROR = 3'b011\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n    logic [7:0] data_reg;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            done <= 1'b0;\n            bit_count <= 3'b000;\n            data_reg <= 8'b00000000;\n        end else begin\n            current_state <= next_state;\n            if (current_state >= DATA0 && current_state <= DATA7) begin\n                data_reg[bit_count] <= in;\n                bit_count <= bit_count + 1;\n            end\n            if (current_state == STOP && in == 1'b1) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    next_state = START;\n                end\n            end\n            START: begin\n                next_state = DATA0;\n            end\n            DATA0: next_state = DATA1;\n            DATA1: next_state = DATA2;\n            DATA2: next_state = DATA3;\n            DATA3: next_state = DATA4;\n            DATA4: next_state = DATA5;\n            DATA5: next_state = DATA6;\n            DATA6: next_state = DATA7;\n            DATA7: next_state = STOP;\n            STOP: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = ERROR;\n                end\n            end\n            ERROR: begin\n                if (in == 1'b1) begin\n                    next_state = IDLE;\n                end\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    },
    "iterations_used": 2
}