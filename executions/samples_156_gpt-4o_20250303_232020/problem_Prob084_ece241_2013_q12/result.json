{
    "code": "module TopModule (\n    input logic clk,            // Clock input, 1-bit\n    input logic enable,         // Enable input, 1-bit, synchronous active-high\n    input logic S,              // Shift register serial input, 1-bit\n    input logic [2:0] ABC,      // Address input for multiplexer, 3-bit\n    output logic Z              // Selected output from the shift register, 1-bit\n);\n\n    // 8-bit shift register\n    logic [7:0] Q;\n\n    // Shift register logic\n    always_ff @(posedge clk) begin\n        if (enable) begin\n            Q <= {Q[6:0], S}; // Shift left\n        end\n    end\n\n    // Multiplexer logic\n    always_comb begin\n        case (ABC)\n            3'b000: Z = Q[0];\n            3'b001: Z = Q[1];\n            3'b010: Z = Q[2];\n            3'b011: Z = Q[3];\n            3'b100: Z = Q[4];\n            3'b101: Z = Q[5];\n            3'b110: Z = Q[6];\n            3'b111: Z = Q[7];\n            default: Z = 1'b0; // Default case to handle undefined states\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    },
    "iterations_used": 2
}