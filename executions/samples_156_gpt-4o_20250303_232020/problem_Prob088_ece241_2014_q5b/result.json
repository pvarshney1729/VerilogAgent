{
    "code": "module TopModule (\n    input wire clk,       // Clock signal, positive edge-triggered\n    input wire areset,    // Asynchronous reset, active high\n    input wire x,         // Input signal\n    output reg z          // Output signal\n);\n\n    // State encoding using one-hot\n    localparam STATE_A = 2'b01;\n    localparam STATE_B = 2'b10;\n\n    reg [1:0] state, next_state;\n\n    // State transition logic\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= STATE_A;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Next state and output logic\n    always @(*) begin\n        case (state)\n            STATE_A: begin\n                if (x) begin\n                    next_state = STATE_B;\n                    z = 1;\n                end else begin\n                    next_state = STATE_A;\n                    z = 0;\n                end\n            end\n            STATE_B: begin\n                if (x) begin\n                    next_state = STATE_B;\n                    z = 0;\n                end else begin\n                    next_state = STATE_B;\n                    z = 1;\n                end\n            end\n            default: begin\n                next_state = STATE_A;\n                z = 0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}