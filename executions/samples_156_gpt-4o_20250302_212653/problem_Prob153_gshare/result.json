{
    "code": "module TopModule (\n    input logic clk, // Clock signal, positive edge-triggered.\n    input logic areset, // Asynchronous active-high reset.\n    input logic predict_valid, // Prediction request valid signal.\n    input logic [6:0] predict_pc, // 7-bit program counter for prediction.\n    output logic predict_taken, // Predicted branch direction.\n    output logic [6:0] predict_history, // 7-bit branch history used in prediction.\n    input logic train_valid, // Training request valid signal.\n    input logic train_taken, // Actual branch outcome.\n    input logic train_mispredicted, // Misprediction indicator.\n    input logic [6:0] train_history, // 7-bit branch history for training.\n    input logic [6:0] train_pc // 7-bit program counter for training.\n);\n\n    logic [6:0] GHR; // Global History Register\n    logic [1:0] PHT [0:127]; // Pattern History Table\n\n    // Initialize PHT entries to weakly non-taken state (2'b01)\n    initial begin\n        integer i;\n        for (i = 0; i < 128; i = i + 1) begin\n            PHT[i] = 2'b01;\n        end\n    end\n\n    // Asynchronous reset for GHR\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            GHR <= 7'b0000000;\n        end else if (train_valid) begin\n            if (train_mispredicted) begin\n                GHR <= train_history;\n            end else begin\n                GHR <= {GHR[5:0], train_taken};\n            end\n        end else if (predict_valid) begin\n            GHR <= {GHR[5:0], predict_taken};\n        end\n    end\n\n    // Prediction process\n    always_comb begin\n        if (predict_valid) begin\n            logic [6:0] predict_index;\n            predict_index = predict_pc ^ GHR;\n            predict_taken = PHT[predict_index][1];\n            predict_history = GHR;\n        end\n    end\n\n    // Training process\n    always_ff @(posedge clk) begin\n        if (train_valid) begin\n            logic [6:0] train_index;\n            train_index = train_pc ^ train_history;\n            if (train_taken) begin\n                if (PHT[train_index] < 2'b11) begin\n                    PHT[train_index] <= PHT[train_index] + 1;\n                end\n            end else begin\n                if (PHT[train_index] > 2'b00) begin\n                    PHT[train_index] <= PHT[train_index] - 1;\n                end\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 552,
        "passfail": "R"
    },
    "iterations_used": 1
}