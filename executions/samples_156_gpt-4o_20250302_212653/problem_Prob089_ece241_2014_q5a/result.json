{
    "code": "module TopModule (\n  input logic clk,        // Clock input; positive edge triggered\n  input logic areset,     // Asynchronous reset; active high\n  input logic x,          // Serial input stream; least significant bit first\n  output logic z          // Serial output stream; 2's complement of input\n);\n\n  typedef enum logic [1:0] {\n    IDLE = 2'b00,\n    INVERT = 2'b01,\n    ADD_ONE = 2'b10\n  } state_t;\n\n  state_t current_state, next_state;\n  logic carry;\n\n  // State transition logic\n  always_ff @(posedge clk or posedge areset) begin\n    if (areset) begin\n      current_state <= IDLE;\n      carry <= 1'b0;\n    end else begin\n      current_state <= next_state;\n    end\n  end\n\n  // Next state logic\n  always_comb begin\n    case (current_state)\n      IDLE: begin\n        if (x == 1'b1) begin\n          next_state = INVERT;\n        end else begin\n          next_state = IDLE;\n        end\n      end\n      INVERT: begin\n        next_state = ADD_ONE;\n      end\n      ADD_ONE: begin\n        next_state = ADD_ONE;\n      end\n      default: begin\n        next_state = IDLE;\n      end\n    endcase\n  end\n\n  // Output logic\n  always_ff @(posedge clk or posedge areset) begin\n    if (areset) begin\n      z <= 1'b0;\n    end else begin\n      case (current_state)\n        IDLE: begin\n          z <= x;\n        end\n        INVERT: begin\n          z <= ~x;\n        end\n        ADD_ONE: begin\n          z <= x ^ carry;\n          carry <= x & carry;\n        end\n        default: begin\n          z <= 1'b0;\n        end\n      endcase\n    end\n  end\n\nendmodule",
    "test_results": {
        "num_mismatch": 365,
        "passfail": "R"
    },
    "iterations_used": 1
}