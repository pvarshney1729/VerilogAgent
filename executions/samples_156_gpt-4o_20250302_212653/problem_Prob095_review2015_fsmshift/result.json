{
    "code": "module TopModule (\n    input logic clk,           // Clock input, active on rising edge\n    input logic reset,         // Active-high synchronous reset\n    output logic shift_ena     // Shift enable output\n);\n\n    typedef enum logic [1:0] {\n        S0,  // Initial state\n        S1,  // Assert shift_ena for 4 cycles\n        S2   // De-assert shift_ena\n    } state_t;\n\n    state_t state, next_state;\n    logic [1:0] cycle_count;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            state <= S1;\n            cycle_count <= 2'b00;\n        end else begin\n            state <= next_state;\n            if (state == S1) begin\n                cycle_count <= cycle_count + 1;\n            end else begin\n                cycle_count <= 2'b00;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (state)\n            S0: begin\n                if (reset) begin\n                    next_state = S1;\n                end else begin\n                    next_state = S0;\n                end\n            end\n            S1: begin\n                if (cycle_count == 2'b11) begin\n                    next_state = S2;\n                end else begin\n                    next_state = S1;\n                end\n            end\n            S2: begin\n                if (reset) begin\n                    next_state = S1;\n                end else begin\n                    next_state = S2;\n                end\n            end\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        case (state)\n            S1: shift_ena = 1'b1;\n            default: shift_ena = 1'b0;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}