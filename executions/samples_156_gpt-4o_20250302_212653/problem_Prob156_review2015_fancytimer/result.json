{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic ack,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        PATTERN_DETECT,\n        LOAD_DELAY,\n        COUNTDOWN,\n        WAIT_ACK\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay;\n    logic [9:0] cycle_counter;\n    logic [3:0] pattern_shift;\n    logic [3:0] delay_shift;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            count <= 4'bxxxx;\n            counting <= 1'b0;\n            done <= 1'b0;\n            cycle_counter <= 10'b0;\n            pattern_shift <= 4'b0;\n            delay_shift <= 4'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == LOAD_DELAY) begin\n                delay <= delay_shift;\n                count <= delay_shift;\n            end\n            if (current_state == COUNTDOWN) begin\n                if (cycle_counter == 10'd999) begin\n                    cycle_counter <= 10'b0;\n                    if (count != 4'b0) begin\n                        count <= count - 1;\n                    end\n                end else begin\n                    cycle_counter <= cycle_counter + 1;\n                end\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        counting = 1'b0;\n        done = 1'b0;\n        case (current_state)\n            IDLE: begin\n                if (reset) begin\n                    next_state = PATTERN_DETECT;\n                end\n            end\n            PATTERN_DETECT: begin\n                pattern_shift = {pattern_shift[2:0], data};\n                if (pattern_shift == 4'b1101) begin\n                    next_state = LOAD_DELAY;\n                end\n            end\n            LOAD_DELAY: begin\n                delay_shift = {delay_shift[2:0], data};\n                if (delay_shift[3]) begin\n                    next_state = COUNTDOWN;\n                end\n            end\n            COUNTDOWN: begin\n                counting = 1'b1;\n                if (count == 4'b0 && cycle_counter == 10'd999) begin\n                    next_state = WAIT_ACK;\n                end\n            end\n            WAIT_ACK: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = PATTERN_DETECT;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    },
    "iterations_used": 1
}