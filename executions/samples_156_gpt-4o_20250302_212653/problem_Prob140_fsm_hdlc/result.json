{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [2:0] {\n        IDLE    = 3'b000,\n        S1      = 3'b001,\n        S2      = 3'b010,\n        S3      = 3'b011,\n        S4      = 3'b100,\n        S5      = 3'b101,\n        DISCARD = 3'b110,\n        FLAG    = 3'b111,\n        ERROR   = 3'b110\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        next_state = current_state; // Default to hold state\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n        \n        case (current_state)\n            IDLE: begin\n                if (in) next_state = S1;\n            end\n            S1: begin\n                if (in) next_state = S2;\n                else next_state = IDLE;\n            end\n            S2: begin\n                if (in) next_state = S3;\n                else next_state = IDLE;\n            end\n            S3: begin\n                if (in) next_state = S4;\n                else next_state = IDLE;\n            end\n            S4: begin\n                if (in) next_state = S5;\n                else next_state = IDLE;\n            end\n            S5: begin\n                if (in) next_state = ERROR;\n                else next_state = DISCARD;\n            end\n            DISCARD: begin\n                disc = 1'b1;\n                next_state = IDLE;\n            end\n            FLAG: begin\n                flag = 1'b1;\n                next_state = IDLE;\n            end\n            ERROR: begin\n                err = 1'b1;\n                if (!in) next_state = IDLE;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    },
    "iterations_used": 3
}