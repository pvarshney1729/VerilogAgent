{
    "code": "module TopModule (\n    input logic clk,  // Clock signal, positive edge triggered\n    input logic areset,  // Asynchronous reset, active high\n    input logic bump_left,  // Bump signal from the left\n    input logic bump_right,  // Bump signal from the right\n    input logic ground,  // Ground presence signal\n    input logic dig,  // Digging command signal\n    output logic walk_left,  // Walking left state indicator\n    output logic walk_right,  // Walking right state indicator\n    output logic aaah,  // Falling state indicator\n    output logic digging  // Digging state indicator\n);\n\n    // State Encoding\n    typedef enum logic [2:0] {\n        WALK_LEFT = 3'b000,\n        WALK_RIGHT = 3'b001,\n        FALLING = 3'b010,\n        DIGGING = 3'b011,\n        SPLATTERED = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Falling time counter\n    integer fall_counter;\n\n    // Asynchronous Reset: Reset state to walk left\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= WALK_LEFT;\n            fall_counter <= 0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // State Transition Logic\n    always @(*) begin\n        // Default values\n        next_state = current_state;\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (current_state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                end else if (dig) begin\n                    next_state = DIGGING;\n                end else if (bump_left || bump_right) begin\n                    next_state = WALK_RIGHT;\n                end\n            end\n\n            WALK_RIGHT: begin\n                walk_right = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                end else if (dig) begin\n                    next_state = DIGGING;\n                end else if (bump_left || bump_right) begin\n                    next_state = WALK_LEFT;\n                end\n            end\n\n            FALLING: begin\n                aaah = 1'b1;\n                if (ground) begin\n                    if (fall_counter > 20) begin\n                        next_state = SPLATTERED;\n                    end else begin\n                        next_state = (current_state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n                    end\n                end\n            end\n\n            DIGGING: begin\n                digging = 1'b1;\n                if (!ground) begin\n                    next_state = FALLING;\n                end\n            end\n\n            SPLATTERED: begin\n                // Remain in SPLATTERED state; all outputs remain 0\n            end\n        endcase\n    end\n\n    // Falling Counter Logic\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            fall_counter <= 0;\n        end else if (current_state == FALLING) begin\n            fall_counter <= fall_counter + 1;\n        end else begin\n            fall_counter <= 0;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    },
    "iterations_used": 3
}