{
    "code": "module TopModule(\n    input logic clk,        // Clock signal, much faster than `ena`.\n    input logic reset,      // Synchronous active-high reset signal.\n    input logic ena,        // Enable signal for incrementing the clock.\n    output logic pm,        // 1-bit output, asserted for PM, de-asserted for AM.\n    output logic [7:0] hh,  // 8-bit output for hours (BCD format, 01-12).\n    output logic [7:0] mm,  // 8-bit output for minutes (BCD format, 00-59).\n    output logic [7:0] ss   // 8-bit output for seconds (BCD format, 00-59).\n);\n\n    // Initialize registers\n    initial begin\n        hh = 8'b00000000;\n        mm = 8'b00000000;\n        ss = 8'b00000000;\n        pm = 0;\n    end\n\n    // Clock behavior\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            hh <= 8'b00010010; // 12 in BCD\n            mm <= 8'b00000000; // 00 in BCD\n            ss <= 8'b00000000; // 00 in BCD\n            pm <= 0;           // AM\n        end else if (ena) begin\n            // Increment seconds\n            if (ss == 8'b01011000) begin\n                ss <= 8'b00000000;\n                // Increment minutes\n                if (mm == 8'b01011000) begin\n                    mm <= 8'b00000000;\n                    // Increment hours\n                    if (hh == 8'b00010010) begin\n                        hh <= 8'b00000001;\n                        pm <= ~pm; // Toggle AM/PM\n                    end else if (hh == 8'b00010001) begin\n                        hh <= 8'b00010010; // 12 in BCD\n                    end else begin\n                        hh <= hh + 8'b00000001;\n                    end\n                end else begin\n                    mm <= mm + 8'b00000001;\n                end\n            end else begin\n                ss <= ss + 8'b00000001;\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "T"
    }
}