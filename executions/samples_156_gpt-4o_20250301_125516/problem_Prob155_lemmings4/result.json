{
    "code": "module TopModule (\n    input logic clk,             // Clock signal for synchronization.\n    input logic areset,          // Asynchronous reset, active high.\n    input logic bump_left,       // Indicates a bump on the left.\n    input logic bump_right,      // Indicates a bump on the right.\n    input logic ground,          // Indicates presence of ground.\n    input logic dig,             // Command to start digging.\n    output logic walk_left,      // Output high when walking left.\n    output logic walk_right,     // Output high when walking right.\n    output logic aaah,           // Output high when falling.\n    output logic digging         // Output high when digging.\n);\n\n    typedef enum logic [2:0] {\n        WALK_LEFT,\n        WALK_RIGHT,\n        FALLING_LEFT,\n        FALLING_RIGHT,\n        DIGGING_LEFT,\n        DIGGING_RIGHT,\n        SPLATTERED\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [4:0] fall_counter;\n\n    // State transition logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= WALK_LEFT;\n            fall_counter <= 5'd0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == FALLING_LEFT || current_state == FALLING_RIGHT) begin\n                fall_counter <= fall_counter + 5'd1;\n            end else begin\n                fall_counter <= 5'd0;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = FALLING_LEFT;\n                end else if (dig) begin\n                    next_state = DIGGING_LEFT;\n                end else if (bump_left) begin\n                    next_state = WALK_RIGHT;\n                end else begin\n                    next_state = WALK_LEFT;\n                end\n            end\n            WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = FALLING_RIGHT;\n                end else if (dig) begin\n                    next_state = DIGGING_RIGHT;\n                end else if (bump_right) begin\n                    next_state = WALK_LEFT;\n                end else begin\n                    next_state = WALK_RIGHT;\n                end\n            end\n            FALLING_LEFT, FALLING_RIGHT: begin\n                if (ground && fall_counter > 5'd20) begin\n                    next_state = SPLATTERED;\n                end else if (ground) begin\n                    next_state = (current_state == FALLING_LEFT) ? WALK_LEFT : WALK_RIGHT;\n                end else begin\n                    next_state = current_state;\n                end\n            end\n            DIGGING_LEFT, DIGGING_RIGHT: begin\n                if (!ground) begin\n                    next_state = (current_state == DIGGING_LEFT) ? FALLING_LEFT : FALLING_RIGHT;\n                end else begin\n                    next_state = current_state;\n                end\n            end\n            SPLATTERED: begin\n                next_state = SPLATTERED;\n            end\n            default: begin\n                next_state = WALK_LEFT;\n            end\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n        case (current_state)\n            WALK_LEFT: walk_left = 1'b1;\n            WALK_RIGHT: walk_right = 1'b1;\n            FALLING_LEFT, FALLING_RIGHT: aaah = 1'b1;\n            DIGGING_LEFT, DIGGING_RIGHT: digging = 1'b1;\n            SPLATTERED: begin\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n                aaah = 1'b0;\n                digging = 1'b0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}