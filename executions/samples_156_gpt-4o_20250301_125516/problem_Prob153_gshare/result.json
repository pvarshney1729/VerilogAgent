{
    "code": "module TopModule (\n    input logic clk,              // Clock signal, positive-edge triggered\n    input logic areset,           // Asynchronous active-high reset\n\n    input logic predict_valid,    // Prediction request valid signal\n    input logic [6:0] predict_pc, // 7-bit Program Counter for prediction, unsigned\n    output logic predict_taken,   // Output prediction result (1 bit)\n    output logic [6:0] predict_history, // Current 7-bit Global History Register value, unsigned\n\n    input logic train_valid,      // Training request valid signal\n    input logic train_taken,      // Actual branch outcome (1 bit)\n    input logic train_mispredicted, // Misprediction flag (1 bit)\n    input logic [6:0] train_history, // 7-bit history value used in training, unsigned\n    input logic [6:0] train_pc    // 7-bit Program Counter for training, unsigned\n);\n\n    logic [6:0] GHR; // Global History Register\n    logic [1:0] PHT [0:127]; // Pattern History Table with 128 entries of 2-bit counters\n\n    // Asynchronous reset\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            GHR <= 7'b0;\n            for (int i = 0; i < 128; i++) begin\n                PHT[i] <= 2'b0;\n            end\n        end else begin\n            if (train_valid) begin\n                // Training logic\n                logic [6:0] train_index = train_pc ^ GHR;\n                if (train_taken) begin\n                    if (PHT[train_index] < 2'b11) begin\n                        PHT[train_index] <= PHT[train_index] + 1;\n                    end\n                end else begin\n                    if (PHT[train_index] > 2'b00) begin\n                        PHT[train_index] <= PHT[train_index] - 1;\n                    end\n                end\n\n                if (train_mispredicted) begin\n                    GHR <= train_history;\n                end else begin\n                    GHR <= {GHR[5:0], train_taken};\n                end\n            end else if (predict_valid) begin\n                // Prediction logic\n                logic [6:0] predict_index = predict_pc ^ GHR;\n                predict_taken <= PHT[predict_index][1];\n                GHR <= {GHR[5:0], predict_taken};\n            end\n        end\n    end\n\n    // Output current GHR\n    assign predict_history = GHR;\n\nendmodule",
    "test_results": {
        "num_mismatch": 610,
        "passfail": "R"
    }
}