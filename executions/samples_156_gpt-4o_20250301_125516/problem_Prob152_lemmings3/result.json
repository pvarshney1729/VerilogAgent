{
    "code": "module TopModule (\n    input logic clk,             // Clock signal, positive edge-triggered\n    input logic areset,          // Asynchronous reset, active high\n    input logic bump_left,       // 1-bit input: 1 indicates a bump on the left\n    input logic bump_right,      // 1-bit input: 1 indicates a bump on the right\n    input logic ground,          // 1-bit input: 1 indicates ground is present\n    input logic dig,             // 1-bit input: 1 indicates the command to dig\n    output logic walk_left,      // 1-bit output: 1 indicates walking left\n    output logic walk_right,     // 1-bit output: 1 indicates walking right\n    output logic aaah,           // 1-bit output: 1 indicates falling\n    output logic digging         // 1-bit output: 1 indicates digging\n);\n\n    typedef enum logic [1:0] {\n        LEFT = 2'b00,\n        RIGHT = 2'b01,\n        FALL = 2'b10,\n        DIG = 2'b11\n    } state_t;\n\n    state_t state, next_state;\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= LEFT;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    always_comb begin\n        // Default outputs\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (state)\n            LEFT: begin\n                if (!ground) begin\n                    next_state = FALL;\n                end else if (dig) begin\n                    next_state = DIG;\n                end else if (bump_left) begin\n                    next_state = RIGHT;\n                end else begin\n                    next_state = LEFT;\n                    walk_left = 1'b1;\n                end\n            end\n            RIGHT: begin\n                if (!ground) begin\n                    next_state = FALL;\n                end else if (dig) begin\n                    next_state = DIG;\n                end else if (bump_right) begin\n                    next_state = LEFT;\n                end else begin\n                    next_state = RIGHT;\n                    walk_right = 1'b1;\n                end\n            end\n            FALL: begin\n                aaah = 1'b1;\n                if (ground) begin\n                    next_state = (state == LEFT) ? LEFT : RIGHT;\n                end else begin\n                    next_state = FALL;\n                end\n            end\n            DIG: begin\n                if (!ground) begin\n                    next_state = FALL;\n                end else begin\n                    next_state = DIG;\n                    digging = 1'b1;\n                end\n            end\n            default: begin\n                next_state = LEFT;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}