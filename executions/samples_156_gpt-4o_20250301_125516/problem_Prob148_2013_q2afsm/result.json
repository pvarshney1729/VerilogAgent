{
    "code": "module TopModule (\n    input logic clk,            // Clock signal\n    input logic resetn,         // Active-low synchronous reset\n    input logic [2:0] r,        // 3-bit request signal from devices\n    output logic [2:0] g        // 3-bit grant signal to devices\n);\n\n    typedef enum logic [1:0] {\n        A = 2'b00,\n        B = 2'b01,\n        C = 2'b10,\n        D = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (!resetn) begin\n            current_state <= A;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        // Default assignments\n        next_state = current_state;\n        g = 3'b000;\n\n        case (current_state)\n            A: begin\n                if (r[0]) begin\n                    next_state = B;\n                    g = 3'b001;\n                end else if (r[1]) begin\n                    next_state = C;\n                    g = 3'b010;\n                end else if (r[2]) begin\n                    next_state = D;\n                    g = 3'b100;\n                end\n            end\n            B: begin\n                if (!r[0]) begin\n                    next_state = A;\n                end else begin\n                    g = 3'b001;\n                end\n            end\n            C: begin\n                if (!r[1]) begin\n                    next_state = A;\n                end else begin\n                    g = 3'b010;\n                end\n            end\n            D: begin\n                if (!r[2]) begin\n                    next_state = A;\n                end else begin\n                    g = 3'b100;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 432,
        "passfail": "R"
    }
}