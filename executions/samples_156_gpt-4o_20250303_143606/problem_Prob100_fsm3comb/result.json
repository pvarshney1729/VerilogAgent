{
    "code": "module TopModule (\n    input logic clk,            // Clock signal for sequential logic\n    input logic rst_n,          // Active low reset signal\n    input logic in,             // Single-bit input\n    input logic [1:0] state,    // Current state input (2 bits)\n    output logic [1:0] next_state, // Next state output (2 bits, registered for stability)\n    output logic out            // Output (1 bit, derived from state)\n);\n\n    always @(*) begin\n        // Default assignments\n        next_state = 2'b00;\n        out = 1'b0;\n\n        // State transition and output logic\n        case (state)\n            2'b00: begin // State A\n                if (in) begin\n                    next_state = 2'b01; // Transition to State B\n                end else begin\n                    next_state = 2'b00; // Remain in State A\n                end\n            end\n            2'b01: begin // State B\n                if (in) begin\n                    next_state = 2'b01; // Remain in State B\n                end else begin\n                    next_state = 2'b10; // Transition to State C\n                end\n            end\n            2'b10: begin // State C\n                if (in) begin\n                    next_state = 2'b11; // Transition to State D\n                end else begin\n                    next_state = 2'b00; // Transition to State A\n                end\n            end\n            2'b11: begin // State D\n                out = 1'b1; // Output is 1\n                if (in) begin\n                    next_state = 2'b01; // Transition to State B\n                end else begin\n                    next_state = 2'b10; // Transition to State C\n                end\n            end\n            default: begin\n                next_state = 2'b00; // Default to State A\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}