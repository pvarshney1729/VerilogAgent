{
    "code": "module TopModule (\n    input wire clk,          // Clock signal, positive edge triggered\n    input wire areset,       // Asynchronous reset, active high\n    input wire bump_left,    // Trigger to switch from walking left to right\n    input wire bump_right,   // Trigger to switch from walking right to left\n    output reg walk_left,    // High when Lemming is walking left\n    output reg walk_right    // High when Lemming is walking right\n);\n\n    // State encoding\n    typedef enum logic [0:0] {\n        STATE_LEFT  = 1'b0,\n        STATE_RIGHT = 1'b1\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            STATE_LEFT: begin\n                if (bump_left && bump_right)\n                    next_state = STATE_RIGHT;\n                else if (bump_left)\n                    next_state = STATE_RIGHT;\n                else\n                    next_state = STATE_LEFT;\n            end\n            STATE_RIGHT: begin\n                if (bump_left && bump_right)\n                    next_state = STATE_LEFT;\n                else if (bump_right)\n                    next_state = STATE_LEFT;\n                else\n                    next_state = STATE_RIGHT;\n            end\n            default: next_state = STATE_LEFT; // Default to a known state\n        endcase\n    end\n\n    // State register with asynchronous reset\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= STATE_LEFT;\n        else\n            current_state <= next_state;\n    end\n\n    // Output logic\n    always @(*) begin\n        case (current_state)\n            STATE_LEFT: begin\n                walk_left = 1'b1;\n                walk_right = 1'b0;\n            end\n            STATE_RIGHT: begin\n                walk_left = 1'b0;\n                walk_right = 1'b1;\n            end\n            default: begin\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}