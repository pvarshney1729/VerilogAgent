{
    "code": "module TopModule(\n    input logic clk,           // Clock signal, positive edge triggered\n    input logic areset,        // Asynchronous active-high reset\n    input logic bump_left,     // Indicates bump on the left\n    input logic bump_right,    // Indicates bump on the right\n    input logic ground,        // Indicates presence of ground\n    output logic walk_left,    // Lemming walks left when high\n    output logic walk_right,   // Lemming walks right when high\n    output logic aaah          // Lemming is falling when high\n);\n\n    typedef enum logic [1:0] {\n        WALK_LEFT = 2'b00,\n        WALK_RIGHT = 2'b01,\n        FALLING = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n    state_t previous_walk_state;\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= WALK_LEFT;\n            previous_walk_state <= WALK_LEFT;\n        end else begin\n            current_state <= next_state;\n            if (ground) begin\n                previous_walk_state <= next_state;\n            end\n        end\n    end\n\n    always_comb begin\n        case (current_state)\n            WALK_LEFT: begin\n                if (!ground) begin\n                    next_state = FALLING;\n                end else if (bump_left) begin\n                    next_state = WALK_RIGHT;\n                end else begin\n                    next_state = WALK_LEFT;\n                end\n            end\n            WALK_RIGHT: begin\n                if (!ground) begin\n                    next_state = FALLING;\n                end else if (bump_right) begin\n                    next_state = WALK_LEFT;\n                end else begin\n                    next_state = WALK_RIGHT;\n                end\n            end\n            FALLING: begin\n                if (ground) begin\n                    next_state = previous_walk_state;\n                end else begin\n                    next_state = FALLING;\n                end\n            end\n            default: begin\n                next_state = WALK_LEFT;\n            end\n        endcase\n    end\n\n    always_comb begin\n        walk_left = (current_state == WALK_LEFT);\n        walk_right = (current_state == WALK_RIGHT);\n        aaah = (current_state == FALLING);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}