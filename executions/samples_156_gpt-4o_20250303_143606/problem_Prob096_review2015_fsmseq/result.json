{
    "code": "```verilog\nmodule TopModule (\n    input  logic clk,          // Clock signal, positive edge-triggered\n    input  logic reset,        // Synchronous active-high reset\n    input  logic data,         // Input data bit stream\n    output logic start_shifting // Output signal, asserted high when sequence detected\n);\n\n    typedef enum logic [2:0] {\n        IDLE     = 3'b000,\n        S1       = 3'b001,\n        S11      = 3'b010,\n        S110     = 3'b011,\n        DETECTED = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            start_shifting <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DETECTED)\n                start_shifting <= 1'b1;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                if (data)\n                    next_state = S1;\n                else\n                    next_state = IDLE;\n            end\n            S1: begin\n                if (data)\n                    next_state = S11;\n                else\n                    next_state = IDLE;\n            end\n            S11: begin\n                if (data)\n                    next_state = S11;\n                else\n                    next_state = S110;\n            end\n            S110: begin\n                if (data)\n                    next_state = DETECTED;\n                else\n                    next_state = IDLE;\n            end\n            DETECTED: begin\n                if (reset)\n                    next_state = IDLE;\n                else\n                    next_state = DETECTED;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}