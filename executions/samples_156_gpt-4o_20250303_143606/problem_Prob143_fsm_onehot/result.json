{
    "code": "module TopModule (\n    input logic in,             // 1-bit input signal\n    input logic [9:0] state,    // 10-bit input current state, one-hot encoded\n    output logic [9:0] next_state, // 10-bit output next state, one-hot encoded\n    output logic out1,          // 1-bit output signal\n    output logic out2           // 1-bit output signal\n);\n\n    always @(*) begin\n        // Default next_state and outputs\n        next_state = 10'b0000000000;\n        out1 = 1'b0;\n        out2 = 1'b0;\n\n        // State transition logic\n        case (state)\n            10'b0000000001: next_state = in ? 10'b0000000010 : 10'b0000000001; // S0\n            10'b0000000010: next_state = in ? 10'b0000000100 : 10'b0000000001; // S1\n            10'b0000000100: next_state = in ? 10'b0000001000 : 10'b0000000001; // S2\n            10'b0000001000: next_state = in ? 10'b0000010000 : 10'b0000000001; // S3\n            10'b0000010000: next_state = in ? 10'b0000100000 : 10'b0000000001; // S4\n            10'b0000100000: next_state = in ? 10'b0001000000 : 10'b0010000000; // S5\n            10'b0001000000: next_state = in ? 10'b0010000000 : 10'b0100000000; // S6\n            10'b0010000000: next_state = in ? 10'b0010000000 : 10'b0000000001; // S7\n            10'b0100000000: next_state = in ? 10'b0000000010 : 10'b0000000001; // S8\n            10'b1000000000: next_state = in ? 10'b0000000010 : 10'b0000000001; // S9\n            default: next_state = 10'b0000000001; // Default to S0\n        endcase\n\n        // Output logic based on state\n        case (state)\n            10'b0010000000: {out1, out2} = 2'b01; // S7\n            10'b0100000000: {out1, out2} = 2'b10; // S8\n            10'b1000000000: {out1, out2} = 2'b11; // S9\n            default: {out1, out2} = 2'b00;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 27,
        "passfail": "R"
    }
}