{
    "code": "```verilog\nmodule TopModule (\n    input  logic clk,        // Clock signal, positive edge-triggered\n    input  logic reset,      // Synchronous active-high reset\n    input  logic w,          // Input signal\n    output logic z           // Output signal, 1-bit, unsigned\n);\n\n    // State Definitions\n    parameter logic [2:0] STATE_A = 3'b000;\n    parameter logic [2:0] STATE_B = 3'b001;\n    parameter logic [2:0] STATE_C = 3'b010;\n    parameter logic [2:0] STATE_D = 3'b011;\n    parameter logic [2:0] STATE_E = 3'b100;\n    parameter logic [2:0] STATE_F = 3'b101;\n\n    logic [2:0] state, next_state;\n\n    // State Transition Logic\n    always @(posedge clk) begin\n        if (reset) begin\n            state <= STATE_A;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Next State Logic\n    always @(*) begin\n        case (state)\n            STATE_A: next_state = (w ? STATE_B : STATE_A);\n            STATE_B: next_state = (w ? STATE_C : STATE_D);\n            STATE_C: next_state = (w ? STATE_E : STATE_D);\n            STATE_D: next_state = (w ? STATE_F : STATE_A);\n            STATE_E: next_state = (w ? STATE_E : STATE_D);\n            STATE_F: next_state = (w ? STATE_C : STATE_D);\n            default: next_state = STATE_A; // Default for safety\n        endcase\n    end\n\n    // Output Logic\n    always @(*) begin\n        case (state)\n            STATE_E, STATE_F: z = 1;\n            default: z = 0;\n        endcase\n    end\n\nendmodule\n```",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}