{
    "code": "module TopModule (\n    input logic clk,\n    input logic in,\n    input logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE  = 2'b00,\n        START = 2'b01,\n        DATA  = 2'b10,\n        STOP  = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] shift_reg;\n    logic [3:0] bit_count;\n\n    // State register with synchronous reset\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            shift_reg <= 8'b0;\n            bit_count <= 4'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        next_state = current_state; // Default to hold state\n        done = 1'b0; // Default done signal\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) // Detect start bit\n                    next_state = START;\n            end\n            START: begin\n                next_state = DATA;\n                bit_count = 4'b0;\n            end\n            DATA: begin\n                shift_reg = {in, shift_reg[7:1]}; // Shift in LSB first\n                bit_count = bit_count + 1;\n                if (bit_count == 4'd7) // After 8 data bits\n                    next_state = STOP;\n            end\n            STOP: begin\n                if (in == 1'b1) begin // Check stop bit\n                    done = 1'b1;\n                    out_byte = shift_reg;\n                end\n                next_state = IDLE;\n            end\n            default: next_state = IDLE; // Default case\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 55,
        "passfail": "R"
    }
}