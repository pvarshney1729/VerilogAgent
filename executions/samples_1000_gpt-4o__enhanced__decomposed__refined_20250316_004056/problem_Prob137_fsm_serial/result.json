{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic in,\n    output logic done\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        IDLE      = 3'b000,\n        START     = 3'b001,\n        DATA      = 3'b010,\n        STOP      = 3'b011,\n        WAIT_STOP = 3'b100\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [2:0] bit_count;\n\n    // State register with synchronous reset\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 3'b000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DATA) begin\n                bit_count <= bit_count + 1;\n            end else begin\n                bit_count <= 3'b000;\n            end\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        next_state = current_state;\n        done = 1'b0; // Default value\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) // Detect start bit\n                    next_state = START;\n            end\n\n            START: begin\n                next_state = DATA;\n            end\n\n            DATA: begin\n                if (bit_count == 3'd7) // After 8 data bits\n                    next_state = STOP;\n            end\n\n            STOP: begin\n                if (in == 1'b1) begin // Correct stop bit\n                    done = 1'b1;\n                    next_state = IDLE;\n                end else begin\n                    next_state = WAIT_STOP;\n                end\n            end\n\n            WAIT_STOP: begin\n                if (in == 1'b1) // Wait for stop bit\n                    next_state = IDLE;\n            end\n\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 47,
        "passfail": "R"
    }
}