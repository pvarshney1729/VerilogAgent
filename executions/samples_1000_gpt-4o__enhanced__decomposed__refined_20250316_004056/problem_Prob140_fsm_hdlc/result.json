{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        S0 = 3'b000,  // Initial state, equivalent to 0 previous 1s\n        S1 = 3'b001,  // 1 consecutive 1\n        S2 = 3'b010,  // 2 consecutive 1s\n        S3 = 3'b011,  // 3 consecutive 1s\n        S4 = 3'b100,  // 4 consecutive 1s\n        S5 = 3'b101,  // 5 consecutive 1s\n        S6 = 3'b110,  // 6 consecutive 1s\n        S7 = 3'b111   // 7 or more consecutive 1s (error state)\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State register with synchronous reset\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= S0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            S0: next_state = (in) ? S1 : S0;\n            S1: next_state = (in) ? S2 : S0;\n            S2: next_state = (in) ? S3 : S0;\n            S3: next_state = (in) ? S4 : S0;\n            S4: next_state = (in) ? S5 : S0;\n            S5: next_state = (in) ? S6 : S0;\n            S6: next_state = (in) ? S7 : S0;\n            S7: next_state = (in) ? S7 : S0;\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic based on current state\n    always_comb begin\n        // Default outputs\n        disc = 1'b0;\n        flag = 1'b0;\n        err  = 1'b0;\n\n        case (current_state)\n            S5: if (!in) disc = 1'b1; // 0111110 detected\n            S6: if (!in) flag = 1'b1; // 01111110 detected\n            S7: if (in) err = 1'b1;   // 01111111... detected\n            default: begin\n                disc = 1'b0;\n                flag = 1'b0;\n                err  = 1'b0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}