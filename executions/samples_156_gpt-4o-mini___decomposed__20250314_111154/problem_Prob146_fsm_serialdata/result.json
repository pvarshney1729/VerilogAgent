{
    "code": "module TopModule (\n    input logic clk,\n    input logic in,\n    input logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n    // State encoding\n    typedef enum logic [2:0] {\n        IDLE,\n        START,\n        DATA,\n        STOP\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] bit_count;\n    logic [7:0] data_byte;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            bit_count <= 0;\n            data_byte <= 8'b0;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            IDLE: begin\n                done = 1'b0;\n                if (in == 1'b0) // Start bit detected\n                    next_state = START;\n                else\n                    next_state = IDLE;\n            end\n            START: begin\n                next_state = DATA;\n                bit_count = 0;\n            end\n            DATA: begin\n                if (bit_count < 4'd8) begin\n                    data_byte[bit_count] = in; // Capture data bits\n                    bit_count = bit_count + 1;\n                    next_state = DATA;\n                end else begin\n                    next_state = STOP;\n                end\n            end\n            STOP: begin\n                done = 1'b1;\n                if (in == 1'b1) // Stop bit detected\n                    next_state = IDLE;\n                else\n                    next_state = STOP; // Wait for a valid stop bit\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    assign out_byte = data_byte; // Output the received byte\n\nendmodule",
    "test_results": {
        "num_mismatch": 144,
        "passfail": "R"
    }
}