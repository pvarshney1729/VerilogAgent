{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    output logic walk_left,\n    output logic walk_right\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        STATE_LEFT = 2'b00,\n        STATE_RIGHT = 2'b01\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (areset) begin\n            current_state <= STATE_LEFT;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            STATE_LEFT: begin\n                if (bump_right || bump_left) begin\n                    next_state = STATE_RIGHT;\n                end else begin\n                    next_state = STATE_LEFT;\n                end\n            end\n            \n            STATE_RIGHT: begin\n                if (bump_left || bump_right) begin\n                    next_state = STATE_LEFT;\n                end else begin\n                    next_state = STATE_RIGHT;\n                end\n            end\n            \n            default: next_state = STATE_LEFT;\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left = (current_state == STATE_LEFT);\n        walk_right = (current_state == STATE_RIGHT);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 127,
        "passfail": "R"
    }
}