{
    "code": "module TopModule (\n    input logic clk,\n    input logic load,\n    input logic [255:0] data,\n    output logic [255:0] q\n);\n    logic [255:0] grid, next_grid;\n    logic [3:0] neighbor_count;\n    integer i, j;\n\n    always @(posedge clk) begin\n        if (load) begin\n            grid <= data;\n        end else begin\n            grid <= next_grid;\n        end\n    end\n\n    always @(*) begin\n        for (i = 0; i < 16; i = i + 1) begin\n            for (j = 0; j < 16; j = j + 1) begin\n                neighbor_count = grid[((i-1+16)%16)*16 + ((j-1+16)%16)] +\n                                  grid[((i-1+16)%16)*16 + j] +\n                                  grid[((i-1+16)%16)*16 + ((j+1)%16)] +\n                                  grid[(i*16 + ((j-1+16)%16))] +\n                                  grid[(i*16 + ((j+1)%16))] +\n                                  grid[((i+1)%16)*16 + ((j-1+16)%16)] +\n                                  grid[((i+1)%16)*16 + j] +\n                                  grid[((i+1)%16)*16 + ((j+1)%16)];\n                                  \n                case (neighbor_count)\n                    4'd0, 4'd1, 4'd4: next_grid[i*16 + j] = 0;\n                    4'd2: next_grid[i*16 + j] = grid[i*16 + j];\n                    4'd3: next_grid[i*16 + j] = 1;\n                    default: next_grid[i*16 + j] = 0;\n                endcase\n            end\n        end\n    end\n\n    assign q = grid;\n\nendmodule\n\n// VERILOG-EVAL: response did not use [BEGIN]/[DONE] correctly",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}