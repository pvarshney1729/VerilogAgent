{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic [7:0] in,\n    output logic [23:0] out_bytes,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        BYTE_1 = 2'b01,\n        BYTE_2 = 2'b10,\n        BYTE_3 = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [1:0] byte_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            byte_count <= 0;\n            out_bytes <= 24'b0;\n            done <= 0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        done = 0;\n        \n        case (current_state)\n            IDLE: begin\n                if (in[3] == 1'b1) begin\n                    next_state = BYTE_1;\n                    byte_count = 1;\n                    out_bytes[23:16] = in;\n                end\n            end\n            \n            BYTE_1: begin\n                next_state = BYTE_2;\n                out_bytes[15:8] = in;\n                byte_count = byte_count + 1;\n            end\n            \n            BYTE_2: begin\n                next_state = BYTE_3;\n                out_bytes[7:0] = in;\n                byte_count = byte_count + 1;\n            end\n            \n            BYTE_3: begin\n                done = 1;\n                if (in[3] == 1'b1) begin\n                    next_state = BYTE_1;\n                    out_bytes[23:16] = in;\n                    byte_count = 1;\n                end else begin\n                    next_state = IDLE;\n                    byte_count = 0;\n                end\n            end\n            \n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 449,
        "passfail": "R"
    }
}