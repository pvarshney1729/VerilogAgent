{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n\n    input logic predict_valid,\n    input logic [6:0] predict_pc,\n    output logic predict_taken,\n    output logic [6:0] predict_history,\n\n    input logic train_valid,\n    input logic train_taken,\n    input logic train_mispredicted,\n    input logic [6:0] train_history,\n    input logic [6:0] train_pc\n);\n\n    logic [1:0] PHT [127:0]; // Pattern History Table\n    logic [6:0] global_history; // Global Branch History Register\n\n    logic [6:0] index;\n    logic [1:0] pht_entry;\n\n    assign index = (predict_pc ^ global_history) & 7'b0111111; // XOR for index\n    assign pht_entry = PHT[index];\n\n    always @(posedge clk) begin\n        if (areset) begin\n            global_history <= 7'b0;\n            // Reset PHT entries to weakly taken (01)\n            for (integer i = 0; i < 128; i = i + 1) begin\n                PHT[i] <= 2'b01; \n            end\n        end else begin\n            if (train_valid) begin\n                // Update PHT based on training\n                if (train_mispredicted) begin\n                    global_history <= train_history; // Recover to the state after misprediction\n                end else begin\n                    global_history <= train_history; // Update global history\n                end\n                \n                // Update PHT\n                case (PHT[train_pc ^ global_history])\n                    2'b00: PHT[train_pc ^ global_history] <= (train_taken) ? 2'b01 : 2'b00;\n                    2'b01: PHT[train_pc ^ global_history] <= (train_taken) ? 2'b10 : 2'b00;\n                    2'b10: PHT[train_pc ^ global_history] <= (train_taken) ? 2'b11 : 2'b01;\n                    2'b11: PHT[train_pc ^ global_history] <= (train_taken) ? 2'b11 : 2'b10;\n                endcase\n            end\n            \n            if (predict_valid) begin\n                // Output prediction and history\n                predict_taken <= (pht_entry[1] == 1'b1); // Predict taken if the state is strong or weakly taken\n                predict_history <= global_history; // Output current history\n                global_history <= {global_history[5:0], predict_taken}; // Update global history\n            end\n        end\n    end\nendmodule",
    "test_results": {
        "num_mismatch": 603,
        "passfail": "R"
    }
}