{
    "code": "module TopModule (\n    input logic clk,\n    input logic reset,\n    input logic s,\n    input logic w,\n    output logic z\n);\n\n    typedef enum logic [1:0] {A, B} state_t;\n    state_t current_state, next_state;\n    logic [2:0] w_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= A;\n            w_count <= 3'b000;\n            z <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == B) begin\n                w_count <= {w_count[1:0], w}; // Shift in the new w value\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            A: begin\n                if (s) begin\n                    next_state = B;\n                    w_count = 3'b000; // Reset the count when entering state B\n                end\n            end\n            B: begin\n                next_state = B; // Stay in state B for 3 cycles\n            end\n            default: next_state = A;\n        endcase\n    end\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            z <= 1'b0; // Reset output z\n        end else if (current_state == B) begin\n            // Check if w was 1 in exactly two of the last three clock cycles\n            if (w_count == 3'b011 || w_count == 3'b101 || w_count == 3'b110) begin\n                z <= 1'b1; // Set z to 1 if exactly two w's are 1\n            end else begin\n                z <= 1'b0; // Otherwise, set z to 0\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 502,
        "passfail": "R"
    }
}