Generated Response:

Based on your requirements and guidelines, here is the Verilog code for the `TopModule` that reverses the bit ordering of the input port.

[BEGIN]
```verilog
module TopModule (
    input logic [7:0] in,
    output logic [7:0] out
);

    always @(*) begin
        out[0] = in[7];
        out[1] = in[6];
        out[2] = in[5];
        out[3] = in[4];
        out[4] = in[3];
        out[5] = in[2];
        out[6] = in[1];
        out[7] = in[0];
    end

endmodule
```
[DONE]

### Reasoning:
1. **Module Declaration**: The module `TopModule` is declared with the specified input and output ports.
2. **Input/Output Definition**: The input `in` and output `out` are both defined as 8-bit logic vectors.
3. **Combinational Logic**: An `always @(*)` block is used to implement the bit-reversal logic. This block automatically reacts to changes in the input `in`.
4. **Bit Reversal Logic**: Each bit of the output `out` is assigned the corresponding reversed bit from the input `in`.
5. **Correct Syntax**: The code adheres to the provided coding conventions, ensuring clarity and correctness in the implementation.

Generated Code:

```verilog
module TopModule (
    input logic [7:0] in,
    output logic [7:0] out
);

    always @(*) begin
        out[0] = in[7];
        out[1] = in[6];
        out[2] = in[5];
        out[3] = in[4];
        out[4] = in[3];
        out[5] = in[2];
        out[6] = in[1];
        out[7] = in[0];
    end

endmodule
```