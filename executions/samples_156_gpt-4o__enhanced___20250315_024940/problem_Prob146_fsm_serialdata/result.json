{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic in,\n    input  logic reset,\n    output logic [7:0] out_byte,\n    output logic done\n);\n\n    typedef enum logic [2:0] {\n        IDLE,\n        START_BIT,\n        DATA_BITS,\n        STOP_BIT,\n        DONE\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] data_buffer;\n    logic [2:0] bit_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            data_buffer <= 8'b00000000;\n            bit_count <= 3'b000;\n            done <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == DATA_BITS) begin\n                data_buffer <= {in, data_buffer[7:1]}; // Shift in the data bits\n            end\n            if (next_state == DONE) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin // Start bit detected\n                    next_state = START_BIT;\n                end\n            end\n            START_BIT: begin\n                next_state = DATA_BITS;\n                bit_count = 3'b000; // Reset bit count\n            end\n            DATA_BITS: begin\n                if (bit_count == 3'b111) begin // 8 bits received\n                    next_state = STOP_BIT;\n                end else begin\n                    bit_count = bit_count + 3'b001; // Count the bits\n                end\n            end\n            STOP_BIT: begin\n                if (in == 1'b1) begin // Stop bit detected\n                    out_byte = data_buffer; // Output the received byte\n                    next_state = DONE;\n                end else begin\n                    next_state = IDLE; // Wait for a valid stop bit\n                end\n            end\n            DONE: begin\n                next_state = IDLE; // After done, return to IDLE\n            end\n        endcase\n    end\n\nendmodule\n\n// VERILOG-EVAL: response did not use [BEGIN]/[DONE] correctly",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}