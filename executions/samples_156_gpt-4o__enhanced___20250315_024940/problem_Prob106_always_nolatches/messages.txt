[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  scancode (16 bits)\n - output left\n - output down\n - output right\n - output up\n\nThe module should process scancodes from a PS/2 keyboard for a game.\nGiven the last two bytes of scancodes received, you need to indicate\nwhether one of the arrow keys on the keyboard have been pressed. This\ninvolves a fairly simple mapping, which can be implemented as a case\nstatement (or if-elseif) with four cases.\n\n  Scancode[15:0] | Arrow key\n  16'he06b       | left arrow\n  16'he072       | down arrow\n  16'he074       | right arrow\n  16'he075       | up arrow\n  Anything else  | none\n\nYour circuit has one 16-bit input, and four outputs. Build this circuit\nthat recognizes these four scancodes and asserts the correct output.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface Description:\n- Input Port:\n  - Name: scancode\n  - Width: 16 bits\n  - Signedness: Unsigned\n  - Bit Indexing: bit[0] refers to the least significant bit (LSB), bit[15] refers to the most significant bit (MSB).\n\n- Output Ports:\n  - Name: left\n    - Width: 1 bit\n    - Description: Asserts high (1) when the left arrow key is pressed, low (0) otherwise.\n  - Name: down\n    - Width: 1 bit\n    - Description: Asserts high (1) when the down arrow key is pressed, low (0) otherwise.\n  - Name: right\n    - Width: 1 bit\n    - Description: Asserts high (1) when the right arrow key is pressed, low (0) otherwise.\n  - Name: up\n    - Width: 1 bit\n    - Description: Asserts high (1) when the up arrow key is pressed, low (0) otherwise.\n\nFunctional Description:\nThe module shall process the 16-bit input scancode from a PS/2 keyboard to detect the state of the arrow keys. The detection mechanism will utilize a combinational logic approach, such as a case statement or an if-elseif structure, to map the given scancode values to the appropriate output signals.\n\nArrow Key Scancode Mapping:\n- When scancode == 16'hE06B, then left = 1, down = 0, right = 0, up = 0\n- When scancode == 16'hE072, then left = 0, down = 1, right = 0, up = 0\n- When scancode == 16'hE074, then left = 0, down = 0, right = 1, up = 0\n- When scancode == 16'hE075, then left = 0, down = 0, right = 0, up = 1\n- For any other value of scancode, then left = 0, down = 0, right = 0, up = 0\n\nBehavior at Edge Cases:\n- The module shall ensure that all outputs are low (0) when the scancode does not match any of the specified arrow key values.\n- The outputs must not be asserted high (1) for multiple keys simultaneously; they must be mutually exclusive.\n\nSignal Dependencies and Timing:\n- The output signals (left, down, right, up) are to be driven based solely on the current value of the scancode input. This is purely combinational logic with no memory elements, thus no clock cycles or sequential logic are involved.\n- The module does not utilize any resets, and initial output states are assumed to be low (0) until the corresponding scancode is detected.\n\nImplementation Note:\nThis specification requires careful attention to the mapping of scancode values to ensure that the correct output signals are asserted based on the received input.\n                    "
    }
]