[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  bump_left\n - input  bump_right\n - input  ground\n - input  dig\n - output walk_left\n - output walk_right\n - output aaah\n - output digging\n\nThe game Lemmings involves critters with fairly simple brains. So simple\nthat we are going to model it using a finite state machine. In the\nLemmings' 2D world, Lemmings can be in one of two states: walking left\n(walk_left is 1) or walking right (walk_right is 1). It will switch\ndirections if it hits an obstacle. In particular, if a Lemming is bumped\non the left (by receiving a 1 on bump_left), it will walk right. If it's\nbumped on the right (by receiving a 1 on bump_right), it will walk left.\nIf it's bumped on both sides at the same time, it will still switch\ndirections.\n\nIn addition to walking left and right and changing direction when bumped,\nwhen ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground\nreappears (ground=1), the Lemming will resume walking in the same\ndirection as before the fall. Being bumped while falling does not affect\nthe walking direction, and being bumped in the same cycle as ground\ndisappears (but not yet falling), or when the ground reappears while\nstill falling, also does not affect the walking direction.\n\nIn addition to walking and falling, Lemmings can sometimes be told to do\nuseful things, like dig (it starts digging when dig=1). A Lemming can dig\nif it is currently walking on ground (ground=1 and not falling), and will\ncontinue digging until it reaches the other side (ground=0). At that\npoint, since there is no ground, it will fall (aaah!), then continue\nwalking in its original direction once it hits ground again. As with\nfalling, being bumped while digging has no effect, and being told to dig\nwhen falling or when there is no ground is ignored. (In other words, a\nwalking Lemming can fall, dig, or switch directions. If more than one of\nthese conditions are satisfied, fall has higher precedence than dig,\nwhich has higher precedence than switching directions.)\n\nAlthough Lemmings can walk, fall, and dig, Lemmings aren't invulnerable.\nIf a Lemming falls for too long then hits the ground, it can splatter. In\nparticular, if a Lemming falls for more than 20 clock cycles then hits\nthe ground, it will splatter and cease walking, falling, or digging (all\n4 outputs become 0), forever (Or until the FSM gets reset). There is no\nupper limit on how far a Lemming can fall before hitting the ground.\nLemmings only splatter when hitting the ground; they do not splatter in\nmid-air.\n\nImplement a Moore state machine that models this behaviour. areset is\npositive edge triggered asynchronous reseting the Lemming machine to walk\nleft.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - input clk: Clock signal (1 bit, rising edge-triggered)\n  - input areset: Asynchronous active-high reset signal (1 bit)\n  - input bump_left: Signal indicating a bump from the left (1 bit)\n  - input bump_right: Signal indicating a bump from the right (1 bit)\n  - input ground: Ground presence signal (1 bit, where ground=0 indicates no ground)\n  - input dig: Signal indicating the request to dig (1 bit)\n\n- Output Ports:\n  - output walk_left: Signal indicating that the Lemming is walking left (1 bit)\n  - output walk_right: Signal indicating that the Lemming is walking right (1 bit)\n  - output aaah: Signal indicating that the Lemming is falling (1 bit)\n  - output digging: Signal indicating that the Lemming is digging (1 bit)\n\nSpecifications:\n1. States:\n   - The Lemming can be in one of the following states:\n     - Walking Left (walk_left = 1, walk_right = 0)\n     - Walking Right (walk_left = 0, walk_right = 1)\n     - Falling (aaah = 1)\n     - Digging (digging = 1)\n     - Splattered (all outputs = 0)\n\n2. State Transitions:\n   - The Lemming switches walking direction based on bump signals:\n     - If bump_left = 1, switch to walking right (walk_left = 0, walk_right = 1).\n     - If bump_right = 1, switch to walking left (walk_left = 1, walk_right = 0).\n     - If both bump_left and bump_right = 1, the direction will switch to the opposite of the current walking direction.\n\n3. Falling Logic:\n   - When ground = 0, the Lemming enters the falling state (aaah = 1).\n   - Upon returning to ground (ground = 1), the Lemming resumes walking in the last direction before falling.\n   - Being bumped while falling does not affect the walking direction.\n   - Transitioning to falling takes precedence over all other actions.\n\n4. Digging Logic:\n   - The Lemming can dig only if ground = 1 and it is not currently falling.\n   - Once digging starts (dig = 1), it continues until ground = 0, at which point the Lemming falls.\n   - Being bumped while digging does not affect the walking direction.\n   - Digging is ignored if the Lemming is falling or if there is no ground.\n\n5. Precedence of Actions:\n   - The precedence of actions is as follows: \n     1. Falling (ground = 0)\n     2. Digging (dig = 1)\n     3. Direction Change (bump_left = 1 or bump_right = 1)\n\n6. Splattering Condition:\n   - If the Lemming falls for more than 20 clock cycles and then hits the ground (ground = 1), it splatters.\n   - Upon splattering, all outputs (walk_left, walk_right, aaah, digging) are set to 0 and the Lemming will not resume any actions until areset is activated.\n   - The falling state duration must be tracked using a counter.\n\n7. Reset Condition:\n   - The areset signal is asynchronous and active high, resetting the state machine to the walking left state (walk_left = 1, walk_right = 0) immediately upon detection of a high signal.\n   - All registers must be initialized to their respective states upon reset.\n\n8. Clocking:\n   - All sequential logic elements within this module are triggered on the positive edge of the clk signal.\n\nEdge Cases:\n- Define behavior explicitly for situations where bump_left and bump_right are high simultaneously.\n- Address conditions where ground transitions occur during a state change (falling, digging, walking).\n                    "
    }
]