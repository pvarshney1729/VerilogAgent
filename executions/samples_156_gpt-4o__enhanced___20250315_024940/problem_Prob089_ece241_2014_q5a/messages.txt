[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  x\n - output z\n\nThe module should implement a one-input one-output serial 2's\ncomplementer Moore state machine. The input (x) is a series of bits (one\nper clock cycle) beginning with the least-significant bit of the number,\nand the output (Z) is the 2's complement of the input. The machine will\naccept input numbers of arbitrary length. The circuit requires a positive\nedge triggered asynchronous reset. The conversion begins when Reset is\nreleased and stops when Reset is asserted. Assume all sequential logic is\ntriggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input (clock signal, positive edge-triggered)\n  - areset: 1-bit input (asynchronous reset signal, active high)\n  - x: 1-bit input (serial input bit, least significant bit first)\n\n- Output Ports:\n  - z: 1-bit output (the least significant bit of the 2's complement of the input)\n\nFunctional Specification:\nThe TopModule implements a one-input one-output serial 2's complementer Moore state machine. The input (x) represents a series of bits received one per clock cycle, starting with the least significant bit (LSB) of the number. The output (z) provides the least significant bit of the 2's complement of the accumulated input values.\n\nBehavioral Description:\n1. **Reset Behavior**: \n   - The areset signal is an asynchronous reset. When areset is asserted (high), all internal registers are set to zero, and the output z is also set to zero.\n   - Upon release of the areset signal (transition from high to low), the state machine begins processing the input bits. \n\n2. **Clock Behavior**:\n   - The state machine processes the input bit (x) on the rising edge of clk when areset is not asserted.\n   - The conversion process continues until the areset signal is asserted again.\n\n3. **Input Handling**:\n   - The module will accept a variable-length binary number presented serially via the x input. The input is processed bit by bit, starting from the LSB.\n   - The 2's complement operation is defined as: \n     - Invert all bits of the number.\n     - Add one to the least significant bit (LSB) of the inverted number.\n\n4. **Output Behavior**:\n   - The output z reflects the least significant bit of the current state representing the 2's complement of the input value.\n\nEdge Cases:\n- If areset is asserted during the input processing, the state machine will immediately reset and clear the output.\n- If the input x remains constant at a binary value (e.g., all zeros), the output will correspondingly reflect the 2's complement of that input.\n\nSignal Dependencies:\n- The output z depends directly on the internal state of the state machine, which accumulates the input bits as they are received.\n- Ensure no race conditions can occur by using proper synchronization on the clk signal.\n\nInitial Conditions:\n- All internal registers and the output z are initialized to 0 upon assertion of areset.\n\nNote: All bit indexing follows the convention where bit[0] refers to the least significant bit (LSB) and bit[n-1] refers to the most significant bit (MSB) for a number of width n.\n                    "
    }
]