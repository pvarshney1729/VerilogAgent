[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  load\n - input  data (256 bits)\n - output q (256 bits)\n\nThe module should implemement a \"game\" played on a two-dimensional grid\nof cells, where each cell is either 1 (alive) or 0 (dead). At each time\nstep, each cell changes state depending on how many neighbours it has:\n\n  (1) 0-1 neighbour: Cell becomes 0.\n  (2) 2 neighbours: Cell state does not change.\n  (3) 3 neighbours: Cell becomes 1.\n  (4) 4+ neighbours: Cell becomes 0.\n\nThe game is formulated for an infinite grid. In this circuit, we will use\na 16x16 grid. To make things more interesting, we will use a 16x16\ntoroid, where the sides wrap around to the other side of the grid. For\nexample, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15),\n(0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by\na length 256 vector, where each row of 16 cells is represented by a\nsub-vector: q[15:0] is row 0, q[31:16] is row 1, etc.\n\n  (1) load: Loads data into q at the next clock edge, for loading initial\n       state. Active high synchronous.\n  (2) q: The 16x16 current state of the game, updated every clock cycle.\n\nThe game state should advance by one timestep every clock cycle. Assume\nall sequential logic is triggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input (clock signal)\n  - load: 1-bit input (active high synchronous load signal)\n  - data: 256 bits input (representing the initial state of the grid; bit[255] is the MSB and bit[0] is the LSB)\n  \n- Output Ports:\n  - q: 256 bits output (current state of the grid; bit[255] is the MSB and bit[0] is the LSB)\n\nGrid Representation:\n- The module simulates a two-dimensional 16x16 grid of cells, where each cell can be in one of two states: 1 (alive) or 0 (dead).\n- The grid is represented as a single vector `q` of 256 bits, structured as follows:\n  - q[15:0]: Row 0\n  - q[31:16]: Row 1\n  - ...\n  - q[255:240]: Row 15\n\nGame Rules:\n- Each cell's state changes based on the number of alive neighbors according to the following rules:\n  1. If a cell has 0 or 1 alive neighbors, it becomes 0 (dead).\n  2. If a cell has exactly 2 alive neighbors, it retains its current state.\n  3. If a cell has exactly 3 alive neighbors, it becomes 1 (alive).\n  4. If a cell has 4 or more alive neighbors, it becomes 0 (dead).\n  \nNeighbor Calculation:\n- The grid is treated as a toroidal structure, meaning edges wrap around. For example, the cell at (0,0) has neighbors at:\n  - (15,1), (15,0), (15,15), \n  - (0,1), (0,15), \n  - (1,1), (1,0), (1,15).\n\nClock Cycle and Load Behavior:\n- The game state advances one timestep on the positive edge of the clock. \n- When the `load` signal is high at the next clock edge, the initial state from `data` is loaded into `q`. This operation is synchronous.\n- The reset state of all registers is undefined; however, the grid will reflect the loaded state upon activation of the `load` signal.\n\nSequential Logic:\n- All sequential logic is triggered on the positive edge of the `clk`, ensuring consistent state updates for the grid based on the defined rules.\n\nEdge Cases:\n- The behavior of cells with no alive neighbors and cells on the edges of the grid must be handled according to the defined toroidal neighbor relationships. \n\nInitial Values:\n- All flip-flops, registers, and sequential elements should be initialized to a known state upon the first activation of the `load` signal.\n\nSignal Dependencies:\n- Ensure that the updates to the grid state in `q` depend solely on the current state of `q` and the external inputs during each clock cycle, avoiding any race conditions.\n\nBehavior at Input Boundaries:\n- The module is designed to handle valid `data` input at the full 256-bit width; behavior with invalid inputs is not specified and should be avoided.\n                    "
    }
]