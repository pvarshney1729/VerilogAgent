[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  slowena\n - output q (4 bits)\n\nThe module should implement a decade counter that counts from 0 through\n9, inclusive, with a period of 10. The reset input is active high\nsynchronous, and should reset the counter to 0. We want to be able to\npause the counter rather than always incrementing every clock cycle, so\nthe \"slowena\" input if high indicates when the counter should increment.\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input representing the clock signal (positive edge-triggered).\n  - reset: 1-bit input representing the synchronous reset signal (active high).\n  - slowena: 1-bit input indicating whether the counter should increment (active high).\n  \n- Output Ports:\n  - q: 4-bit output representing the current count of the decade counter. The bit indexing is defined as follows:\n    - q[3]: Most Significant Bit (MSB)\n    - q[2]:  \n    - q[1]:  \n    - q[0]: Least Significant Bit (LSB)\n\nFunctional Description:\nThe module implements a decade counter that counts from 0 to 9 (inclusive), with a cycle period of 10 clock cycles. The counter increments its value on the rising edge of the clk signal only when the slowena input is high. The counter should reset to 0 upon receiving a high signal on the reset input.\n\nBehavioral Details:\n- Reset Behavior:\n  - The reset is synchronous and active high. All internal registers (including the counter) should be set to 0 when reset is high during the clock cycle.\n  \n- Counter Behavior:\n  - On each positive edge of clk:\n    - If reset is high, set q to 0000 (4'b0000).\n    - If reset is low and slowena is high, increment the counter (q) by 1.\n    - If the counter reaches 10 (i.e., 4'b1010), it should roll over to 0 (i.e., 4'b0000).\n  \nSignal Dependencies:\n- The counter's next state depends on the current state of q and the state of the slowena signal.\n- Ensure there are no race conditions by only allowing the counter to be incremented when both reset is low and slowena is high.\n  \nEdge Cases:\n- If reset is activated while slowena is also high, the counter must immediately reset to 0 on the next clock edge.\n\nInitial Values:\n- The output q should be initialized to 0 (4'b0000) at power-up or upon reset.\n\nEnd of Specification.\n                    "
    }
]