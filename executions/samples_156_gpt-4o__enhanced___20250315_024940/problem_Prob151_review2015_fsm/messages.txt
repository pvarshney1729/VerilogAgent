[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  data\n - input  done_counting\n - input  ack\n - output shift_ena\n - output counting\n - output done\n\nThe module should implement a timer that:\n\n  (1) is started when a particular pattern (1101) is detected,\n  (2) shifts in 4 more bits to determine the duration to delay,\n  (3) waits for the counters to finish counting, and\n  (4) notifies the user and waits for the user to acknowledge the timer.\n\nIn this problem, implement just the finite-state machine that controls\nthe timer. The data path (counters and some comparators) are not included\nhere.\n\nThe serial data is available on the data input pin. When the pattern 1101\nis received, the state machine must then assert output shift_ena for\nexactly 4 clock cycles. After that, the state machine asserts its\ncounting output to indicate it is waiting for the counters, and waits\nuntil input done_counting is high.At that point, the state machine must\nassert done to notify the user the timer has timed out, and waits until\ninput ack is 1 before being reset to look for the next occurrence of the\nstart sequence (1101). The state machine should have a active high\nsynchronous reset, setting the state to where it begins searching for the\ninput sequence 1101. Assume all sequential logic is triggered on the\npositive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - input  clk           // Clock signal (1 bit, active on rising edge)\n  - input  reset         // Synchronous reset signal (1 bit, active high)\n  - input  data          // Serial data input (1 bit)\n  - input  done_counting  // Indicates that counting is complete (1 bit)\n  - input  ack           // Acknowledgment signal from user (1 bit)\n\n- Output Ports:\n  - output shift_ena     // Enable signal to start shifting in bits (1 bit)\n  - output counting       // Indicates that counting is in progress (1 bit)\n  - output done          // Notification signal when timer has timed out (1 bit)\n\nFunctional Description:\nThe TopModule implements a finite-state machine (FSM) that controls a timer with the following behavior:\n\n1. **Pattern Detection**: The FSM starts scanning for the specific bit pattern \"1101\" (binary) on the `data` input. \n   - The detection sequence will be considered valid when the last four bits received match \"1101\".\n\n2. **Shift Operation**: Upon detecting the pattern \"1101\", the FSM will assert the `shift_ena` output signal for exactly 4 clock cycles. \n   - During these cycles, the module will shift in 4 additional bits from the `data` input to determine the delay duration.\n\n3. **Counting State**: After shifting, the FSM will assert the `counting` output signal to indicate that it is waiting for the counting operation to complete. \n   - The FSM will remain in this state until the `done_counting` input signal goes high.\n\n4. **Completion Notification**: Once `done_counting` is asserted high, the FSM will then assert the `done` output signal to notify the user that the timer has timed out. \n   - The FSM will then wait for the `ack` input signal to be high before resetting and returning to the initial state to look for the next occurrence of the start sequence \"1101\".\n\nReset Behavior:\n- The FSM has an active high synchronous reset. Upon asserting `reset`, the FSM will clear its state and return to the initial state where it begins searching for the input sequence \"1101\". All output signals (`shift_ena`, `counting`, `done`) will be deasserted when reset.\n\nInitial State:\n- The FSM will start in the state waiting for the bit pattern \"1101\" upon power-up or after a reset.\n\nClocking:\n- All sequential logic is triggered on the positive edge of the `clk` signal.\n\nEdge Cases:\n- The FSM must handle cases where the `data` input does not contain the pattern \"1101\" and must ensure that outputs are correctly initialized and deasserted during transitions between states.\n\nSignal Dependencies:\n- The assertion of `shift_ena`, `counting`, and `done` outputs are dependent on the detection of the pattern and the completion of counting. The FSM should be designed to avoid race conditions between the detection of the pattern and the assertion of these outputs.\n                    "
    }
]