[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  d      (8 bits)\n - output q      (8 bits)\n\nThe module should include 8 D flip-flops with active high asynchronous\nreset. The output should be reset to 0. All DFFs should be triggered by\nthe positive edge of clk.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input signal representing the clock. The most significant bit (MSB) is bit[0].\n  - areset: 1-bit input signal for active high asynchronous reset. The MSB is bit[0].\n  - d: 8-bit input data signal (d[7:0]), where d[0] is the least significant bit (LSB) and d[7] is the MSB.\n\n- Output Ports:\n  - q: 8-bit output signal (q[7:0]), where q[0] is the LSB and q[7] is the MSB.\n\nFunctional Description:\n- The module will contain 8 D flip-flops (DFFs) with the following characteristics:\n  - Triggering: Each DFF will be triggered on the positive edge of the clk signal.\n  - Reset: Each DFF will have an active high asynchronous reset, meaning that when areset is high, each DFF will reset its output to 0 regardless of the clk signal.\n\nSequential Logic Details:\n- The reset state of all DFF outputs (q[7:0]) will be initialized to 0 when areset is high.\n- The output q will reflect the input d after the positive edge of clk when areset is low.\n\nEdge Cases and Input Boundaries:\n- Ensure that the module behaves correctly when:\n  - areset is asserted while clk is stable.\n  - clk transitions while areset is asserted.\n  - d changes while areset is asserted.\n\nSignal Dependencies:\n- The output q[7:0] depends on the input d[7:0] and the clk signal, with precedence given to areset during its active state.\n\nRace Conditions:\n- Ensure that the design avoids race conditions by maintaining clear timing relationships between areset, clk, and d inputs.\n\nInitial Values:\n- All DFF outputs (q[7:0]) should be explicitly defined to reset to 0 upon an active high areset signal.\n                    "
    }
]