[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  w\n - output z\n\nThe module should implement the state machine shown below:\n\n  A (0) --0--> B\n  A (0) --1--> A\n  B (0) --0--> C\n  B (0) --1--> D\n  C (0) --0--> E\n  C (0) --1--> D\n  D (0) --0--> F\n  D (0) --1--> A\n  E (1) --0--> E\n  E (1) --1--> D\n  F (1) --0--> C\n  F (1) --1--> D\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInput/Output Interface:\n- input clk: 1-bit clock signal (rising edge-triggered)\n- input reset: 1-bit asynchronous reset signal (active high)\n- input w: 1-bit input signal\n- output z: 1-bit output signal\n\nState Machine Specification:\nThe module implements a finite state machine (FSM) with the following states:\n- State A (encoded as 2'b00)\n- State B (encoded as 2'b01)\n- State C (encoded as 2'b10)\n- State D (encoded as 2'b11)\n- State E (encoded as 2'b100)\n- State F (encoded as 2'b101)\n\nState Transition Table:\n| Current State | Input w | Next State |\n|---------------|---------|------------|\n| A (00)       | 0       | B (01)     |\n| A (00)       | 1       | A (00)     |\n| B (01)       | 0       | C (10)     |\n| B (01)       | 1       | D (11)     |\n| C (10)       | 0       | E (100)    |\n| C (10)       | 1       | D (11)     |\n| D (11)       | 0       | F (101)    |\n| D (11)       | 1       | A (00)     |\n| E (100)      | 0       | E (100)    |\n| E (100)      | 1       | D (11)     |\n| F (101)      | 0       | C (10)     |\n| F (101)      | 1       | D (11)     |\n\nReset Behavior:\n- The reset signal is asynchronous and active high.\n- Upon activation of the reset signal, the FSM transitions to State A (00).\n\nInitial Conditions:\n- All state registers should be initialized to State A (00) upon reset.\n- The output z should be driven based on the current state as follows:\n  - z = 1 when in state E (100)\n  - z = 0 for all other states.\n\nClock Cycle Relationships:\n- All state transitions and output updates occur on the positive edge of the clk signal, contingent upon the reset not being asserted.\n\nEdge Case Handling:\n- Ensure that transitions from any state to State A (00) occur reliably when the reset is activated, regardless of the state or input signal w.\n- Input w should be sampled on the rising edge of clk.\n\nSignal Dependencies:\n- The next state logic is dependent on both the current state and the value of the input signal w.\n- Ensure that no race conditions occur in the state transition logic.\n                    "
    }
]