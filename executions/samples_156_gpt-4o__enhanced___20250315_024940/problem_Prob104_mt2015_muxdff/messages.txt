[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  L\n - input  q_in\n - input  r_in\n - output Q\n\nConsider this Verilog module \"full_module\":\n\n  module full_module (\n      input [2:0] r,\n      input L,\n      input clk,\n      output reg [2:0] q);\n\n    always @(posedge clk) begin\n      if (L) begin\n        q <= r;\n      end else begin\n        q <= {q[1] ^ q[2], q[0], q[2]};\n      end\n    end\n\n  endmodule\n\nNote that q[2:0] is three bits wide, representing three flip-flops that can be\nloaded from r when L is asserted. You want to factor full_module into a hierarchical\ndesign, flipflop and 2:1 multiplexer are in a submodule \"TopModule\", and that submodule\nwill be instantiated three times in full_module code. Create the submodule called \"TopModule\".\nYou do not have to provide the revised full_module.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input signal representing the clock (active on the rising edge).\n  - L: 1-bit input signal used to load data (active high).\n  - q_in: 1-bit input signal representing the data to be loaded into the flip-flop.\n  - r_in: 1-bit input signal representing the data to be loaded when L is asserted.\n\n- Output Ports:\n  - Q: 1-bit output signal representing the current state of the flip-flop.\n\nSignal Descriptions:\n- The input signals 'clk', 'L', 'q_in', and 'r_in' are all 1-bit wide and are considered unsigned.\n- The output signal 'Q' is a 1-bit wide and is also considered unsigned.\n\nClocking and Reset Behavior:\n- This module operates synchronously with respect to the 'clk' input signal.\n- There is no asynchronous reset specified; therefore, the behavior of 'Q' during the first clock cycle after power-up should be defined.\n- Initial state of 'Q' shall be defined as '0' (logic low) at power-up before the first rising edge of 'clk'.\n\nFunctional Description:\n- On the rising edge of 'clk':\n  - If 'L' is high, the output 'Q' shall be assigned the value of 'r_in'.\n  - If 'L' is low, 'Q' shall retain its current state or update based on the defined logic for the flip-flop (to be implemented in the hierarchy).\n\nEdge Cases:\n- The behavior of the module during the transition of 'L' from low to high or high to low should be clearly defined to avoid race conditions. Specifically, if 'L' transitions during a clock cycle, the module should prioritize the loading of 'r_in' in that cycle if 'L' is high.\n\nImplementation Notes:\n- The flip-flop and 2:1 multiplexer functionalities should be encapsulated in this module.\n- The hierarchical structure will allow for instantiation of the 'TopModule' three times in the full_module, where each instance will manage one bit of the output.\n\nBit Indexing:\n- The least significant bit (LSB) is indexed as bit[0], and the most significant bit (MSB) is indexed as bit[3] (if applicable).\n                    "
    }
]