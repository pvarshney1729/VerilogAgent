[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  resetn\n - input  in\n - output out\n\nThe module should implement a shift register with four D flops. Assume\nall sequential logic is triggered on the positive edge of the clock.\nReset is active-low synchronous resettable.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInput/Output Ports:\n- Input:\n  - clk: 1-bit input (active on the rising edge)\n  - resetn: 1-bit input (active-low synchronous reset)\n  - in: 1-bit input (data to be shifted into the register)\n  \n- Output:\n  - out: 1-bit output (the most significant bit of the shift register)\n\nPort Widths:\n- All input and output ports are defined as 1-bit wide.\n\nBit Indexing:\n- The bit indexing follows the convention where bit[0] refers to the least significant bit (LSB).\n\nFunctional Description:\nThe module implements a 4-bit shift register composed of four D flip-flops (DFFs). The DFFs are arranged in a series where the output of each DFF connects to the input of the next DFF, facilitating the shift operation. \n\nSequential Logic:\n- All sequential logic is triggered on the positive edge of the clk signal.\n- The behavior of the shift register during each clock cycle is as follows:\n  - On the rising edge of clk:\n    - If resetn is low (active), all flip-flops are reset to '0'.\n    - If resetn is high (inactive), each DFF captures the input signal from the previous stage:\n      - DFF0 (LSB) captures the input signal 'in'.\n      - DFF1 captures the output of DFF0.\n      - DFF2 captures the output of DFF1.\n      - DFF3 (MSB) captures the output of DFF2.\n\nReset Behavior:\n- The reset is synchronous and active-low. When resetn is low, all DFFs are reset to '0'.\n\nInitial Values:\n- Upon reset (resetn = 0), all DFFs (DFF0, DFF1, DFF2, DFF3) are initialized to '0'.\n\nOutput Behavior:\n- The output 'out' is assigned the value of DFF3 (the most significant bit of the shift register).\n\nEdge Cases:\n- Consider the behavior when the input signal 'in' is asserted immediately after reset; the output 'out' will remain '0' on the next clock cycle until the input is shifted into the register.\n\nSignal Dependencies:\n- Ensure the correct sequencing of signals to avoid race conditions, particularly during the reset condition and the capturing of inputs in the DFFs.\n                    "
    }
]