[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  w\n - output z\n\nThe module should implement the state machine shown below:\n\n  A (0) --1--> B\n  A (0) --0--> A\n  B (0) --1--> C\n  B (0) --0--> D\n  C (0) --1--> E\n  C (0) --0--> D\n  D (0) --1--> F\n  D (0) --0--> A\n  E (1) --1--> E\n  E (1) --0--> D\n  F (1) --1--> C\n  F (1) --0--> D\n\nReset resets into state A and is synchronous active-high. Assume all\nsequential logic is triggered on the positive edge of the clock.\n\nUse separate always blocks for the state table and the state flip-flops.\nDescribe the FSM output, which is called _z_, using either continuous\nassignment statement(s) or an always block (at your discretion). Assign\nany state codes that you wish to use.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input (clock signal, positive edge-triggered)\n  - reset: 1-bit input (synchronous active-high reset)\n  - w: 1-bit input (signal for state transitions)\n  \n- Output Ports:\n  - z: 1-bit output (output signal based on the current state)\n\nState Machine Description:\nThe module implements a finite state machine (FSM) with the following states and transitions:\n\nStates (encoded as 3-bit binary values):\n- A: 3'b000\n- B: 3'b001\n- C: 3'b010\n- D: 3'b011\n- E: 3'b100\n- F: 3'b101\n\nState Transitions:\n1. From state A (3'b000):\n   - If w = 1, transition to state B (3'b001)\n   - If w = 0, remain in state A (3'b000)\n\n2. From state B (3'b001):\n   - If w = 1, transition to state C (3'b010)\n   - If w = 0, transition to state D (3'b011)\n\n3. From state C (3'b010):\n   - If w = 1, transition to state E (3'b100)\n   - If w = 0, transition to state D (3'b011)\n\n4. From state D (3'b011):\n   - If w = 1, transition to state F (3'b101)\n   - If w = 0, transition to state A (3'b000)\n\n5. From state E (3'b100):\n   - If w = 1, remain in state E (3'b100)\n   - If w = 0, transition to state D (3'b011)\n\n6. From state F (3'b101):\n   - If w = 1, transition to state C (3'b010)\n   - If w = 0, transition to state D (3'b011)\n\nReset Condition:\n- The reset signal (reset) is synchronous and active-high. When reset is asserted, the FSM will transition to state A (3'b000).\n\nSequential Logic:\n- The FSM state transitions will occur on the positive edge of the clock (clk).\n- Each state will be stored in a flip-flop that maintains the current state of the FSM.\n\nOutput Signal Definition:\n- The output signal z (1-bit) will be determined based on the current state of the FSM as follows:\n  - z = 1 if the FSM is in state E (3'b100)\n  - z = 0 for all other states (A, B, C, D, F)\n\nImplementation Instructions:\n- Use separate always blocks for:\n  - State transition logic based on the input signal w and the current state.\n  - State flip-flop to update the current state on the clock's positive edge.\n- Use either continuous assignment statements or an always block to describe the output signal z based on the current state.\n\nEdge Cases and Boundaries:\n- Ensure to handle the transitions correctly based on the input signal w during all possible states.\n- The FSM should have well-defined behavior at the boundaries of state transitions.\n                    "
    }
]