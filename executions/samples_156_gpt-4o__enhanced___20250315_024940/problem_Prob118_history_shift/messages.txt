[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  predict_valid\n - input  predict_taken\n - input  train_mispredicted\n - input  train_taken\n - input  train_history   (32 bits)\n - output predict_history (32 bits)\n\nThe module should implement a 32-bit global history shift register,\nincluding support for rolling back state in response to a pipeline flush\ncaused by a branch misprediction. When a branch prediction is made\n(predict_valid = 1), shift in predict_taken from the LSB side to update\nthe branch history for the predicted branch. (predict_history[0] is the\ndirection of the youngest branch.) When a branch misprediction occurs\n(train_mispredicted = 1), load the branch history register with the\nhistory after the completion of the mispredicted branch. This is the\nhistory before the mispredicted branch (train_history) concatenated with\nthe actual result of the branch (train_taken). If both a prediction and\nmisprediction occur at the same time, the misprediction takes precedence,\nbecause the pipeline flush will also flush out the branch that is\ncurrently making a prediction. predict_history is the value of the branch\nhistory register. areset is a positive edge triggered asynchronous reset\nthat resets the history counter to zero. Assume all sequential logic is\ntriggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface Specification:\n- Input Ports:\n  - input clk: 1-bit clock signal (positive edge-triggered)\n  - input areset: 1-bit asynchronous reset signal (active high)\n  - input predict_valid: 1-bit signal indicating if the branch prediction is valid (active high)\n  - input predict_taken: 1-bit signal indicating the predicted branch direction (1 for taken, 0 for not taken)\n  - input train_mispredicted: 1-bit signal indicating if a branch misprediction has occurred (active high)\n  - input train_taken: 1-bit signal indicating the actual branch direction after misprediction (1 for taken, 0 for not taken)\n  - input [31:0] train_history: 32-bit signal representing the history prior to the mispredicted branch\n  \n- Output Ports:\n  - output [31:0] predict_history: 32-bit output representing the current state of the global history shift register\n\nFunctionality:\n1. The module implements a 32-bit global history shift register (predict_history), with the least significant bit (LSB) at index [0] representing the most recent branch direction.\n2. On the positive edge of clk:\n   - If areset is asserted (high), the entire predict_history register is asynchronously reset to 32'b0.\n   - If train_mispredicted is asserted (high), the predict_history register is updated to the concatenation of train_history (the history before the mispredicted branch) and train_taken (the actual result of the branch). \n   - If predict_valid is asserted (high), the predict_taken signal is shifted into the predict_history register from the LSB (predict_history[0] is updated with predict_taken), and all other bits are shifted right. \n   - In the event that both predict_valid and train_mispredicted are asserted simultaneously, the module prioritizes the update from train_mispredicted, effectively ignoring the predict_valid input for that clock cycle.\n\nSignal Dependencies:\n- The shift operation for predict_history is dependent on the clk edge and is conditioned on the status of areset and train_mispredicted.\n- The predict_history update occurs only if areset is not asserted.\n- The behavior of the module must account for the precedence of train_mispredicted over predict_valid.\n\nEdge Cases:\n- If both predict_valid and train_mispredicted are asserted at the same time, the predict_history register should reflect the state resulting from the train_mispredicted operation only.\n- Ensure that predict_history does not retain any prior state when areset is asserted.\n\nInitialization:\n- All flip-flops and registers within the module must be initialized to a known state (predict_history[31:0] = 32'b0) when areset is asserted.\n\nClock Cycle Relationships:\n- All sequential logic is triggered on the positive edge of the clk signal.\n                    "
    }
]