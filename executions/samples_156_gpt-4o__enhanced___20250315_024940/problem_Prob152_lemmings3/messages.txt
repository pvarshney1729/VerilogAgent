[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  bump_left\n - input  bump_right\n - input  ground\n - input  dig\n - output walk_left\n - output walk_right\n - output aaah\n - output digging\n\nThe game Lemmings involves critters with fairly simple brains. So simple\nthat we are going to model it using a finite state machine. In the\nLemmings' 2D world, Lemmings can be in one of two states: walking left\n(walk_left is 1) or walking right (walk_right is 1). It will switch\ndirections if it hits an obstacle. In particular, if a Lemming is bumped\non the left (by receiving a 1 on bump_left), it will walk right. If it's\nbumped on the right (by receiving a 1 on bump_right), it will walk left.\nIf it's bumped on both sides at the same time, it will still switch\ndirections.\n\nIn addition to walking left and right and changing direction when bumped,\nwhen ground=0, the Lemming will fall and say \"aaah!\". When the ground\nreappears (ground=1), the Lemming will resume walking in the same\ndirection as before the fall. Being bumped while falling does not affect\nthe walking direction, and being bumped in the same cycle as ground\ndisappears (but not yet falling), or when the ground reappears while\nstill falling, also does not affect the walking direction.\n\nIn addition to walking and falling, Lemmings can sometimes be told to do\nuseful things, like dig (it starts digging when dig=1). A Lemming can dig\nif it is currently walking on ground (ground=1 and not falling), and will\ncontinue digging until it reaches the other side (ground=0). At that\npoint, since there is no ground, it will fall (aaah!), then continue\nwalking in its original direction once it hits ground again. As with\nfalling, being bumped while digging has no effect, and being told to dig\nwhen falling or when there is no ground is ignored. (In other words, a\nwalking Lemming can fall, dig, or switch directions. If more than one of\nthese conditions are satisfied, fall has higher precedence than dig,\nwhich has higher precedence than switching directions.)\n\nImplement a Moore state machine that models this behaviour. areset is\npositive edge triggered asynchronous reseting the Lemming machine to walk\nleft. Assume all sequential logic is triggered on the positive edge of\nthe clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - input logic clk;               // Clock signal (1 bit)\n  - input logic areset;            // Asynchronous reset signal (1 bit)\n  - input logic bump_left;         // Bump signal from the left (1 bit)\n  - input logic bump_right;        // Bump signal from the right (1 bit)\n  - input logic ground;            // Ground signal (1 bit): 1 indicates ground, 0 indicates no ground\n  - input logic dig;               // Dig signal (1 bit): 1 indicates a request to dig\n\n- Output Ports:\n  - output logic walk_left;        // Indicates if the Lemming is walking left (1 bit)\n  - output logic walk_right;       // Indicates if the Lemming is walking right (1 bit)\n  - output logic aaah;             // Indicates if the Lemming is falling (1 bit)\n  - output logic digging;           // Indicates if the Lemming is digging (1 bit)\n\nState Definitions:\n- The Lemming can be in one of the following states:\n  - WALK_LEFT: The Lemming is walking left (walk_left = 1, walk_right = 0).\n  - WALK_RIGHT: The Lemming is walking right (walk_left = 0, walk_right = 1).\n- Transitions between states occur based on the following conditions:\n  - If bump_left = 1, the Lemming will transition to WALK_RIGHT.\n  - If bump_right = 1, the Lemming will transition to WALK_LEFT.\n  - If ground = 0, regardless of the state, the Lemming will fall (aaah = 1) and will not switch directions or dig.\n  - If ground transitions from 0 to 1, the Lemming will resume walking in the last direction it was moving prior to falling.\n\nDigging Conditions:\n- The Lemming can only dig if:\n  - ground = 1 (the Lemming is on solid ground).\n  - It will continue digging (digging = 1) until it reaches the point where ground = 0.\n  - If the Lemming is falling, the dig signal is ignored.\n  - If the Lemming is currently in the process of digging (digging = 1) and ground = 0, it will fall (aaah = 1).\n\nPrecedence of Actions:\n- The precedence of actions is as follows:\n  1. Falling (ground = 0) takes the highest precedence and will override all other actions.\n  2. Digging (dig = 1) takes the next highest precedence and will override direction changes.\n  3. Direction changes due to bump signals take the lowest precedence.\n\nReset Conditions:\n- The areset signal is a positive edge triggered asynchronous reset which, when asserted, resets the Lemming to the state WALK_LEFT (walk_left = 1, walk_right = 0, aaah = 0, digging = 0).\n- All sequential logic is triggered on the positive edge of the clk signal.\n\nEdge Cases and Input Boundaries:\n- If bump_left and bump_right are both asserted in the same clock cycle, the Lemming will switch directions according to the above precedence.\n- If dig is asserted while the Lemming is falling or on ground = 0, the dig signal will be ignored.\n- If ground = 0 is asserted while the Lemming is walking, the falling state will be activated immediately.\n\nImplementation Requirements:\n- The module must implement a Moore state machine to model the described behavior of the Lemmings.\n                    "
    }
]