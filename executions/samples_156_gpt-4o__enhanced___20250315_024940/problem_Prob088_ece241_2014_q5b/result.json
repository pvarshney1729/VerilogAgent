{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n    input logic x,\n    output logic z\n);\n    // State encoding\n    typedef enum logic [1:0] {\n        A = 2'b01, // State A\n        B = 2'b10  // State B\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Asynchronous reset to State A\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) \n            current_state <= A; // Reset to State A\n        else \n            current_state <= next_state; // Update to next state\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        // Default values\n        next_state = current_state;\n        z = 1'b0; // Default output value\n\n        case (current_state)\n            A: begin\n                if (x) begin\n                    next_state = B; // Transition to State B\n                    z = 1'b1;       // Output 1\n                end else begin\n                    z = 1'b0;       // Remain in State A, output 0\n                end\n            end\n            B: begin\n                if (x) begin\n                    z = 1'b0;       // Remain in State B, output 0\n                end else begin\n                    z = 1'b1;       // Remain in State B, output 1\n                end\n            end\n            default: begin\n                // Should never reach here, but safe to handle\n                next_state = A; // Default to State A\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}