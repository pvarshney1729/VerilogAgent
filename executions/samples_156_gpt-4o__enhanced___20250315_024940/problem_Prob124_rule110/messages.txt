[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  load\n - input  data (512 bits)\n - output q    (512 bits)\n\nThe module should implement Rule 110, a one-dimensional cellular\nautomaton with interesting properties (such as being Turing-complete).\nThere is a one-dimensional array of cells (on or off). At each time step,\nthe state of each cell changes. In Rule 110, the next state of each cell\ndepends only on itself and its two neighbours, according to the following\ntable:\n\n  Left[i+1] | Center[i] | Right[i-1] | Center's next state \n  1         | 1         | 1          | 0\n  1         | 1         | 0          | 1\n  1         | 0         | 1          | 1\n  1         | 0         | 0          | 0\n  0         | 1         | 1          | 1\n  0         | 1         | 0          | 1\n  0         | 0         | 1          | 1\n  0         | 0         | 0          | 0\n\nIn this circuit, create a 512-cell system (q[511:0]), and advance by one\ntime step each clock cycle. The synchronous active high load input\nindicates the state of the system should be loaded with data[511:0].\nAssume the boundaries (q[-1] and q[512], if they existed) are both zero\n(off). Assume all sequential logic is triggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- **Input Ports**:\n  - `input  clk;`                     // Clock signal, 1 bit, active on the rising edge\n  - `input  load;`                    // Load signal, 1 bit, active high\n  - `input  [511:0] data;`            // Input data, 512 bits, represents initial state of the cells\n\n- **Output Ports**:\n  - `output [511:0] q;`               // Output state of the cells, 512 bits\n\nCellular Automaton Specification:\n- The module implements Rule 110, a one-dimensional cellular automaton with 512 cells, indexed from `q[0]` (least significant bit) to `q[511]` (most significant bit). \n- Each cell's next state depends on its current state and the states of its immediate neighbors.\n- The boundary conditions are defined as follows:\n  - `q[-1]` and `q[512]` are treated as `0` (off).\n\nState Transition Logic:\n- The state transition for each cell `q[i]` (where `0 <= i <= 511`) is determined based on the following truth table:\n\n| Left[i+1] | Center[i] | Right[i-1] | Center's next state |\n|-----------|-----------|-------------|---------------------|\n|     1     |     1     |      1      |          0          |\n|     1     |     1     |      0      |          1          |\n|     1     |     0     |      1      |          1          |\n|     1     |     0     |      0      |          0          |\n|     0     |     1     |      1      |          1          |\n|     0     |     1     |      0      |          1          |\n|     0     |     0     |      1      |          1          |\n|     0     |     0     |      0      |          0          |\n\nOperational Behavior:\n- The output `q` is updated every clock cycle. \n- If `load` is high, the current state of `q` should be loaded with the values from `data[511:0]`.\n- If `load` is low, the output will update according to the Rule 110 state transition logic based on the current state of `q`.\n\nSequential Logic:\n- All sequential logic is triggered on the positive edge of `clk`.\n- The state of the register `q` should be initialized to `0` (all cells off) on reset or when `load` is high.\n\nReset Behavior:\n- A synchronous active high reset signal should be defined to initialize `q` to `0` if included in the final design.\n\nEdge Case Behavior:\n- The module should appropriately handle cases where `load` is asserted during normal operation, ensuring proper loading of new data without corruption of current state.\n\nSignal Dependencies:\n- Ensure that state updates only occur after the completion of the previous state evaluation to prevent race conditions.\n\nPlease ensure all conditions are adhered to for successful implementation of the Rule 110 cellular automaton within the specified constraints.\n                    "
    }
]