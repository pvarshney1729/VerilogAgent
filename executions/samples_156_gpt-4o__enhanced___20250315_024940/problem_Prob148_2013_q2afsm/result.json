{
    "code": "module TopModule (\n    input clk,\n    input resetn,\n    input [2:0] r,\n    output logic [2:0] g\n);\n\n    // State encoding\n    typedef enum logic [1:0] {\n        A = 2'b00,\n        B = 2'b01,\n        C = 2'b10,\n        D = 2'b11\n    } state_t;\n\n    // State variable\n    state_t current_state, next_state;\n\n    // Sequential logic for state transition\n    always @(posedge clk) begin\n        if (~resetn) begin\n            current_state <= A; // Reset to state A\n        end else begin\n            current_state <= next_state; // Transition to next state\n        end\n    end\n\n    // Combinational logic for next state generation\n    always @(*) begin\n        // Default to hold the current state\n        next_state = current_state;\n        case (current_state)\n            A: begin\n                if (r[0]) begin\n                    next_state = B; // Transition to B if r[0] is high\n                end else if (~r[0] && r[1]) begin\n                    next_state = C; // Transition to C if r[1] is high\n                end else if (~r[0] && ~r[1] && ~r[2]) begin\n                    next_state = D; // Transition to D if all are low\n                end\n            end\n            B: begin\n                if (~r[0]) begin\n                    next_state = A; // Transition back to A if r[0] is low\n                end // Stay in B if r[0] is high\n            end\n            C: begin\n                if (~r[1]) begin\n                    next_state = A; // Transition back to A if r[1] is low\n                end // Stay in C if r[1] is high\n            end\n            D: begin\n                if (~r[0] && ~r[1] && r[2]) begin\n                    next_state = D; // Stay in D if only r[2] is high\n                end else begin\n                    next_state = A; // Transition back to A if no requests\n                end\n            end\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        // Default outputs to 0\n        g = 3'b000;\n        case (current_state)\n            B: g[0] = 1; // Grant to device 0\n            C: g[1] = 1; // Grant to device 1\n            // No grants for state A or D\n        endcase\n    end\n\nendmodule\n\n// VERILOG-EVAL: response did not use [BEGIN]/[DONE] correctly",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}