[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  in    (8 bits)\n - output pedge (8 bits)\n\nThe module should examine each bit in an 8-bit vector and detect when the\ninput signal changes from 0 in one clock cycle to 1 the next (similar to\npositive edge detection). The output bit should be set the cycle after a\n0 to 1 transition occurs.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nI. Interface Description:\n1. Input Ports:\n   - clk: 1-bit input signal (clock)\n   - in: 8-bit input vector (bit[7:0], where bit[0] refers to the least significant bit, LSB)\n\n2. Output Ports:\n   - pedge: 8-bit output vector (bit[7:0], where bit[0] refers to the least significant bit, LSB)\n\nII. Functional Description:\nThe module shall perform the following operations:\n- It shall detect positive edges on each bit of the 8-bit input vector 'in'. A positive edge is defined as a transition from 0 to 1 between two consecutive clock cycles.\n- For each bit in 'in':\n  - The corresponding output bit in 'pedge' shall be set to 1 in the clock cycle immediately following the detection of a 0 to 1 transition.\n  - If no transition occurs, the output bit shall remain at its previous state (0 or 1).\n\nIII. Logic Type:\n- The module shall implement combinational logic to determine the output 'pedge' based on the previous state of the input 'in' and the current state of 'in'.\n\nIV. Clock Cycle Relationships:\n- The detection of transitions and output setting shall occur on the rising edge of the 'clk' signal.\n\nV. Reset Conditions:\n- No reset functionality is specified for this module. The output 'pedge' will retain its previous values until a transition is detected.\n\nVI. Initial Values:\n- The initial state of the output vector 'pedge' shall be defined as 8'b00000000 (all bits are 0) at the start of the simulation.\n\nVII. Signal Dependencies:\n- The output 'pedge' at clock cycle n+1 depends on the input 'in' at clock cycle n and the previous state of 'pedge' at clock cycle n.\n\nVIII. Edge Cases:\n- If 'in' remains constant (either all 0s or all 1s) for multiple clock cycles, 'pedge' should remain unchanged during those cycles.\n- The module should handle all transitions within the specified 8-bit width without overflow or underflow.\n\nIX. Implementation Notes:\n- Ensure that the logic correctly identifies transitions without race conditions or glitches during the clock cycles.\n                    "
    }
]