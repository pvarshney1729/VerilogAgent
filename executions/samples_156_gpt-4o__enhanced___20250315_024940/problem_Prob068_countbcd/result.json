{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    output logic [2:0] ena,\n    output logic [15:0] q\n);\n    // BCD counter registers\n    logic [3:0] ones, tens, hundreds, thousands;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            // Synchronous reset\n            ones <= 4'b0000;\n            tens <= 4'b0000;\n            hundreds <= 4'b0000;\n            thousands <= 4'b0000;\n        end else begin\n            // Increment ones digit\n            if (ones == 4'b1001) begin // If ones digit is 9\n                ones <= 4'b0000; // Reset ones\n                if (tens == 4'b1001) begin // If tens digit is 9\n                    tens <= 4'b0000; // Reset tens\n                    if (hundreds == 4'b1001) begin // If hundreds digit is 9\n                        hundreds <= 4'b0000; // Reset hundreds\n                        if (thousands == 4'b1001) begin // If thousands digit is 9\n                            thousands <= 4'b0000; // Reset thousands\n                        end else begin\n                            thousands <= thousands + 1; // Increment thousands\n                        end\n                    end else begin\n                        hundreds <= hundreds + 1; // Increment hundreds\n                    end\n                end else begin\n                    tens <= tens + 1; // Increment tens\n                end\n            end else begin\n                ones <= ones + 1; // Increment ones\n            end\n        end\n    end\n\n    // Assign outputs\n    assign q = {thousands, hundreds, tens, ones};\n    assign ena[0] = (ones == 4'b1001);      // Enable for tens\n    assign ena[1] = (tens == 4'b1001);      // Enable for hundreds\n    assign ena[2] = (hundreds == 4'b1001);  // Enable for thousands\n\nendmodule\n\n// VERILOG-EVAL: response did not use [BEGIN]/[DONE] correctly",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}