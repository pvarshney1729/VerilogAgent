[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output ena (3 bits)\n - output q   (16 bits)\n\nThe module should implement a 4-digit BCD (binary-coded decimal) counter.\nEach decimal digit is encoded using 4 bits: q[3:0] is the ones digit,\nq[7:4] is the tens digit, etc. For digits [3:1], also output an enable\nsignal indicating when each of the upper three digits should be\nincremented. Include a synchronous active-high reset. Assume all\nsequential logic is triggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: input, width = 1 bit, active on the rising edge (positive edge triggered)\n  - reset: input, width = 1 bit, active-high, asynchronous reset\n\n- Output Ports:\n  - ena: output, width = 3 bits\n    - ena[2]: enables the tens digit (q[7:4])\n    - ena[1]: enables the hundreds digit (q[11:8])\n    - ena[0]: enables the thousands digit (q[15:12])\n  - q: output, width = 16 bits\n    - q[3:0]: represents the ones digit (0-9)\n    - q[7:4]: represents the tens digit (0-9)\n    - q[11:8]: represents the hundreds digit (0-9)\n    - q[15:12]: represents the thousands digit (0-9)\n\nFunctionality:\n- The module implements a 4-digit BCD (binary-coded decimal) counter.\n- Each BCD digit is represented by 4 bits, with the least significant bit (LSB) at the rightmost position (e.g., q[0] is LSB).\n- The counter increments on the rising edge of the clk signal.\n- The enable signals (ena[2:0]) should be asserted (high) only when the corresponding digit is incremented.\n\nReset Behavior:\n- The reset signal is asynchronous and active-high.\n- When reset is asserted (high), all registers (q) should be set to 0 (q = 16'b0000_0000_0000_0000).\n\nSequential Logic:\n- All flip-flops and registers are triggered on the positive edge of clk.\n- Upon the assertion of reset, all sequential elements must initialize to 0 regardless of the current state.\n\nEdge Cases:\n- The counter should properly handle overflow conditions:\n  - When any digit reaches 10 (1010 in binary), it should reset to 0 and increment the next significant digit.\n  - The counter must not exceed a value greater than 9999 (i.e., q should wrap around to 0 after reaching 9999).\n\nDependencies and Timing:\n- Ensure that operations do not create race conditions by following a clear sequence of operations during the clock cycles.\n\nInput Boundaries:\n- The input clk and reset signals must adhere to the valid timing requirements for setup and hold times as per the synthesized hardware's specifications.\n\nDocumentation:\n- Provide a truth table for the BCD counting operation, indicating the state transitions for each digit on increment and reset conditions.\n                    "
    }
]