[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  load\n - input  ena\n - input  amount (2 bits)\n - input  data (64 bits)\n - output q (64 bits)\n\nThe module should implement a 64-bit arithmetic shift register, with\nsynchronous load. The shifter can shift both left and right, and by 1 or\n8 bit positions, selected by \"amount.\" Assume the right shit is an\narithmetic right shift.\n\nSignals are defined as below:\n\n  (1) load: Loads shift register with data[63:0] instead of shifting.\n       Active high.\n  (2) ena: Chooses whether to shift. Active high.\n  (3) amount: Chooses which direction and how much to shift.\n      (a) 2'b00: shift left by 1 bit.\n      (b) 2'b01: shift left by 8 bits.\n      (c) 2'b10: shift right by 1 bit.\n      (d) 2'b11: shift right by 8 bits.\n  (4) q: The contents of the shifter.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input (Clock signal)\n  - load: 1-bit input (Load signal, active high)\n  - ena: 1-bit input (Enable signal for shifting, active high)\n  - amount: 2-bit input (Shift amount and direction)\n    - bit[1:0] indexing: \n      - bit[0]: Least Significant Bit (LSB)\n      - bit[1]: Most Significant Bit (MSB)\n  - data: 64-bit input (Data input for loading the shift register)\n    - bit[63:0] indexing:\n      - bit[0]: LSB\n      - bit[63]: MSB\n- Output Ports:\n  - q: 64-bit output (Contents of the shift register)\n    - bit[63:0] indexing:\n      - bit[0]: LSB\n      - bit[63]: MSB\n\nFunctionality:\n- The module implements a 64-bit arithmetic shift register with synchronous load capabilities.\n- The shift register supports shifting in both left and right directions and can shift by either 1 bit or 8 bits based on the \"amount\" input.\n\nSignal Definitions:\n1. load: When high, the shift register is loaded with data[63:0] instead of performing a shift operation.\n2. ena: When high, the module performs the shift operation if not loading.\n3. amount: Determines the shift direction and magnitude:\n   - 2'b00: Shift left by 1 bit.\n   - 2'b01: Shift left by 8 bits.\n   - 2'b10: Shift right by 1 bit (arithmetic right shift).\n   - 2'b11: Shift right by 8 bits (arithmetic right shift).\n4. q: Outputs the current value of the shift register after the shift or load operation.\n\nSequential Logic:\n- The shift register operates on the rising edge of clk.\n- The load operation takes precedence over shifting. If load is high during the clock edge, the register loads data, ignoring the ena signal for that cycle.\n- If load is low and ena is high, the shift operation is performed according to the amount input.\n\nReset Behavior:\n- The shift register should be initialized to a known state (e.g., all bits zero) upon reset. Reset behavior is assumed to be synchronous and will reset the register state on the next clock cycle.\n\nInitial Values:\n- All flip-flops and registers should have an initial value of 64'b0.\n\nEdge Cases:\n- Ensure that the behavior of the shift register is defined for all possible values of the amount input, including transitions between shift directions and magnitudes.\n- Special attention should be given to the arithmetic nature of right shifts to ensure that sign extension occurs correctly.\n\nDependencies and Race Conditions:\n- Clearly define the precedence of operations: load > shift.\n- Ensure that simultaneous changes to load and ena in the same clock cycle are handled correctly to avoid indeterminate states.\n\nMathematical Description:\n- The output q[n] after a shift operation can be defined as follows:\n  - For left shifts: q[n] = data[n - amount] for n = 0 to 62 (shift left)\n  - For right shifts (arithmetic): \n    - q[63] = q[63] (sign bit remains unchanged)\n    - q[n] = data[n + amount] for n = 0 to 61 (shift right)\n\nBehavior at Input Boundaries:\n- Clearly specify behavior when the load signal is asserted while ena is also asserted, and ensure that only one operation occurs at a time.\n                    "
    }
]