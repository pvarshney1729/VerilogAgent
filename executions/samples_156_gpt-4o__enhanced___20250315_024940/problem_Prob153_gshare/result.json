{
    "code": "module TopModule (\n    input logic clk,\n    input logic areset,\n\n    input logic predict_valid,\n    input logic [6:0] predict_pc,\n    output logic predict_taken,\n    output logic [6:0] predict_history,\n\n    input logic train_valid,\n    input logic train_taken,\n    input logic train_mispredicted,\n    input logic [6:0] train_history,\n    input logic [6:0] train_pc\n);\n\n    // Parameters\n    localparam PHT_SIZE = 128;\n    localparam PHT_WIDTH = 2;\n    \n    // State Variables\n    logic [6:0] global_history; // Global Branch History Register\n    logic [PHT_SIZE-1:0][PHT_WIDTH-1:0] PHT; // Pattern History Table (PHT)\n\n    // Index calculation for PHT\n    logic [6:0] index;\n    assign index = (predict_pc ^ global_history) % PHT_SIZE;\n\n    // Prediction output\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            global_history <= 7'b0; // Reset global history\n            // Initialize PHT entries to 00\n            for (int i = 0; i < PHT_SIZE; i++) begin\n                PHT[i] <= 2'b00; // Initialize counter to 00\n            end\n        end else begin\n            // Handle prediction\n            if (predict_valid) begin\n                predict_taken <= (PHT[index] >= 2'b10); // Taken if counter is 10 or 11\n                predict_history <= global_history; // Output current global history\n                // Update global history based on prediction\n                global_history <= {global_history[5:0], predict_taken};\n            end\n            \n            // Handle training\n            if (train_valid) begin\n                // Update PHT\n                if (train_taken && PHT[index] < 2'b11) begin\n                    PHT[index] <= PHT[index] + 1; // Increment if taken\n                end else if (!train_taken && PHT[index] > 2'b00) begin\n                    PHT[index] <= PHT[index] - 1; // Decrement if not taken\n                end\n                \n                // Handle misprediction\n                if (train_mispredicted) begin\n                    global_history <= train_history; // Restore history to the given state\n                end else begin\n                    global_history <= {global_history[5:0], train_taken}; // Update history\n                end\n            end\n        end\n    end\n\nendmodule\n\n// VERILOG-EVAL: response did not use [BEGIN]/[DONE] correctly",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}