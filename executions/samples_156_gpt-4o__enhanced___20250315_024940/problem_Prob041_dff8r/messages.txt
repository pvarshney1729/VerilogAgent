[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  d (8 bits)\n - output q (8 bits)\n\nThe module should include 8 D flip-flops with active high synchronous\nreset setting the output to zero. All DFFs should be triggered by the\npositive edge of clk.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface Specification:\n- Input Ports:\n  - clk: 1-bit input (clock signal, positive edge-triggered)\n  - reset: 1-bit input (active high synchronous reset)\n  - d: 8-bit input (data input, bit[0] refers to the least significant bit (LSB), bit[7] refers to the most significant bit (MSB))\n\n- Output Ports:\n  - q: 8-bit output (data output, bit[0] refers to the LSB, bit[7] refers to the MSB)\n\nFunctional Description:\n- The module consists of 8 D flip-flops (DFFs) arranged in a parallel configuration.\n- Each DFF has an active high synchronous reset. When the reset signal is asserted (high) during a clock cycle, the output of all DFFs (q) is set to zero (i.e., q <= 8'b00000000).\n- On the positive edge of the clk signal, if reset is not asserted, each DFF captures the corresponding bit from the input data signal d. Specifically:\n  - q[0] will capture d[0]\n  - q[1] will capture d[1]\n  - q[2] will capture d[2]\n  - q[3] will capture d[3]\n  - q[4] will capture d[4]\n  - q[5] will capture d[5]\n  - q[6] will capture d[6]\n  - q[7] will capture d[7]\n\nSequential Logic:\n- The behavior of the DFFs is synchronous, triggered on the rising edge of the clk signal.\n- All flip-flops will maintain their state unless reset or clocked to capture new data.\n\nInitial Conditions:\n- Upon reset, all outputs (q[0] to q[7]) are initialized to zero (8'b00000000).\n\nEdge Cases:\n- If the reset signal is asserted during the clock cycle, the outputs will immediately transition to zero on the next clock edge.\n- If the reset signal is deasserted and the clk signal goes high, the DFFs will update with the current values from the input d.\n\nSignal Dependencies:\n- The output states q are directly dependent on the clk and d inputs, with the reset input taking precedence during the reset condition.\n                    "
    }
]