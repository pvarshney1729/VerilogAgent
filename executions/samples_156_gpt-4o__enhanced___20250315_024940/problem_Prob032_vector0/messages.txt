[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  vec  (3 bits)\n - output outv (3 bits)\n - output o2\n - output o1\n - output o0\n\nThe module has one 3-bit input, then outputs the same vector, and also\nsplits it into three separate 1-bit outputs. Connect output o0 to the\ninput vector's position 0, o1 to position 1, etc.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - vec: bit[2:0] (3 bits, unsigned)\n    - Description: A 3-bit vector input where bit[0] is the least significant bit (LSB) and bit[2] is the most significant bit (MSB).\n  \n- Output Ports:\n  - outv: bit[2:0] (3 bits, unsigned)\n    - Description: A 3-bit output that directly reflects the input vector 'vec'. \n  - o0: bit (1 bit, unsigned)\n    - Description: Outputs the value of vec[0], corresponding to the LSB of the input vector.\n  - o1: bit (1 bit, unsigned)\n    - Description: Outputs the value of vec[1], corresponding to the second bit of the input vector.\n  - o2: bit (1 bit, unsigned)\n    - Description: Outputs the value of vec[2], corresponding to the MSB of the input vector.\n\nLogic Description:\n- The module implements a combinational logic circuit with no sequential elements. \n- The outputs are determined directly from the input 'vec' as follows:\n  - o0 = vec[0]\n  - o1 = vec[1]\n  - o2 = vec[2]\n  - outv = vec\n\nReset Behavior:\n- There are no reset signals defined in this module.\n\nEdge Cases:\n- The module should handle all possible values of 'vec' (000 to 111) without any undefined behavior.\n\nSignal Dependencies:\n- The outputs 'o0', 'o1', 'o2', and 'outv' are dependent solely on the 'vec' input with no additional conditions or operations.\n\nImplementation Notes:\n- Ensure that the output assignments are made in a manner that reflects the input vector with correct mapping to individual output signals.\n                    "
    }
]