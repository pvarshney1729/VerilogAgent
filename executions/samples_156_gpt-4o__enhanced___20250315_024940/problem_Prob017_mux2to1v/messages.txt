[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  a   (100 bits)\n - input  b   (100 bits)\n - input  sel\n - output out (100 bits)\n\nThe module should implement a 2-1 multiplexer. When sel=0, choose a. When\nsel=1, choose b.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nDescription: This module implements a 2-to-1 multiplexer that selects between two 100-bit input signals based on a control signal.\n\nInterface:\n- Inputs:\n  - input [99:0] a: 100-bit wide input signal 'a', where bit[0] refers to the least significant bit (LSB) and bit[99] refers to the most significant bit (MSB).\n  - input [99:0] b: 100-bit wide input signal 'b', where bit[0] refers to the least significant bit (LSB) and bit[99] refers to the most significant bit (MSB).\n  - input sel: 1-bit control signal for selection. When sel = 0, output 'out' will reflect input 'a'. When sel = 1, output 'out' will reflect input 'b'.\n\n- Outputs:\n  - output [99:0] out: 100-bit wide output signal. The output will be determined by the value of the sel signal as described above.\n\nFunctionality:\n- The module operates as a combinational logic circuit. The output 'out' is updated immediately based on the values of inputs 'a', 'b', and 'sel'.\n- The output selection is defined as follows:\n  - If sel = 0, then out = a\n  - If sel = 1, then out = b\n\nBehavioral Constraints:\n- The module should handle all valid values of inputs 'a' and 'b', ensuring that both inputs are valid 100-bit values.\n- The module does not require initialization values for the output since it is combinational logic; however, it must ensure that the output is stable and valid based on the current values of 'a', 'b', and 'sel'.\n\nEdge Cases:\n- The module should be tested for the boundary conditions where 'sel' transitions between 0 and 1, ensuring no glitches occur in the output during the selection process.\n                    "
    }
]