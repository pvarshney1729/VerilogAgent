[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (32 bits)\n\nA linear feedback shift register is a shift register usually with a few\nXOR gates to produce the next state of the shift register. A Galois LFSR\nis one particular arrangement that shifts right, where a bit position with\na \"tap\" is XORed with the LSB output bit (q[0]) to produce its next value,\nwhile bit positions without a tap shift right unchanged. \n\nThe module should implement a 32-bit Galois LFSR with taps at bit\npositions 32, 22, 2, and 1. Reset should be active high synchronous, and\nshould reset the output q to 32'h1. Assume all sequential logic is\ntriggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input (active high), used for clock signal.\n  - reset: 1-bit input (active high), used for synchronous reset.\n\n- Output Ports:\n  - q: 32-bit output (unsigned), represents the current state of the Galois LFSR.\n\nDescription:\nThe module implements a 32-bit Galois Linear Feedback Shift Register (LFSR). The LFSR shifts its contents to the right, with specific tap positions that influence the next state of the register. The tap positions for this LFSR are defined as follows:\n- Tap positions are at bit indices 31, 21, 1, and 0 (with bit[0] being the least significant bit and bit[31] being the most significant bit).\n\nReset Behavior:\n- The reset signal is active high and synchronous. When the reset signal is asserted (reset = 1), the output q will be set to the value 32'h00000001.\n- All registers in the LFSR are initialized to this reset value when the reset signal is activated.\n\nClock Behavior:\n- All sequential logic within the module is triggered on the positive edge of the clock (clk), ensuring that all updates to the state of q occur synchronously with the clock signal.\n\nOperational Behavior:\n- On each positive edge of clk, if reset is not asserted, the LFSR will perform the following operations:\n  - Shift the current value of q to the right by one bit.\n  - The new least significant bit (q[0]) will be determined by XORing the bits at the specified tap positions (31, 21, 1) with the current least significant bit (q[0]).\n- The feedback logic is critical for the operation of the LFSR and must be implemented correctly to ensure proper functionality.\n\nEdge Cases:\n- When the LFSR is reset, it immediately sets q to 32'h00000001, regardless of its previous state.\n- The output q must always be a valid 32-bit value, either representing the reset state or the shifted state of the LFSR.\n\nSignal Dependencies:\n- The output q depends on its previous state and the specified tap positions. Ensure that the XOR operations and shifts are handled correctly to avoid race conditions during clock edges.\n                    "
    }
]