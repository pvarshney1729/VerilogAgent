[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  x\n - output z\n\nThe module should implement a finite-state machine with the\nstate-assigned table shown below. Reset should synchronous active high\nreset the FSM to state 000. Assume all sequential logic is triggered on\nthe positive edge of the clock.\n\n  Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1 | Output z\n  000 | 000, 001 | 0\n  001 | 001, 100 | 0\n  010 | 010, 001 | 0\n  011 | 001, 010 | 1\n  100 | 011, 100 | 1\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input (rising edge-triggered clock signal)\n  - reset: 1-bit input (synchronous active-high reset signal)\n  - x: 1-bit input (data signal)\n\n- Output Ports:\n  - z: 1-bit output (output signal)\n\nState Encoding:\n- The finite-state machine (FSM) uses a 3-bit state representation, denoted as y[2:0]. \n- The most significant bit (MSB) is y[2] and the least significant bit (LSB) is y[0].\n\nReset Condition:\n- The FSM will reset synchronously on the rising edge of clk when reset is high (1). \n- Upon reset, the FSM will transition to the state y = 3'b000.\n\nState Transition Table:\nPresent State y[2:0] | Next State (x=0) y[2:0] | Next State (x=1) y[2:0] | Output z\n-----------------------|---------------------------|---------------------------|---------\n000                    | 000                       | 001                       | 0\n001                    | 001                       | 100                       | 0\n010                    | 010                       | 001                       | 0\n011                    | 001                       | 010                       | 1\n100                    | 011                       | 100                       | 1\n\nBehavior Specifications:\n- The FSM operates based on the input signal x. The transitions between states and the output z are determined by the current state y and the value of x at the positive edge of clk.\n- Ensure that all state transitions and outputs are correctly implemented according to the state transition table provided above.\n- The output z should reflect the correct value based on the current state and the input x as specified.\n\nEdge Cases:\n- Proper handling of the reset condition should be ensured, with the FSM returning to state 000 regardless of the current state or input.\n- The behavior of the FSM should be well-defined for all values of x (0 and 1) from each state, and no undefined states should exist.\n\nInitialization:\n- The FSM's state should be initialized to 3'b000 during the synchronous reset condition.\n- Ensure that all registers used to hold the current state y[2:0] have a clearly defined initial state upon reset.\n                    "
    }
]