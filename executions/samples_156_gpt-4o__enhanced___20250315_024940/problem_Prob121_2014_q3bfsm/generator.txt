Generated Response:

Here is the Verilog code for the `TopModule` based on the provided specifications and guidelines:

```verilog
[BEGIN]
module TopModule (
    input  logic clk,
    input  logic reset,
    input  logic x,
    output logic z
);

    // State declaration
    logic [2:0] y; // Current state

    // Next state and output logic
    always @(*) begin
        case (y)
            3'b000: begin
                if (x) begin
                    z = 0;
                    y_next = 3'b001;
                end else begin
                    z = 0;
                    y_next = 3'b000;
                end
            end
            
            3'b001: begin
                if (x) begin
                    z = 0;
                    y_next = 3'b100;
                end else begin
                    z = 0;
                    y_next = 3'b001;
                end
            end
            
            3'b010: begin
                if (x) begin
                    z = 0;
                    y_next = 3'b001;
                end else begin
                    z = 0;
                    y_next = 3'b010;
                end
            end
            
            3'b011: begin
                z = 1;
                if (x) begin
                    y_next = 3'b010;
                end else begin
                    y_next = 3'b001;
                end
            end
            
            3'b100: begin
                z = 1;
                if (x) begin
                    y_next = 3'b100;
                end else begin
                    y_next = 3'b011;
                end
            end
            
            default: begin
                z = 0;
                y_next = 3'b000; // Safe default
            end
        endcase
    end

    // Sequential logic for state transition
    always @(posedge clk) begin
        if (reset) begin
            y <= 3'b000; // Synchronous reset
        end else begin
            y <= y_next; // Update state
        end
    end

endmodule
[DONE]
```

### Explanation:

1. **State Declaration**: A 3-bit register `y` is used to represent the current state of the FSM.

2. **Next State Logic**: An `always @(*)` block calculates the next state (`y_next`) and the output (`z`) based on the current state and the input `x`. The case statement is used to define the transitions and outputs according to the provided state transition table.

3. **Sequential Logic**: A second `always @(posedge clk)` block handles the synchronous reset and state transition. If `reset` is high, the FSM resets to state `000`. Otherwise, it updates the state to `y_next` on the positive edge of the clock.

4. **Output Logic**: The output `z` is determined within the same block that calculates the next state, ensuring it reflects the appropriate value based on the current state and input.

This implementation adheres to the guidelines provided, ensuring correct syntax and behavior for the finite-state machine.

Generated Code:

module TopModule (
    input  logic clk,
    input  logic reset,
    input  logic x,
    output logic z
);

    // State declaration
    logic [2:0] y; // Current state

    // Next state and output logic
    always @(*) begin
        case (y)
            3'b000: begin
                if (x) begin
                    z = 0;
                    y_next = 3'b001;
                end else begin
                    z = 0;
                    y_next = 3'b000;
                end
            end
            
            3'b001: begin
                if (x) begin
                    z = 0;
                    y_next = 3'b100;
                end else begin
                    z = 0;
                    y_next = 3'b001;
                end
            end
            
            3'b010: begin
                if (x) begin
                    z = 0;
                    y_next = 3'b001;
                end else begin
                    z = 0;
                    y_next = 3'b010;
                end
            end
            
            3'b011: begin
                z = 1;
                if (x) begin
                    y_next = 3'b010;
                end else begin
                    y_next = 3'b001;
                end
            end
            
            3'b100: begin
                z = 1;
                if (x) begin
                    y_next = 3'b100;
                end else begin
                    y_next = 3'b011;
                end
            end
            
            default: begin
                z = 0;
                y_next = 3'b000; // Safe default
            end
        endcase
    end

    // Sequential logic for state transition
    always @(posedge clk) begin
        if (reset) begin
            y <= 3'b000; // Synchronous reset
        end else begin
            y <= y_next; // Update state
        end
    end

endmodule