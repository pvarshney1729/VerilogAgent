{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic x,\n    output logic z\n);\n\n    // State declaration\n    logic [2:0] y; // Current state\n\n    // Next state and output logic\n    always @(*) begin\n        case (y)\n            3'b000: begin\n                if (x) begin\n                    z = 0;\n                    y_next = 3'b001;\n                end else begin\n                    z = 0;\n                    y_next = 3'b000;\n                end\n            end\n            \n            3'b001: begin\n                if (x) begin\n                    z = 0;\n                    y_next = 3'b100;\n                end else begin\n                    z = 0;\n                    y_next = 3'b001;\n                end\n            end\n            \n            3'b010: begin\n                if (x) begin\n                    z = 0;\n                    y_next = 3'b001;\n                end else begin\n                    z = 0;\n                    y_next = 3'b010;\n                end\n            end\n            \n            3'b011: begin\n                z = 1;\n                if (x) begin\n                    y_next = 3'b010;\n                end else begin\n                    y_next = 3'b001;\n                end\n            end\n            \n            3'b100: begin\n                z = 1;\n                if (x) begin\n                    y_next = 3'b100;\n                end else begin\n                    y_next = 3'b011;\n                end\n            end\n            \n            default: begin\n                z = 0;\n                y_next = 3'b000; // Safe default\n            end\n        endcase\n    end\n\n    // Sequential logic for state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            y <= 3'b000; // Synchronous reset\n        end else begin\n            y <= y_next; // Update state\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    }
}