[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  a   (8 bits)\n - input  b   (8 bits)\n - input  c   (8 bits)\n - input  d   (8 bits)\n - output min (8 bits)\n\nThe module should find the minimum of the four input values. Unsigned\nnumbers can be compared with standard comparison operators (a < b).\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - input [7:0] a;  // 8-bit unsigned input representing the first value\n  - input [7:0] b;  // 8-bit unsigned input representing the second value\n  - input [7:0] c;  // 8-bit unsigned input representing the third value\n  - input [7:0] d;  // 8-bit unsigned input representing the fourth value\n\n- Output Ports:\n  - output [7:0] min;  // 8-bit unsigned output representing the minimum value among inputs a, b, c, and d\n\nFunctional Specification:\n- The TopModule shall compute the minimum value among the four 8-bit unsigned input values (a, b, c, d) and provide this minimum value as an output on the min port.\n- The comparison of values shall be performed using standard unsigned comparison operators (e.g., a < b).\n- The output min shall reflect the minimum value of the inputs at the end of each combinational evaluation cycle.\n\nBehavioral Specifications:\n- The module shall handle edge cases where all input values are equal by outputting any of the input values as the minimum.\n- The module shall also consider cases when the input values are at their maximum (255) or minimum (0) to ensure correct functionality.\n\nImplementation Details:\n- The module shall be implemented using combinational logic to ensure that the output min is updated continuously based on the current values of inputs a, b, c, and d without any clocking elements or delays.\n                    "
    }
]