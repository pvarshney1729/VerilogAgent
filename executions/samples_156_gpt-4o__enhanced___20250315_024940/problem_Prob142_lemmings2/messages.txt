[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  bump_left\n - input  bump_right\n - input  ground\n - output walk_left\n - output walk_right\n - output aaah\n\nThe game Lemmings involves critters with fairly simple brains. So simple\nthat we are going to model it using a finite state machine. In the\nLemmings' 2D world, Lemmings can be in one of two states: walking left\n(walk_left is 1) or walking right (walk_right is 1). It will switch\ndirections if it hits an obstacle. In particular, if a Lemming is bumped\non the left (by receiving a 1 on bump_left), it will walk right. If it's\nbumped on the right (by receiving a 1 on bump_right), it will walk left.\nIf it's bumped on both sides at the same time, it will still switch\ndirections.\n\nIn addition to walking left and right and changing direction when bumped,\nwhen ground=0, the Lemming will fall and say \"aaah!\". When the ground\nreappears (ground=1), the Lemming will resume walking in the same\ndirection as before the fall. Being bumped while falling does not affect\nthe walking direction, and being bumped in the same cycle as ground\ndisappears (but not yet falling), or when the ground reappears while\nstill falling, also does not affect the walking direction.\n\nImplement a Moore state machine that models this behaviour. areset is\npositive edge triggered asynchronous reseting the Lemming machine to walk\nleft. Assume all sequential logic is triggered on the positive edge of\nthe clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - input clk: 1-bit clock signal (rising edge triggered)\n  - input areset: 1-bit asynchronous active-high reset signal\n  - input bump_left: 1-bit signal indicating a bump on the left (active high)\n  - input bump_right: 1-bit signal indicating a bump on the right (active high)\n  - input ground: 1-bit signal indicating the ground state (1 = grounded, 0 = falling)\n\n- Output Ports:\n  - output walk_left: 1-bit output signal indicating the Lemming is walking left (1 = walking left)\n  - output walk_right: 1-bit output signal indicating the Lemming is walking right (1 = walking right)\n  - output aaah: 1-bit output signal indicating the Lemming is falling (1 = falling)\n\nState Description:\nThe Lemming can be in one of two possible states:\n1. Walking Left (walk_left = 1, walk_right = 0)\n2. Walking Right (walk_left = 0, walk_right = 1)\n\nState Transition Rules:\n- On the positive edge of clk:\n  - If areset = 1, reset the state to Walking Left (walk_left = 1, walk_right = 0).\n  - If ground = 0 (falling):\n    - Set aaah = 1.\n    - Maintain the current walking direction (do not change state).\n  - If ground = 1 (grounded):\n    - Set aaah = 0.\n    - Continue walking in the same direction as before falling.\n  - If bump_left = 1 and bump_right = 0, switch to Walking Right (walk_left = 0, walk_right = 1).\n  - If bump_right = 1 and bump_left = 0, switch to Walking Left (walk_left = 1, walk_right = 0).\n  - If both bump_left and bump_right are high, switch direction (if previously walking left, switch to walking right, and vice versa).\n\nBehavior at Edge Cases:\n- If both bump signals are active simultaneously, the Lemming will change its direction regardless of which side was bumped first.\n- The output aaah should only be high when ground = 0, regardless of the bump signals.\n- The Lemming does not change direction upon receiving bump signals while falling (ground = 0).\n\nInitial Conditions:\n- Upon receiving areset = 1, the Lemming should initialize to Walking Left (walk_left = 1, walk_right = 0) and aaah = 0.\n\nSequential Logic:\n- The state transition is edge-triggered on the positive edge of clk. All flip-flops and state registers must be defined to ensure no race conditions occur within the logic operations.\n\nSignal Dependencies:\n- The outputs walk_left, walk_right, and aaah must accurately reflect the internal state of the Lemming based on the defined rules and input conditions.\n                    "
    }
]