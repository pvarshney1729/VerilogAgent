[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  ena\n - output pm\n - output hh (8 bits)\n - output mm (8 bits)\n - output ss (8 bits)\n\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm\nindicator). Your counters are clocked by a fast-running clk, with a pulse\non ena whenever your clock should increment (i.e., once per second, while\n\"clk\" is much faster than once per second). The signal \"pm\" is asserted\nif the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD\n(Binary- Coded Decimal) digits each for hours (01-12), minutes (00-59),\nand seconds (00-59). Reset is the active high synchronous signal that\nresets the clock to \"12:00 AM.\" Reset has higher priority than enable and\ncan occur even when not enabled. Assume all sequential logic is triggered\non the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input, clock signal (positive edge triggered).\n  - reset: 1-bit input, active-high synchronous reset signal.\n  - ena: 1-bit input, enable signal for clock increment.\n\n- Output Ports:\n  - pm: 1-bit output, indicates if the current time is PM (1) or AM (0).\n  - hh: 8-bit output, represents hours in Binary-Coded Decimal (BCD) format (01-12).\n  - mm: 8-bit output, represents minutes in Binary-Coded Decimal (BCD) format (00-59).\n  - ss: 8-bit output, represents seconds in Binary-Coded Decimal (BCD) format (00-59).\n\nFunctional Description:\n- The module implements a 12-hour clock with AM/PM indication.\n- The clock is incremented once per second based on the ena signal, which is pulsed when the clock should increment.\n- The enable signal (ena) is used to control the increment of the clock, while the reset signal (reset) takes higher priority and can reset the clock regardless of the enable state.\n- The output pm is asserted (set to 1) when the time is in the PM period (after 12:00 PM and before 12:00 AM), and de-asserted (set to 0) otherwise (AM period).\n\nClocking and Reset Behavior:\n- All sequential logic (counters for hours, minutes, and seconds) is triggered on the positive edge of the clk signal.\n- The reset signal (reset) is active-high and synchronous to the clk. When asserted, it resets the clock to \"12:00 AM\" (hh = 01, mm = 00, ss = 00) and sets the pm output to 0.\n\nBCD Representation:\n- The hh, mm, and ss outputs are represented in BCD format:\n  - For hours (hh): valid range is 01 to 12 (BCD representation).\n  - For minutes (mm) and seconds (ss): valid range is 00 to 59 (BCD representation).\n\nEdge Cases:\n- On reset, regardless of the clk or ena state, the clock outputs must be set to \"12:00 AM.\"\n- Ensure that the transition from 12:59:59 to 01:00:00 correctly updates the pm signal and resets seconds and minutes appropriately.\n\nSignal Dependencies:\n- The pm output depends on the current value of hh: if hh is 01 to 11, pm = 0 (AM); if hh is 12, pm = 1 (PM).\n- The increment of seconds triggers the increment of minutes, and the increment of minutes triggers the increment of hours, maintaining the correct time format.\n                    "
    }
]