[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input clk\n - input in       (8 bits)\n - output anyedge (8 bits)\n\nImplement a module that for each bit in an 8-bit input vector, detect\nwhen the input signal changes from one clock cycle to the next (detect\nany edge). The output bit of anyedge should be set to 1 the cycle \nafter the input bit has 0 to 1 or 1 to 0 transition occurs. Assume all \nsequential logic is triggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input (synchronous clock signal, active on the rising edge)\n  - in: 8-bit input vector (bit[0] is the least significant bit (LSB), bit[7] is the most significant bit (MSB))\n\n- Output Ports:\n  - anyedge: 8-bit output vector (bit[0] corresponds to the LSB, bit[7] corresponds to the MSB)\n\nFunctional Specification:\nThe TopModule shall implement combinational logic to detect transitions (edges) in the 8-bit input vector 'in' from one clock cycle to the next. For each bit in 'in':\n- The output bit 'anyedge[i]' (where i ranges from 0 to 7) shall be set to '1' in the clock cycle immediately following a transition from '0' to '1' or from '1' to '0' of the corresponding input bit 'in[i]'.\n- If no transition occurs for a given input bit during the current clock cycle, the output bit 'anyedge[i]' shall be set to '0'.\n\nSequential Logic:\n- The output 'anyedge' will be updated on the positive edge of the 'clk' signal.\n- The output state is latched and will hold its value until the next rising edge of 'clk'.\n\nReset Condition:\n- There shall be no explicit reset condition defined in this specification. The initial state of 'anyedge' will be undefined until the first clock cycle is processed.\n\nEdge Cases:\n- If 'in' remains constant (no transitions) across multiple clock cycles, the corresponding bits in 'anyedge' shall remain '0'.\n- The behavior of 'anyedge' during the first clock cycle after powering up is dependent on the state of 'in' and should not be relied upon until the first transition is detected.\n\nImplementation Notes:\n- Ensure to handle all bits of the input vector independently.\n- All output bits should not be driven simultaneously; ensure proper timing to avoid race conditions.\n                    "
    }
]