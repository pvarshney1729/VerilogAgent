[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  d (8 bits)\n - output q (8 bits)\n\nImplement a module that includes 8 D flip-flops with active high\nsynchronous reset. The flip-flops must be reset to 0x34 rather than zero.\nAll DFFs should be triggered by the negative edge of clk.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input signal representing the clock. The least significant bit (LSB) is denoted as clk[0].\n  - reset: 1-bit input signal for the synchronous reset. The LSB is denoted as reset[0].\n  - d: 8-bit input signal (d[7:0]) representing the data to be stored in the flip-flops. The most significant bit (MSB) is d[7] and the LSB is d[0].\n  \n- Output Ports:\n  - q: 8-bit output signal (q[7:0]) representing the stored data in the flip-flops. The MSB is q[7] and the LSB is q[0].\n\nFunctional Description:\n- The module implements eight (8) D flip-flops (DFFs) with the following characteristics:\n  - Each D flip-flop is triggered on the negative edge of the clk signal.\n  - All D flip-flops have an active high synchronous reset input (reset).\n  - Upon activation of the reset signal, all D flip-flops will reset their output (q) to the value 0x34 (binary: 00110100).\n  - In the absence of a reset, the D flip-flops will sample the value of the input signal d on the negative edge of clk and store this value.\n\nSequential Logic Definition:\n- The flip-flops are defined such that:\n  - If reset is high (reset == 1), then for each flip-flop, q[i] will be set to 0x34 for i = 0 to 7.\n  - If reset is low (reset == 0), then on the negative edge of clk, each flip-flop will take the value of the corresponding input from d, i.e., q[i] = d[i] for i = 0 to 7.\n\nInitial State:\n- The initial value of each flip-flop is undefined until the reset signal is activated or the first clock cycle occurs.\n\nEdge Cases:\n- During the first clock cycle, if reset is low, the output q will take the value from d.\n- The behavior of the flip-flops must ensure that there are no race conditions between the reset and the clock edge.\n\nSignal Dependencies:\n- The output q is dependent on both the reset signal and the input d, with precedence given to the reset signal during its active state.\n                    "
    }
]