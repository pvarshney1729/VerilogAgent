[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  s (3 bits)\n - output fr2\n - output fr1\n - output fr0\n - output dfr\n\nA large reservior of water serves several users. In order to keep the\nlevel of water succificently high, three sensors are placed vertically at\n5-inch intervals. When the water level is above the highest sensor s[2],\nthe input flow rate should be zero. When the level is below the lowest\nsensor s[0], the flow rate should be at maximum (both Nominal flow valve\nand Supplemental flow valve opened). The flow rate when the level is\nbetween the upper and lower sensors is determined by two factors: the\nwater level and the level previous to the last sensor change. Each water\nlevel has a nominal flow rate associated with it as show in the table\nbelow. If the sensor change indicates that the previous level was lower\nthan the current level, the flow rate should be increased by opening the\nSupplemental flow valve (controlled by dfr).\n\n  Water Level           | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n  Above s[2]            | s[0], s[1], s[2] | None\n  Between s[2] and s[1] | s[0], s[1]       | fr0\n  Between s[1] and s[0] | s[0]             | fr0, fr1\n  Below s[0]            | None             | fr0, fr1, fr2\n\nAlso include an active-high synchronous reset that resets the state\nmachine to a state equivalent to if the water level had been low for a\nlong time (no sensors asserted, and all four outputs asserted).\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - input clk: 1-bit clock signal (rising edge triggered).\n  - input reset: 1-bit active-high synchronous reset signal. When asserted, the module state is reset to a condition as if the water level has been low for an extended period.\n  - input s: 3-bit sensor input (s[2:0]), where:\n    - s[2] is the most significant bit (MSB) representing the highest sensor.\n    - s[0] is the least significant bit (LSB) representing the lowest sensor.\n  \n- Output Ports:\n  - output fr2: 1-bit flow rate control signal for maximum flow (asserted when water level is below the lowest sensor).\n  - output fr1: 1-bit flow rate control signal for intermediate flow.\n  - output fr0: 1-bit flow rate control signal for nominal flow.\n  - output dfr: 1-bit signal to control the opening of the Supplemental flow valve. Asserted when the water level increases compared to the previous level.\n\nFunctionality Description:\nThe module controls the flow rate of water based on the state of three vertical sensors, which detect the water level at 5-inch intervals. The flow rate behavior is defined as follows:\n\n1. When the water level is above the highest sensor (s[2] asserted):\n   - Output: fr2 = 0, fr1 = 0, fr0 = 0, dfr = 0.\n\n2. When the water level is between the highest sensor (s[2]) and the middle sensor (s[1]):\n   - Outputs: fr2 = 0, fr1 = 0, fr0 = 1, dfr is determined by previous level indication.\n\n3. When the water level is between the middle sensor (s[1]) and the lowest sensor (s[0]):\n   - Outputs: fr2 = 0, fr1 = 1, fr0 = 1, dfr is determined by previous level indication.\n\n4. When the water level is below the lowest sensor (s[0] not asserted):\n   - Outputs: fr2 = 1, fr1 = 1, fr0 = 1, dfr = 0.\n\nThe flow rate control signal dfr is activated when there is an increase in the water level (previous level lower than the current level).\n\nReset Conditions:\nUpon the assertion of the reset signal:\n- All outputs (fr2, fr1, fr0, dfr) are set to 1 (indicating maximum flow rate as if no sensors are asserted).\n\nState Dependencies:\n- The outputs depend on the current state of the sensors (s[2:0]) and the previous state of the water level to determine the appropriate flow rate adjustments. \n\nEdge Cases:\n- If the input signal s transitions quickly, ensure that the outputs reflect the proper flow rate based on the most recent water level detected.\n- Ensure that there is no race condition between the sensor state changes and the flow control outputs.\n\nEnsure that all sequential elements (e.g., registers for tracking previous water levels) are initialized to a known state upon reset.\n                    "
    }
]