[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  code (8 bits)\n - output out  (4 bits)\n - output valid\n\nThe module should recognize 8-bit keyboard scancodes for keys 0 through\n9. It should indicate whether one of the 10 cases were recognized\n(valid), and if so, which key was detected. If the 8-bit input is 8'h45,\n8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the\n4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively,\nthe 1-bit valid would be set to 1. If the input does not match any of the\ncases, both output signals would be set to 0.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface Specification:\n- Input Ports:\n  - code: input wire [7:0] (8 bits, unsigned) \n    - Represents the 8-bit keyboard scancode.\n\n- Output Ports:\n  - out: output wire [3:0] (4 bits, unsigned) \n    - Represents the detected key value (0 to 9) corresponding to the keyboard scancode.\n  - valid: output wire (1 bit, unsigned)\n    - Indicates whether a valid key (0 to 9) was detected (1 if valid, 0 if not).\n\nFunctional Description:\nThe TopModule is designed to decode specific 8-bit keyboard scancodes corresponding to keys 0 through 9. The valid scancodes and their corresponding outputs are as follows:\n\n- If code = 8'h45, then out = 4'b0000 (0), valid = 1\n- If code = 8'h16, then out = 4'b0001 (1), valid = 1\n- If code = 8'h1e, then out = 4'b0010 (2), valid = 1\n- If code = 8'h26, then out = 4'b0011 (3), valid = 1\n- If code = 8'h25, then out = 4'b0100 (4), valid = 1\n- If code = 8'h2e, then out = 4'b0101 (5), valid = 1\n- If code = 8'h36, then out = 4'b0110 (6), valid = 1\n- If code = 8'h3d, then out = 4'b0111 (7), valid = 1\n- If code = 8'h3e, then out = 4'b1000 (8), valid = 1\n- If code = 8'h46, then out = 4'b1001 (9), valid = 1\n\nIf the input code does not match any of the specified 8-bit cases, then:\n  - out = 4'b0000 (0)\n  - valid = 0\n\nImplementation Notes:\n- The detection logic should be combinational, ensuring that the output is updated immediately based on the input without any clock cycles.\n- There are no synchronous or asynchronous resets defined in this specification; the outputs should default to the specified values when no valid input is detected.\n- Ensure that the precedence of operations is clear to avoid race conditions, particularly in cases where multiple conditions may seem valid.\n\nEdge Cases:\n- Handle all input values that are outside the specified scancode range (0x00 to 0xFF). All such cases should result in out = 4'b0000 and valid = 0.\n\nBit Indexing:\n- The input 'code' is indexed as code[7:0], where code[0] is the least significant bit (LSB) and code[7] is the most significant bit (MSB).\n- The output 'out' is indexed as out[3:0], where out[0] is the LSB and out[3] is the MSB.\n                    "
    }
]