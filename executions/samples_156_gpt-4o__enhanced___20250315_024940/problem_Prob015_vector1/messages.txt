[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  in     (16 bits)\n - output out_hi ( 8 bits)\n - output out_lo ( 8 bits)\n\nThe module should implement a combinational circuit that splits an input\nhalf-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Port:\n  - Name: in\n  - Width: 16 bits\n  - Description: Represents a 16-bit input signal, where bit[0] refers to the least significant bit (LSB) and bit[15] refers to the most significant bit (MSB). The input is treated as an unsigned integer.\n\n- Output Ports:\n  - Name: out_hi\n  - Width: 8 bits\n  - Description: Represents the upper byte of the input signal, corresponding to bits [15:8] of the 'in' signal, outputting as an unsigned integer.\n  \n  - Name: out_lo\n  - Width: 8 bits\n  - Description: Represents the lower byte of the input signal, corresponding to bits [7:0] of the 'in' signal, outputting as an unsigned integer.\n\nFunctional Description:\n- The module implements a combinational logic circuit that splits the 16-bit input signal 'in' into two separate 8-bit output signals:\n  - 'out_hi' shall output the upper byte (bits [15:8]) of the input signal.\n  - 'out_lo' shall output the lower byte (bits [7:0]) of the input signal.\n\nBehavioral Specifications:\n- The module operates such that for every change in the 'in' signal, the outputs 'out_hi' and 'out_lo' will reflect the corresponding upper and lower bytes of 'in' immediately, without any delay.\n\nEdge Cases:\n- The module shall properly handle all values of the 16-bit input, including the minimum value (0) and the maximum value (65535).\n\nSignal Dependencies:\n- The outputs 'out_hi' and 'out_lo' are directly dependent on the 'in' signal. Changes in 'in' will immediately affect the outputs as per the defined behavior above.\n                    "
    }
]