[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  shift_ena\n - input  count_ena\n - input  data\n - output q (4 bits)\n\nThe module should implement a four-bit shift register that also acts as a\ndown counter. Data is shifted in most-significant-bit first when\nshift_ena is 1. The number currently in the shift register is decremented\nwhen count_ena is 1. Since the full system doesn't ever use shift_ena and\ncount_ena together, it does not matter what your circuit does if both\ncontrol inputs are 1 (this mainly means that it doesn't matter which case\ngets higher priority). Assume all sequential logic is triggered on the\npositive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Inputs:\n  - clk: 1-bit input (clock signal, positive edge triggered)\n  - shift_ena: 1-bit input (shift enable signal, active high)\n  - count_ena: 1-bit input (count enable signal, active high)\n  - data: 1-bit input (data input for shifting)\n\n- Outputs:\n  - q: 4-bit output (current value of the shift register and down counter)\n\nSpecifications:\n1. The module implements a four-bit shift register that also functions as a down counter.\n2. The shift register is configured such that:\n   - Data is shifted in from the most significant bit (MSB) to the least significant bit (LSB) when the `shift_ena` signal is high (1).\n   - The internal representation of the shift register is indexed as `q[3]` (MSB) to `q[0]` (LSB), where `q[0]` refers to the least significant bit.\n3. The down counter behavior is as follows:\n   - The value currently held in the shift register (`q`) is decremented by 1 when the `count_ena` signal is high (1).\n4. The module shall not perform any operation when both `shift_ena` and `count_ena` are high (1). The behavior in this case is not defined and may be treated as a \"don't care\" condition.\n5. All sequential logic is triggered on the positive edge of the `clk` signal.\n6. The initial state of the output register `q` shall be defined as `q = 4'b0000` (all bits cleared) upon reset or power-up conditions.\n7. The behavior of the module in edge cases (e.g., when the counter reaches zero and `count_ena` is activated) should be clearly handled to prevent underflow.\n8. Signal dependencies should be explicitly noted: the output `q` is dependent on the states of `shift_ena`, `count_ena`, and the `data` input. \n9. It is imperative to ensure that the operations of shifting and counting do not occur simultaneously to avoid race conditions; thus, a mutual exclusion mechanism is inherently assumed in design.\n                    "
    }
]