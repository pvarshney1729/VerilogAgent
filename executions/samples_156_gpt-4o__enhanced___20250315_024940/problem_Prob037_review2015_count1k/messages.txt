[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (10 bits)\n\nThe module should implement a counter that counts from 0 to 999,\ninclusive, with a period of 1000 cycles. Assume all sequential logic is\ntriggered on the positive edge of the clock. The reset input is active\nhigh synchronous, and should reset the counter to 0.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input signal (clock)\n  - reset: 1-bit input signal (active high synchronous reset)\n\n- Output Ports:\n  - q: 10-bit output signal (counter value)\n    - Bit[0] refers to the least significant bit (LSB)\n    - Bit[9] refers to the most significant bit (MSB)\n\nFunctional Specification:\n- The module implements a synchronous counter that counts from 0 to 999, inclusive.\n- The counter increments on the positive edge of the clock (clk).\n- The counter has a period of 1000 clock cycles, meaning it will reset to 0 after reaching 999.\n\nReset Behavior:\n- The reset input (reset) is active high and synchronous.\n- When reset is high, the counter (q) is set to 10'b000000000 (0).\n- The counter should maintain its value unless reset or incremented.\n\nInitial Conditions:\n- At power-up or upon a reset, the counter (q) should be initialized to 10'b000000000 (0).\n\nEdge Case Handling:\n- The counter will roll over to 0 after reaching 999 (10'b111110011).\n- Ensure that the counter does not exceed the maximum count of 999 and wraps around to 0.\n  \nDependencies:\n- The counter's value (q) is solely dependent on the clk and reset signals.\n- Ensure proper handling of clock edges to avoid race conditions between the clk and reset signals.\n\nTiming Specifications:\n- All operations occur in relation to the rising edge of clk.\n                    "
    }
]