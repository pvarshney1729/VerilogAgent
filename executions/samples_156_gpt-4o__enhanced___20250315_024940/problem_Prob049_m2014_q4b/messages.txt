[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  ar\n - input  d\n - output q\n\nThe module should implement a D flip flop, positive edge triggered, with\nan asynchronous reset \"ar\".\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: bit (1-bit wide, positive edge-triggered clock input)\n  - ar: bit (1-bit wide, asynchronous reset input; active high)\n  - d: bit (1-bit wide, data input for the D flip-flop)\n\n- Output Ports:\n  - q: bit (1-bit wide, output of the D flip-flop)\n\nFunctional Description:\nThe TopModule implements a D flip-flop with the following characteristics:\n- The flip-flop is triggered on the rising edge of the clock signal (clk).\n- The asynchronous reset (ar) takes precedence over the clock signal. When the reset signal is high, the output (q) is set to '0' regardless of the clock or data input.\n- The output (q) captures the value of the data input (d) at the moment of the rising edge of the clock, provided that the reset signal is not active.\n\nReset Behavior:\n- The reset (ar) is asynchronous and active high.\n- When ar = 1, q will immediately be set to '0'.\n- On the next rising edge of clk, if ar = 0, q will take the value of d.\n\nInitial Conditions:\n- The initial state of the output (q) should be defined as '0' when the module is instantiated and reset is not asserted.\n\nEdge Cases:\n- If both ar and clk are asserted simultaneously, the output (q) will be set to '0' due to the asynchronous reset taking precedence.\n\nSignal Dependencies:\n- The output (q) is dependent on the d input only at the rising edge of clk when the reset (ar) is not active.\n\nBit Indexing:\n- All signals are considered to be single-bit values; therefore, bit[0] refers to the least significant bit.\n                    "
    }
]