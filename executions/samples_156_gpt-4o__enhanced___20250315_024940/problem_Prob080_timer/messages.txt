[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk,\n - input  load,\n - input  data (10 bits)\n - output tc\n\nThe module should implement a timer that counts down for a given number\nof clock cycles, then asserts a signal to indicate that the given\nduration has elapsed. A good way to implement this is with a down-counter\nthat asserts an output signal when the count becomes 0. At each clock\ncycle:\n\n  (1) If load = 1, load the internal counter with the 10-bit data, the\n  number of clock cycles the timer should count before timing out. The\n  counter can be loaded at any time, including when it is still counting\n  and has not yet reached 0.\n\n  (2) If load = 0, the internal counter should decrement by 1. The output\n  signal tc (\"terminal count\") indicates whether the internal counter has\n  reached 0. Once the internal counter has reached 0, it should stay 0\n  (stop counting) until the counter is loaded again.\n\nThe module should implement a single D flip-flop. Assume all sequential\nlogic is triggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - input wire clk;            // Clock signal (1-bit)\n  - input wire load;           // Load signal (1-bit)\n  - input wire [9:0] data;     // 10-bit data input representing the countdown value\n\n- Output Ports:\n  - output reg tc;             // Terminal count output signal (1-bit), indicates when the countdown has reached zero\n\nFunctional Description:\nThe TopModule implements a countdown timer using a down-counter. The timer counts down from a specified number of clock cycles, loaded via the data input, and asserts the tc output signal when the countdown reaches zero.\n\nBehavioral Specification:\n1. The internal counter is a 10-bit register (counter_reg) initialized to 0. The counter is loaded and decremented based on the load signal:\n   - If load == 1:\n     - On every positive edge of the clk, the internal counter (counter_reg) is loaded with the value from the data input, effectively setting the countdown value.\n     - This loading operation can occur at any time, including during an active countdown.\n   - If load == 0:\n     - On every positive edge of the clk, if the counter_reg is greater than 0, it decrements the counter_reg by 1.\n     - The tc output signal is set to 1 (asserted) when counter_reg == 0, and remains asserted until the counter is loaded again. Once asserted, tc remains high, indicating that the timer has finished counting down.\n\n- The internal counter (counter_reg) shall be reset to 0 during the loading operation. The tc output shall be reset to 0 when a new value is loaded.\n\nSignal Definitions:\n- The counter_reg is defined as a 10-bit unsigned integer: counter_reg[9:0].\n- The output tc is defined as a 1-bit register, initialized to 0.\n\nClock Cycle Relationships:\n- All operations occur on the positive edge of the clk signal.\n- The outputs are updated synchronously, based on the current state of the inputs at the positive edge of the clk.\n\nReset Behavior:\n- The module does not have a dedicated reset input; however, loading the counter with a new value resets the internal state of the counter.\n\nEdge Case Handling:\n- If load is asserted while the counter is at 0, the counter will load the new value immediately. \n- If load is asserted again while the counter is counting down, the new value from data will overwrite the current countdown without delay.\n- The tc signal should transition to high only when the counter_reg reaches exactly 0.\n\nDependencies and Precedence:\n- The load operation takes precedence over the decrement operation during the same clock cycle. If load is high, the counter will load before it may potentially decrement.\n\nRace Condition Considerations:\n- Care should be taken to ensure that the loading and decrementing operations do not interfere with each other, as both operations occur on the same clock edge.\n\nInitial Conditions:\n- The internal counter (counter_reg) must be initialized to 0.\n- The output signal tc must be initialized to 0.\n                    "
    }
]