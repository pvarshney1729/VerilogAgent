[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  in  (100 bits)\n - output out (100 bits)\n\nThe module should reverse the bit ordering of the input and write to the\noutput.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nPort Interface:\n- Input:\n  - Name: in\n  - Width: 100 bits\n  - Definition: in[99:0] where in[0] refers to the least significant bit (LSB) and in[99] refers to the most significant bit (MSB).\n  - Signedness: Unsigned\n\n- Output:\n  - Name: out\n  - Width: 100 bits\n  - Definition: out[99:0] where out[0] corresponds to the least significant bit (LSB) and out[99] corresponds to the most significant bit (MSB).\n  - Signedness: Unsigned\n\nFunctionality:\n- The module shall implement a combinational logic function that reverses the bit order of the input signal. Specifically, the output signal out shall be defined as:\n  - out[0] = in[99]\n  - out[1] = in[98]\n  - ...\n  - out[98] = in[1]\n  - out[99] = in[0]\n\nBehavioral Characteristics:\n- The module shall have no internal state, as it is purely combinational.\n- There are no clock edges or sequential elements in this design.\n- There is no reset mechanism as this is not a sequential circuit.\n\nEdge Cases:\n- The module should handle all 100-bit input values, including all possible combinations of \u20180\u2019 and \u20181\u2019 in the input vector. The output will reflect the exact reversed bit order for all valid 100-bit input values.\n                    "
    }
]