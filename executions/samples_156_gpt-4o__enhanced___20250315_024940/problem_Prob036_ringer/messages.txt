[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  ring\n - input  vibrate_mode\n - output ringer\n - output motor\n\nThe module should implement a circuit to control a cellphone's ringer and\nvibration motor. Whenever the phone needs to ring from an incoming call\n(input ring), your circuit must either turn on the ringer (output ringer\n= 1) or the motor (output motor = 1), but not both. If the phone is in\nvibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn\non the ringer.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface Specification:\n- Input Ports:\n  - input wire ring: 1-bit signal indicating an incoming call. (bit[0] refers to the least significant bit)\n  - input wire vibrate_mode: 1-bit signal indicating whether the phone is in vibrate mode. (bit[0] refers to the least significant bit)\n\n- Output Ports:\n  - output reg ringer: 1-bit signal controlling the ringer. (bit[0] refers to the least significant bit)\n  - output reg motor: 1-bit signal controlling the vibration motor. (bit[0] refers to the least significant bit)\n\nFunctional Description:\nThe module implements a control circuit for a cellphone's ringer and vibration motor based on the input signals provided. \n\nBehavioral Logic:\n1. When the input signal 'ring' is asserted (ring = 1), the module shall determine the state of the 'vibrate_mode' input to control the outputs:\n   - If 'vibrate_mode' is asserted (vibrate_mode = 1), then:\n     - Set output 'motor' to 1 (motor = 1).\n     - Set output 'ringer' to 0 (ringer = 0).\n   - If 'vibrate_mode' is not asserted (vibrate_mode = 0), then:\n     - Set output 'ringer' to 1 (ringer = 1).\n     - Set output 'motor' to 0 (motor = 0).\n2. If the input 'ring' is not asserted (ring = 0), both outputs shall be deactivated:\n   - Set output 'ringer' to 0 (ringer = 0).\n   - Set output 'motor' to 0 (motor = 0).\n\nSequential Logic:\n- The outputs 'ringer' and 'motor' are both registered outputs and should reflect changes at the positive edge of a clock signal (not defined in this specification but assumed for sequential logic).\n\nReset Conditions:\n- This specification does not define a reset signal. If a reset is required, please specify whether it is synchronous or asynchronous, and the reset state for both outputs.\n\nEdge Cases:\n- The module must handle the case where both inputs are asserted in the same clock cycle (ring = 1 and vibrate_mode = 1). The output behavior in this case is defined in the behavioral logic above.\n\nSignal Dependencies:\n- Ensure that the outputs 'ringer' and 'motor' are mutually exclusive and cannot be high at the same time.\n\nInitial Values:\n- Both outputs 'ringer' and 'motor' should be initialized to 0 upon module instantiation.\n\nPotential Race Conditions:\n- Ensure that the logic for determining the states of 'ringer' and 'motor' is executed in a manner that avoids race conditions, particularly during input transitions.\n                    "
    }
]