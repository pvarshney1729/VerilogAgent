[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  j\n - input  k\n - output Q\n\nThe module should implement a JK flip-flop with the following truth\ntable. Note: Qold is the output of the flip-flop before the positive\nclock edge.\n\n  J | K | Q\n  0 | 0 | Qold\n  0 | 1 | 0\n  1 | 0 | 1\n  1 | 1 | ~Qold\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    The module shall be named `TopModule` and shall implement a JK flip-flop. The interface of the module is defined as follows:\n\n**Input Ports:**\n- `input clk`: One-bit clock signal. The flip-flop shall trigger on the rising edge of this signal.\n- `input j`: One-bit input signal representing the J input of the JK flip-flop.\n- `input k`: One-bit input signal representing the K input of the JK flip-flop.\n\n**Output Ports:**\n- `output reg Q`: One-bit output signal representing the current state of the flip-flop. The output Q shall be stored in a register and must be initialized to a known state.\n\n**Behavior:**\nThe module implements the following truth table for the JK flip-flop, where `Qold` is the state of the output `Q` prior to the rising edge of the `clk` signal:\n\n| J | K | Q (after clk rising edge) |\n|---|---|---------------------------|\n| 0 | 0 | Qold                      |\n| 0 | 1 | 0                         |\n| 1 | 0 | 1                         |\n| 1 | 1 | ~Qold                     |\n\n**Timing and Initialization:**\n- The flip-flop shall operate synchronously with the clock signal `clk`. \n- The flip-flop shall be updated on the rising edge of the `clk`.\n- The output `Q` must be initialized to `0` at the start of operation or upon a reset condition if implemented.\n\n**Reset Specification:**\n- If a reset signal is implemented, it must be specified as either synchronous or asynchronous, along with the reset state of `Q`.\n\n**Additional Considerations:**\n- The module shall handle edge cases, including transitions of `j` and `k` that occur simultaneously with the rising edge of `clk`.\n- Potential race conditions should be analyzed and mitigated as necessary, particularly in scenarios where both `j` and `k` are high at the same clock edge.\n\n**Bit Indexing:**\n- For clarity, bit[0] refers to the least significant bit (LSB) of the output `Q`.\n\nAll signals must adhere to the defined widths and behaviors to ensure correct implementation of the JK flip-flop functionality.\n                    "
    }
]