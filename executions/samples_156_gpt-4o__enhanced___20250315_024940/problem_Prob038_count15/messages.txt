[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (4 bits)\n\nThe module should implement a 4-bit binary counter that counts from 0\nthrough 15, inclusive, with a period of 16. Assume all sequential logic\nis triggered on the positive edge of the clock. The reset input is active\nhigh synchronous, and should reset the counter to 0.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input (clock signal) \n  - reset: 1-bit input (active high synchronous reset signal)\n  \n- Output Ports:\n  - q: 4-bit output (binary counter value) \n    - q[3:0]: bit[3] is the most significant bit (MSB), and bit[0] is the least significant bit (LSB).\n\nFunctional Specification:\n- The module shall implement a 4-bit binary counter that counts from 0 to 15, inclusive, with a reset functionality.\n- The counter increments its value on the positive edge of the clk signal.\n- The counter shall wrap around to 0 after reaching 15, effectively creating a counting period of 16.\n\nReset Behavior:\n- The reset signal (reset) is active high and synchronous. When reset is asserted (high), the counter (q) shall be set to 0 (0000).\n- The counter shall only reset on the positive edge of the clk when reset is asserted.\n\nSequential Logic:\n- The counter shall be implemented using flip-flops that are clocked on the rising edge of the clk signal.\n- The counter state (q) shall be updated in accordance with the following behavior:\n  - If reset is low (deasserted), on the next rising edge of clk, if the counter is less than 15, it shall increment by 1.\n  - If the counter reaches 15, it shall reset to 0 on the next increment.\n\nEdge Cases:\n- When reset is asserted, q should immediately be set to 0 regardless of the current counter state.\n- When clk transitions from low to high, and reset is not asserted, the counter should follow the specified counting behavior.\n\nInitialization:\n- Upon instantiation, the counter value (q) shall be initialized to 0 (0000) in the event that reset is not asserted during the first clk cycle.\n\nSignal Dependencies:\n- The output q is dependent on the clk and reset inputs, with precedence given to the reset signal during its active state.\n                    "
    }
]