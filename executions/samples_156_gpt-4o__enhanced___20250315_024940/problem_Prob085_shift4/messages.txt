[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  areset\n - input  load\n - input  ena\n - input  data (4 bits)\n - output q (4 bits)\n\nThe module should implement a 4-bit shift register (right shift), with\nasynchronous positive edge triggered areset, synchronous active high\nsignals load, and enable.\n\n  (1) areset: Resets shift register to zero.\n\n  (2) load: Loads shift register with data[3:0] instead of shifting.\n\n  (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and\n       disappears).\n\n  (4) q: The contents of the shift register. If both the load and ena\n       inputs are asserted (1), the load input has higher priority.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input (clock signal)\n  - areset: 1-bit input (asynchronous reset)\n  - load: 1-bit input (load signal, active high)\n  - ena: 1-bit input (enable signal, active high)\n  - data: 4-bit input (data to be loaded into the shift register, where data[3] is the most significant bit (MSB) and data[0] is the least significant bit (LSB))\n\n- Output Ports:\n  - q: 4-bit output (current contents of the shift register, where q[3] is the MSB and q[0] is the LSB)\n\nFunctional Specification:\n1. Asynchronous Reset (areset):\n   - When areset is asserted (high), the contents of the shift register (q) are reset to zero (q = 4'b0000), regardless of the clk, load, or ena inputs.\n\n2. Load Operation (load):\n   - When load is asserted (high) during the positive edge of clk, the shift register shall load the value from data[3:0] into q regardless of the state of ena. The operation is as follows: \n     - If load = 1, then q = data[3:0].\n\n3. Enable and Shift Operation (ena):\n   - If ena is asserted (high) and load is not asserted during the positive edge of clk, the shift register performs a right shift operation. The operation is defined as follows:\n     - q[3] becomes 0 (MSB is cleared).\n     - q[2] is assigned the value of q[3].\n     - q[1] is assigned the value of q[2].\n     - q[0] is assigned the value of q[1].\n     - q[0] is shifted out and disappears.\n\n4. Priority of Inputs:\n   - The load input has higher priority than the ena input. If both load and ena are asserted during the same clock cycle, the shift register will load the data from data[3:0] into q, overriding the shift operation.\n\n5. Sequential Logic:\n   - All sequential logic operations are triggered on the positive edge of the clk signal.\n\nEdge Cases:\n- If areset is asserted while load or ena are also asserted, the shift register should immediately reset to zero before any load or shift operation can occur.\n\nInitial Conditions:\n- Upon initialization (after areset is deasserted and prior to any clock cycles), the contents of the shift register q shall be defined as q = 4'b0000.\n\nSignal Dependency and Race Conditions:\n- Ensure to handle conditions where multiple inputs may change simultaneously, particularly the interaction between load and ena, with load taking precedence.\n                    "
    }
]