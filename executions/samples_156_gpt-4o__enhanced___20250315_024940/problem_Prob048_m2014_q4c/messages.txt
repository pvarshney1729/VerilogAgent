[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  d\n - input  r\n - output q\n\nThe module should implement a simple D flip flop with active high\nsynchronous reset (reset output to 0).\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input (clock signal, active on rising edge)\n  - d: 1-bit input (data input)\n  - r: 1-bit input (active high synchronous reset signal)\n  \n- Output Ports:\n  - q: 1-bit output (data output, reflects the current state of the D flip-flop)\n\nSpecifications:\n1. The module implements a D flip-flop characterized by the following behavior:\n   - On the rising edge of the clock (clk), if the reset signal (r) is low (0), the output (q) is updated to the value of the data input (d).\n   - If the reset signal (r) is high (1), the output (q) is reset to 0, regardless of the value of d.\n  \n2. Reset Behavior:\n   - The reset (r) is an active high synchronous reset. The output (q) will be set to 0 when reset (r) is high during the clock's rising edge.\n   - If reset (r) is low (0) during the clock's rising edge, the output (q) will follow the value of (d).\n\n3. Initial Conditions:\n   - The output (q) should be initialized to a known state of 0 upon power-up or when the module is first instantiated.\n\n4. Timing and Edge Cases:\n   - The module must ensure that the output (q) changes only on the rising edge of the clock signal (clk).\n   - The data input (d) must be stable at least setup time before the rising edge of clk to ensure reliable operation.\n   - The reset signal (r) must also be stable before the clock edge to avoid unexpected behavior.\n\n5. Signal Dependencies:\n   - The output (q) is directly dependent on the values of d and r at the time of the clock's rising edge.\n   - There are no race conditions expected due to the synchronous nature of the reset and the clocking mechanism.\n\n6. Bit Indexing:\n   - All input and output ports are defined as 1-bit wide, where bit[0] refers to the least significant bit (LSB).\n                    "
    }
]