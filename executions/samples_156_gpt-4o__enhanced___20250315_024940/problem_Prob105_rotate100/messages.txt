[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  load\n - input  ena  (  2 bits)\n - input  data (100 bits)\n - output q    (100 bits)\n\nThe module should implement a 100-bit left/right rotator, with\nsynchronous load and left/right enable. A rotator shifts-in the\nshifted-out bit from the other end of the register, unlike a shifter that\ndiscards the shifted-out bit and shifts in a zero. If enabled, a rotator\nrotates the bits around and does not modify/discard them.\n\n  (1) load: Loads shift register with data[99:0] instead of rotating.\n      Synchronous active high.\n\n  (2) ena[1:0]: Synchronous. Chooses whether and which direction to\n      rotate:\n      (a) 2'b01 rotates right by one bit,\n      (b) 2'b10 rotates left by one bit,\n      (c) 2'b00 and 2'b11 do not rotate.\n\n  (3) q: The contents of the rotator.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input signal (clock signal, active on rising edge)\n  - load: 1-bit input signal (active high, used to load data into the shift register)\n  - ena: 2-bit input signal (controls the rotation direction)\n    - ena[1]: 1-bit input for direction control\n    - ena[0]: 1-bit input for direction control\n  - data: 100-bit input signal (data to be loaded into the shift register)\n  \n- Output Ports:\n  - q: 100-bit output signal (contains the contents of the rotator)\n\nSpecifications:\n1. Synchronous Operation:\n   - All operations are triggered on the rising edge of clk.\n\n2. Load Operation:\n   - When load is asserted (active high), the shift register will be loaded with data[99:0], replacing the current contents of the register.\n   - The contents of q will reflect the loaded data immediately after the load operation.\n\n3. Rotation Operation:\n   - The rotation operation is controlled by the ena input:\n     - If ena[1:0] == 2'b01: Rotate the contents of the shift register to the right by one bit.\n       - The least significant bit (LSB, q[0]) will be shifted out and will enter the most significant bit (MSB, q[99]).\n     - If ena[1:0] == 2'b10: Rotate the contents of the shift register to the left by one bit.\n       - The most significant bit (MSB, q[99]) will be shifted out and will enter the least significant bit (LSB, q[0]).\n     - If ena[1:0] == 2'b00 or 2'b11: The contents of the shift register will remain unchanged (no rotation).\n   \n4. Reset Conditions:\n   - No explicit reset signal is defined in this specification; however, the initial state of the shift register and output q is undefined unless otherwise specified. It is recommended to define an initial state prior to the first load.\n\n5. Edge Cases:\n   - The module will handle all input edge cases according to the specified behavior of the load and rotation operations.\n   - If both load and ena are asserted simultaneously, load takes precedence on the next clock cycle.\n\n6. Bit Indexing Convention:\n   - The bit indexing follows the convention where q[0] refers to the least significant bit (LSB) and q[99] refers to the most significant bit (MSB).\n   - Similarly, data[0] refers to the least significant bit (LSB) and data[99] refers to the most significant bit (MSB).\n\n7. Dependencies and Race Conditions:\n   - The behavior of the output q is determined solely by the input signals load and ena in relation to the clk. Care should be taken to avoid race conditions by ensuring that load and ena are mutually exclusive in their operations during any given clock cycle.\n                    "
    }
]