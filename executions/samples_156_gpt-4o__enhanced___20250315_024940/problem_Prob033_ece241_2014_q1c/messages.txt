[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  a (8 bits)\n - input  b (8 bits)\n - output s (8 bits)\n - output overflow\n\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0].\nThe module should add these numbers to produce s[7:0]. Also compute\nwhether a (signed) overflow has occurred.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - input signed [7:0] a: 8-bit two's complement number, where bit[0] is the least significant bit (LSB) and bit[7] is the most significant bit (MSB).\n  - input signed [7:0] b: 8-bit two's complement number, where bit[0] is the LSB and bit[7] is the MSB.\n  \n- Output Ports:\n  - output signed [7:0] s: 8-bit result of the addition, where bit[0] is the LSB and bit[7] is the MSB.\n  - output overflow: 1-bit signal indicating whether a signed overflow has occurred during the addition operation.\n\nFunctional Description:\n- The module shall compute the sum of the two input numbers a and b, producing the output s, as follows:\n  s = a + b\n- The overflow signal shall be set to high (1) if a signed overflow occurs during the addition. Specifically, overflow occurs if:\n  - Both a and b are positive (i.e., a[7] = 0 and b[7] = 0) and s[7] = 1 (the sign bit of the result is negative).\n  - Both a and b are negative (i.e., a[7] = 1 and b[7] = 1) and s[7] = 0 (the sign bit of the result is positive).\n- The module shall handle the addition and overflow detection as combinational logic, meaning the outputs will be updated immediately based on the inputs without any clock cycle dependencies.\n\nEdge Cases:\n- The module shall correctly handle the boundary values of a and b, including minimum (-128) and maximum (127) values for signed 8-bit integers.\n\nReset Behavior:\n- No reset mechanism is defined for this module, as it operates purely on combinational logic without any state retention.\n\nInitialization:\n- No explicit initialization of outputs is required as there is no stateful behavior in this combinational design.\n\nSignal Dependencies:\n- The output s and overflow are directly dependent on the inputs a and b and will be recalculated whenever the values of a or b change.\n                    "
    }
]