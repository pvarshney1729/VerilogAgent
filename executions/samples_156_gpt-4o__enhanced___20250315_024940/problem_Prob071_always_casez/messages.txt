[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  in  (8 bits)\n - output pos (3 bits)\n\nThe module should implement a priority encoder for an 8-bit input. Given\nan 8-bit vector, the output should report the first (least significant)\nbit in the vector that is 1. Report zero if the input vector has no bits\nthat are high. For example, the input 8'b10010000 should output 3'd4,\nbecause bit[4] is first bit that is high.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Port:\n  - Name: in\n  - Width: 8 bits\n  - Sign: Unsigned\n  - Description: An 8-bit vector where each bit represents a binary value (0 or 1).\n\n- Output Port:\n  - Name: pos\n  - Width: 3 bits\n  - Sign: Unsigned\n  - Description: A 3-bit output representing the index of the first (least significant) bit that is high (1) in the input vector. If no bits are high, the output should be 3'b000.\n\nFunctional Specification:\n- The module implements a combinational logic priority encoder for an 8-bit input vector.\n- The output, pos, should indicate the index of the least significant bit (LSB) that is set to 1 (high) in the input vector, in the following manner:\n  - bit[0] refers to the least significant bit (LSB) of the input vector.\n  - If the input vector has no bits that are high, then pos should output 3'b000.\n  \nOperational Details:\n- For an input vector of 'in' with the binary representation of 8'b10010000, the expected output will be pos = 3'd4, as bit[4] is the first bit that is high.\n\nEdge Case Handling:\n- If all bits in the input vector 'in' are 0 (e.g., 8'b00000000), the output pos must be explicitly set to 3'b000.\n\nImplementation Considerations:\n- Ensure there are no race conditions in determining the output based on the input.\n- The module should handle all possible values of the input vector, including cases where multiple bits are set to high.\n                    "
    }
]