[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  in    (32 bits)\n - output out   (32 bits)\n\nThe module should examine each bit in the 32-bit input vector, and\ncapture when the input signal changes from 1 in one clock cycle to 0 the\nnext. \"Capture\" means that the output will remain 1 until the register is\nreset (active high synchronous reset). Assume all sequential logic is\ntriggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input (clock signal, rising edge triggered)\n  - reset: 1-bit input (active high synchronous reset)\n  - in: bit[31:0] (32-bit input vector; bit[0] is the least significant bit (LSB) and bit[31] is the most significant bit (MSB))\n\n- Output Ports:\n  - out: bit[31:0] (32-bit output vector; bit[0] corresponds to the capture status of in[0], and bit[31] corresponds to the capture status of in[31])\n\nFunctional Description:\nThe TopModule captures transitions of the 32-bit input vector 'in' from a logical high state (1) in one clock cycle to a logical low state (0) in the subsequent clock cycle. The output vector 'out' will reflect this transition, maintaining a high (1) state for the corresponding bit position until the 'reset' signal is asserted. \n\nBehavior Specifications:\n- The capture of a transition occurs on the rising edge of the clock signal (clk).\n- The output 'out' should be set to 1 at the bit position corresponding to the input bit that transitions from 1 to 0, while all other bits in 'out' remain unchanged.\n- The output will reset to 0 at all bit positions when the 'reset' signal is activated (high), regardless of the input state.\n\nReset Conditions:\n- The reset operation is synchronous, meaning that the state of the output 'out' will only change upon the rising edge of the clock signal when 'reset' is high.\n- Upon activation of the reset, all bits in the output vector 'out' will be set to 0.\n\nEdge Case Handling:\n- If 'in' remains at 1, the corresponding bit in 'out' should not change until a transition from 1 to 0 occurs.\n- If 'in' transitions from 0 to 1, no change should occur in 'out' until the subsequent transition from 1 to 0.\n\nSignal Dependencies:\n- The output bits in 'out' are directly dependent on the previous state of the corresponding input bit in 'in' as sampled at the previous rising edge of clk.\n- Care must be taken to avoid potential race conditions by ensuring that the logic for detecting transitions is evaluated consistently within the clock cycle.\n\nInitial Values:\n- Upon power-up or initial conditions, the output vector 'out' should be initialized to bit[31:0] = 0.\n                    "
    }
]