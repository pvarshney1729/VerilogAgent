{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic reset,\n    input  logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    typedef enum logic [2:0] {\n        S0, // Initial state (waiting for 0)\n        S1, // 0\n        S2, // 01\n        S3, // 011\n        S4, // 0111\n        S5, // 01111\n        S6, // 011111\n        S7  // 0111111 (Error state for 7 consecutive 1s)\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Synchronous state transition\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= S0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            S0: next_state = (in == 1'b0) ? S0 : S1;\n            S1: next_state = (in == 1'b0) ? S0 : S2;\n            S2: next_state = (in == 1'b0) ? S0 : S3;\n            S3: next_state = (in == 1'b0) ? S0 : S4;\n            S4: next_state = (in == 1'b0) ? S0 : S5;\n            S5: next_state = (in == 1'b0) ? S0 : S6;\n            S6: next_state = (in == 1'b0) ? S0 : S7; // Transition to error state on 7th 1\n            S7: next_state = (in == 1'b0) ? S0 : S7; // Remain in error state\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n        \n        case (current_state)\n            S5: disc = 1'b1; // Discard signal for 0111110\n            S6: flag = 1'b1; // Flag signal for 01111110\n            S7: err = 1'b1; // Error signal for 7 or more 1s\n            default: ; // No outputs asserted\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}