[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  in\n - output disc\n - output flag\n - output err\n\nSynchronous HDLC framing involves decoding a continuous bit stream of\ndata to look for bit patterns that indicate the beginning and end of\nframes (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a\n\"flag\" that indicate frame boundaries. To avoid the data stream from\naccidentally containing \"flags\", the sender inserts a zero after every 5\nconsecutive 1s which the receiver must detect and discard. We also need\nto signal an error if there are 7 or more consecutive 1s. Create a\nMoore-type finite state machine to recognize these three sequences:\n\n  (1) 0111110: Signal a bit needs to be discarded (disc).\n  (2) 01111110: Flag the beginning/end of a frame (flag).\n  (3) 01111111...: Error (7 or more 1s) (err).\n\nWhen the FSM is reset, it should be in a state that behaves as though the\nprevious input were 0. The reset signal is active high synchronous. The\noutput signals should be asserted for a complete cycle beginning on the\nclock cycle after the condition occurs. Assume all sequential\nlogic is triggered on the positive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface Description:\n- Input Ports:\n  - input logic clk : Clock signal (1-bit, active on the positive edge).\n  - input logic reset : Synchronous reset signal (1-bit, active high).\n  - input logic in : Input data stream (1-bit).\n  \n- Output Ports:\n  - output logic disc : Discard signal (1-bit, asserted for one clock cycle when a bit needs to be discarded).\n  - output logic flag : Frame boundary signal (1-bit, asserted for one clock cycle when a frame boundary is detected).\n  - output logic err : Error signal (1-bit, asserted for one clock cycle when 7 or more consecutive 1s are detected).\n\nFunctional Description:\nThe module implements a Moore-type finite state machine (FSM) to decode a continuous bit stream of data according to the HDLC framing protocol. The FSM must recognize the following sequences:\n\n1. **Sequence 0111110**: \n   - Action: Assert `disc` for one clock cycle on the next clock edge following detection.\n\n2. **Sequence 01111110**: \n   - Action: Assert `flag` for one clock cycle on the next clock edge following detection.\n\n3. **Sequence 01111111...**: \n   - Action: Assert `err` for one clock cycle on the next clock edge following detection.\n\nState Initialization and Reset Behavior:\n- Upon activation of the reset signal (active high), the FSM will initialize to a state that behaves as though the last input was `0`. All output signals (`disc`, `flag`, `err`) should be deasserted during the reset state.\n\nClock Cycle Relationships:\n- All sequential logic will be triggered on the positive edge of the clock signal (`clk`).\n- Output signals will be asserted during the clock cycle immediately following the detection of the respective sequence.\n\nSignal Dependencies:\n- The FSM will monitor the `in` signal for changes in state based on the sequential input stream.\n- Ensure to prevent race conditions by synchronizing the state transitions with the clock edge.\n\nEdge Case Handling:\n- Ensure the FSM correctly handles inputs at the boundaries of valid sequences, such as transitions from 0 to 1 and vice versa, as well as sequences that may overlap.\n\nOutput Signal Timing:\n- The output signals (`disc`, `flag`, `err`) are to be asserted for exactly one clock cycle and will be deasserted in the subsequent cycle unless reasserted by the FSM based on new input conditions.\n                    "
    }
]