[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  A (2 bits)\n - input  B (2 bits)\n - output z\n\nThe module should implement a circuit that has two 2-bit inputs A[1:0]\nand B[1:0], and produces an output z. The value of z should be 1 if A =\nB, otherwise z should be 0.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nPort Interface:\n- Input Ports:\n  - A: bit[1:0] (2 bits, unsigned)\n    - bit[0] refers to the least significant bit (LSB)\n    - bit[1] refers to the most significant bit (MSB)\n  - B: bit[1:0] (2 bits, unsigned)\n    - bit[0] refers to the least significant bit (LSB)\n    - bit[1] refers to the most significant bit (MSB)\n\n- Output Port:\n  - z: bit (1 bit, unsigned)\n\nFunctional Specification:\nThe module shall implement a combinational logic circuit that compares two 2-bit unsigned inputs, A and B. The output z shall be determined as follows:\n- If A == B, then z = 1 (true)\n- If A \u2260 B, then z = 0 (false)\n\nBehavior:\n- The comparison shall consider all possible values of A and B (from 0 (00) to 3 (11)).\n- The output z shall be updated immediately based on the values of A and B without any delay, as this is a pure combinational circuit.\n- No clock or reset signal is defined since the module does not implement sequential logic.\n\nEdge Cases:\n- The module shall handle all possible combinations of A and B, including the cases where both inputs are at their minimum (00) and maximum (11) values.\n\nSignal Dependencies:\n- The output z depends directly on the values of inputs A and B with no additional intermediate signals.\n- There are no potential race conditions as the circuit is entirely combinational.\n\nInitial Values:\n- Since this is a combinational circuit, there are no registers or flip-flops, and thus no initial values are required.\n\nEnd of Specification.\n                    "
    }
]