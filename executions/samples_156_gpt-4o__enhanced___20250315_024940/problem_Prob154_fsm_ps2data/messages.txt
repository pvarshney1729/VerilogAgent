[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - input  in (8 bits)\n - output out_bytes (24 bits)\n - output done\n\nThe module should implement a finite state machine that will search for\nmessage boundaries when given an input byte stream. The algorithm we'll\nuse is to discard bytes until we see one with in[3]=1. We then assume\nthat this is byte 1 of a message, and signal the receipt of a message\nonce all 3 bytes have been received (done). The FSM should signal done in\nthe cycle immediately after the third byte of each message was\nsuccessfully received.\n\nImplement the datapath module that will output the 24-bit (3 byte)\nmessage whenever a packet is received (out_bytes[23:16] is the first\nbyte, out_bytes[15:8] is the second byte, etc.). The reset signal is\nactive high synchronous. out_bytes needs to be valid whenever the done\nsignal is asserted. You may output anything at other times (i.e.,\ndon't-care). Assume all sequential logic is triggered on the positive\nedge of the clock.\n\nHere is an example waveform:\n\n  time   clk rst in  done out_bytes\n  0ns    0   1    0  x         x\n  5ns    1   1    0  0         x\n  10ns   0   1    0  0         x\n  15ns   1   0   2c  0         x\n  20ns   0   0   2c  0         x\n  25ns   1   0   81  0         x\n  30ns   0   0   81  0         x\n  35ns   1   0    9  0         x\n  40ns   0   0    9  0         x\n  45ns   1   0   6b  1    2c8109\n  50ns   0   0   6b  1    2c8109\n  55ns   1   0    d  0         x\n  60ns   0   0    d  0         x\n  65ns   1   0   8d  0         x\n  70ns   0   0   8d  0         x\n  75ns   1   0   6d  1    6b0d8d\n  80ns   0   0   6d  1    6b0d8d\n  85ns   1   0   12  0         x\n  90ns   0   0   12  0         x\n  95ns   1   0    1  0         x\n  100ns  0   0    1  0         x\n  105ns  1   0    d  1    6d1201\n  110ns  0   0    d  1    6d1201\n  115ns  1   0   76  0         x\n  120ns  0   0   76  0         x\n  125ns  1   0   3d  0         x\n  130ns  0   0   3d  0         x\n  135ns  1   0   ed  1     d763d\n  140ns  0   0   ed  1     d763d\n  145ns  1   0   8c  0         x\n  150ns  0   0   8c  0         x\n  155ns  1   0   f9  0         x\n  160ns  0   0   f9  0         x\n  165ns  1   0   ce  1    ed8cf9\n  170ns  0   0   ce  1    ed8cf9\n  175ns  1   0   c5  0         x\n  180ns  0   0   c5  0         x\n  185ns  1   0   aa  0         x\n  190ns  0   0   aa  0         x\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input (clock signal, active on the rising edge)\n  - reset: 1-bit input (active high, synchronous reset)\n  - in: 8-bit input (input byte stream, with bit[0] as the least significant bit (LSB) and bit[7] as the most significant bit (MSB))\n\n- Output Ports:\n  - out_bytes: 24-bit output (contains the received message bytes)\n    - out_bytes[23:16]: First byte of the message\n    - out_bytes[15:8]: Second byte of the message\n    - out_bytes[7:0]: Third byte of the message\n  - done: 1-bit output (signals the completion of a message reception)\n\nFunctional Description:\nThe module implements a finite state machine (FSM) that processes the incoming byte stream on the 'in' input to detect message boundaries. The FSM shall operate as follows:\n1. Initially, the FSM shall be in the IDLE state, discarding incoming bytes until it detects a byte where in[3] = 1. \n2. Upon detection of such a byte, the FSM transitions to the RECEIVING state, where it will accept the next two bytes as part of a message.\n3. The FSM will output the concatenated 24-bit message in 'out_bytes' once all three bytes have been received.\n4. The 'done' signal shall be asserted in the clock cycle immediately following the successful reception of the third byte.\n\nReset Behavior:\n- The reset signal is active high and synchronous. When reset is asserted, all registers, including those storing the state of the FSM and the 'out_bytes', shall be initialized to zero.\n\nOutput Validity:\n- The 'out_bytes' signal shall be valid only when the 'done' signal is asserted. At all other times, 'out_bytes' may output don't-care values.\n\nClock Cycle Relationships:\n- All sequential logic within the module is triggered on the positive edge of the clock signal.\n\nEdge Cases and Input Boundaries:\n- The module assumes that the input stream may contain arbitrary byte values.\n- The behavior of the FSM at the boundaries of the input stream (e.g., when no valid byte is found) must be well-defined to avoid race conditions or undefined behavior.\n\nSignal Dependencies:\n- The state of the FSM depends on the input byte stream and the state of the 'reset' signal.\n- Proper precedence of operations must be maintained to ensure correct state transitions and output generation.\n\nExample Waveform:\n- The timing diagram provided in the original specification captures the expected behavior of the module under various input sequences. Each transition and output corresponds to the defined operation of the FSM.\n                    "
    }
]