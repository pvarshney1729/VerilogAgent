{
    "code": "module TopModule (\n    input  logic in,\n    input  logic [3:0] state,\n    output logic [3:0] next_state,\n    output logic out\n);\n\n    always @(*) begin\n        // Default assignments\n        next_state = 4'b0000; // Reset next_state to zero\n        out = 1'b0;           // Default output is 0\n\n        case (state)\n            4'b0001: begin // State A\n                next_state = (in) ? 4'b0010 : 4'b0001; // A -> B if in=1, else stay in A\n                out = 1'b0; // Output for state A\n            end\n            4'b0010: begin // State B\n                next_state = (in) ? 4'b0010 : 4'b0100; // B -> B if in=1, else B -> C\n                out = 1'b0; // Output for state B\n            end\n            4'b0100: begin // State C\n                next_state = (in) ? 4'b1000 : 4'b0001; // C -> D if in=1, else C -> A\n                out = 1'b0; // Output for state C\n            end\n            4'b1000: begin // State D\n                next_state = (in) ? 4'b0010 : 4'b0100; // D -> B if in=1, else D -> C\n                out = 1'b1; // Output for state D\n            end\n            default: begin\n                next_state = 4'b0000; // Default state if none match (safety)\n                out = 1'b0; // Default output\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    }
}