[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output q (5 bits)\n\nA linear feedback shift register is a shift register usually with a few\nXOR gates to produce the next state of the shift register. A Galois LFSR\nis one particular arrangement that shifts right, where a bit position with\na \"tap\" is XORed with the LSB output bit (q[0]) to produce its next value,\nwhile bit positions without a tap shift right unchanged.  If the taps positions\nare carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length\nLFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is\nnever reached).\n\nThe module should implement a 5-bit maximal-length Galois LFSR with taps\nat bit positions 5 and 3. The active-high synchronous reset should reset\nthe LFSR output to 1. Assume all sequential logic is triggered on the\npositive edge of the clock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - clk: 1-bit input, active on the rising edge (positive edge-triggered)\n  - reset: 1-bit input, active high, synchronous reset\n  \n- Output Port:\n  - q: 5-bit output, where q[0] represents the least significant bit (LSB) and q[4] represents the most significant bit (MSB)\n\nFunctional Specification:\nThe module implements a 5-bit maximal-length Galois Linear Feedback Shift Register (LFSR). The LFSR shall be configured to shift right, where:\n- The output bit q[0] is the least significant bit (LSB).\n- Taps for the LFSR are located at bit positions 5 (q[4]) and 3 (q[2]).\n\nBehavior:\n1. On the positive edge of clk:\n   - If reset is high, the output q shall be reset to the value 5'b00001 (binary representation of decimal 1).\n   - If reset is low, the LFSR shall perform a right shift operation:\n     - The next state of the LFSR is determined by XORing the bit values at the tap positions (q[4] and q[2]) with the current LSB (q[0]) to generate the new input value for q[4].\n     - The contents of the register shift right by one position, such that:\n       - q[4] (new) = q[4] XOR q[2]\n       - q[3] (new) = q[4] (current)\n       - q[2] (new) = q[3] (current)\n       - q[1] (new) = q[2] (current)\n       - q[0] (new) = q[1] (current)\n\nInitial Conditions:\n- Upon power-up, the reset must bring the LFSR to a known state of 5'b00001.\n\nEdge Cases:\n- The LFSR should not reach the all-zero state during normal operation as it is designed for maximum-length operation. All other states must cycle through the 2**5 - 1 = 31 possible non-zero states before repeating.\n\nSignal Dependencies:\n- Ensure that the reset condition is prioritized over normal operation during the clock cycle to prevent unintended state transitions.\n\nRace Conditions:\n- There should be no race conditions in the design, as all state changes are synchronized to the rising edge of clk and are contingent upon the reset signal.\n                    "
    }
]