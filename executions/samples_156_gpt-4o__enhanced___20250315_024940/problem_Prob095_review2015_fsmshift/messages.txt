[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output shift_ena\n\nThis module is a part of the FSM for controlling a shift register, we\nwant the ability to enable the shift register for exactly 4 clock cycles\nwhenever the proper bit pattern is detected. Whenever the FSM is reset,\nassert shift_ena for 4 cycles, then 0 forever (until reset). Reset should\nbe active high synchronous.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    Module Name: TopModule\n\nPort Interface:\n- Input Ports:\n  - clk: 1-bit input representing the clock signal. It is a positive-edge-triggered signal.\n  - reset: 1-bit input representing the reset signal. It is active high and synchronous.\n\n- Output Ports:\n  - shift_ena: 1-bit output signal that enables the shift register.\n\nFunctional Description:\nThis module implements a finite state machine (FSM) that controls the enabling of a shift register. The output signal `shift_ena` indicates whether the shift register should be enabled for shifting data. \n\nBehavioral Specification:\n1. The `shift_ena` signal will be asserted (high) for exactly 4 clock cycles whenever a specific bit pattern is detected by the FSM.\n2. Upon reset (when the `reset` signal is asserted), the `shift_ena` signal will be asserted (high) for 4 consecutive clock cycles, followed by a deassertion (low) of the `shift_ena` signal, which will persist until the next reset event occurs.\n3. The reset state of the `shift_ena` signal is low (0) when the reset is asserted.\n\nSequential Logic Details:\n- The module's sequential logic is triggered on the positive edge of the `clk` signal.\n- All registers within the module, including the state register that governs the output `shift_ena`, must have explicitly defined initial values upon reset.\n\nEdge Case Handling:\n- If the reset signal is asserted while `shift_ena` is already high, the module must ensure that `shift_ena` resets immediately to high for the defined 4 clock cycles before transitioning to low.\n- The module must handle input signal changes and ensure that `shift_ena` does not inadvertently remain high beyond the specified 4 clock cycles unless a new valid bit pattern is detected.\n\nSignal Dependencies:\n- The output `shift_ena` is dependent on the FSM's state and the detection of the proper bit pattern.\n- The precedence of operations must be clearly defined to avoid potential race conditions, ensuring that the reset signal takes priority over the detection logic.\n\nNote: The specific conditions for detecting the bit pattern must be defined in the implementation details of the FSM.\n                    "
    }
]