[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  a\n - input  b\n - input  c\n - output w\n - output x\n - output y\n - output z\n\nThe module should behave like wires that makes these connections:\n\n  a -> w\n  b -> x\n  b -> y\n  c -> z\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops to zero in simulation.\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Infer logic correctly, especially when using Karnaugh maps.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE].\n</CODE>\n"
    },
    {
        "role": "assistant",
        "content": "Here is the enhanced specification which might be useful:\n                    **Module Name:** TopModule\n\n**Interface:**\n- **Input Ports:**\n  - **a:** 1-bit input (unsigned)\n  - **b:** 1-bit input (unsigned)\n  - **c:** 1-bit input (unsigned)\n\n- **Output Ports:**\n  - **w:** 1-bit output (unsigned)\n  - **x:** 1-bit output (unsigned)\n  - **y:** 1-bit output (unsigned)\n  - **z:** 1-bit output (unsigned)\n\n**Port Connections:**\n- The output port **w** shall be connected to the input port **a** such that:\n  - **w = a**\n  \n- The output port **x** shall be connected to the input port **b** such that:\n  - **x = b**\n  \n- The output port **y** shall also be connected to the input port **b** such that:\n  - **y = b**\n  \n- The output port **z** shall be connected to the input port **c** such that:\n  - **z = c**\n\n**Logic Type:**\n- The connections specified above are purely combinational logic.\n\n**Bit Indexing:**\n- For all ports, bit[0] refers to the least significant bit (LSB).\n\n**Reset Conditions:**\n- The module does not include any flip-flops or registers, therefore, no reset conditions are required.\n\n**Edge Cases:**\n- The module is designed to operate correctly for all possible input combinations of the 1-bit inputs (0 or 1).\n\n**Signal Dependencies:**\n- Outputs are directly dependent on their respective inputs with no additional logic or conditions applied.\n\n**Race Conditions:**\n- There are no race conditions present as this design is purely combinational with direct connections.\n                    "
    }
]