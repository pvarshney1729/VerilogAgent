{
    "code": "module TopModule (\n    input logic clk,               // Clock input, assumed to be much faster than ena\n    input logic reset,             // Active high synchronous reset signal\n    input logic ena,               // Enable signal, pulses once per second\n    output logic pm,               // PM indicator, 1 for PM, 0 for AM\n    output logic [7:0] hh,         // Hours in BCD format, range 01 to 12\n    output logic [7:0] mm,         // Minutes in BCD format, range 00 to 59\n    output logic [7:0] ss          // Seconds in BCD format, range 00 to 59\n);\n\n    // Initial block for simulation purposes\n    initial begin\n        pm = 0;\n        hh = 8'b0001_0010; // 12 in BCD\n        mm = 8'b0000_0000; // 00 in BCD\n        ss = 8'b0000_0000; // 00 in BCD\n    end\n\n    // Sequential logic for clock operation\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            pm <= 0;\n            hh <= 8'b0001_0010; // 12 in BCD\n            mm <= 8'b0000_0000; // 00 in BCD\n            ss <= 8'b0000_0000; // 00 in BCD\n        end else if (ena) begin\n            if (ss == 8'b0101_1001) begin // 59 in BCD\n                ss <= 8'b0000_0000; // Reset seconds to 00\n                if (mm == 8'b0101_1001) begin // 59 in BCD\n                    mm <= 8'b0000_0000; // Reset minutes to 00\n                    if (hh == 8'b0001_0010) begin // 12 in BCD\n                        hh <= 8'b0000_0001; // Reset hours to 01\n                        pm <= ~pm; // Toggle AM/PM\n                    end else if (hh == 8'b0000_1001) begin // 09 in BCD\n                        hh <= 8'b0001_0000; // Increment to 10\n                    end else if (hh == 8'b0001_0000) begin // 10 in BCD\n                        hh <= 8'b0001_0001; // Increment to 11\n                    end else if (hh == 8'b0001_0001) begin // 11 in BCD\n                        hh <= 8'b0001_0010; // Increment to 12\n                    end else begin\n                        hh <= hh + 1; // Increment hours\n                    end\n                end else begin\n                    mm <= mm + 1; // Increment minutes\n                end\n            end else begin\n                ss <= ss + 1; // Increment seconds\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}