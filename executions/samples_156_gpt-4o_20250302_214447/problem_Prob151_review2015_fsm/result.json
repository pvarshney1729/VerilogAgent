{
    "code": "module TopModule (\n    input  logic clk,          // Clock input\n    input  logic reset,        // Active high synchronous reset\n    input  logic data,         // Serial data input\n    input  logic done_counting,// Counter done signal\n    input  logic ack,          // Acknowledge signal from user\n    output logic shift_ena,    // Shift enable signal\n    output logic counting,     // Counting state signal\n    output logic done          // Done signal\n);\n\n    typedef enum logic [1:0] {\n        IDLE    = 2'b00,\n        SHIFT   = 2'b01,\n        COUNT   = 2'b10,\n        NOTIFY  = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] pattern_shift;\n    logic [1:0] shift_counter;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            shift_ena <= 0;\n            counting <= 0;\n            done <= 0;\n            shift_counter <= 0;\n            pattern_shift <= 4'b0000;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        next_state = current_state;\n        shift_ena = 0;\n        counting = 0;\n        done = 0;\n\n        case (current_state)\n            IDLE: begin\n                pattern_shift = {pattern_shift[2:0], data};\n                if (pattern_shift == 4'b1101) begin\n                    next_state = SHIFT;\n                end\n            end\n\n            SHIFT: begin\n                shift_ena = 1;\n                if (shift_counter == 3) begin\n                    next_state = COUNT;\n                    shift_counter = 0;\n                end else begin\n                    shift_counter = shift_counter + 1;\n                end\n            end\n\n            COUNT: begin\n                counting = 1;\n                if (done_counting) begin\n                    next_state = NOTIFY;\n                end\n            end\n\n            NOTIFY: begin\n                done = 1;\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 1688,
        "passfail": "R"
    }
}