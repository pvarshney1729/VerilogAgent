{
    "code": "module TopModule (\n    input logic clk,              // Clock input\n    input logic reset,            // Synchronous active-high reset\n    output logic [2:0] ena,       // Enable signals for tens, hundreds, and thousands digits\n    output logic [15:0] q         // 4-digit BCD counter output\n);\n\n    logic [3:0] ones, tens, hundreds, thousands;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            q <= 16'b0;\n            ena <= 3'b0;\n        end else begin\n            // Increment ones digit\n            if (ones == 4'd9) begin\n                ones <= 4'd0;\n                ena[0] <= 1'b1;\n            end else begin\n                ones <= ones + 1;\n                ena[0] <= 1'b0;\n            end\n\n            // Increment tens digit\n            if (ena[0]) begin\n                if (tens == 4'd9) begin\n                    tens <= 4'd0;\n                    ena[1] <= 1'b1;\n                end else begin\n                    tens <= tens + 1;\n                    ena[1] <= 1'b0;\n                end\n            end\n\n            // Increment hundreds digit\n            if (ena[1]) begin\n                if (hundreds == 4'd9) begin\n                    hundreds <= 4'd0;\n                    ena[2] <= 1'b1;\n                end else begin\n                    hundreds <= hundreds + 1;\n                    ena[2] <= 1'b0;\n                end\n            end\n\n            // Increment thousands digit\n            if (ena[2]) begin\n                if (thousands == 4'd9) begin\n                    thousands <= 4'd0;\n                end else begin\n                    thousands <= thousands + 1;\n                end\n            end\n\n            // Update the BCD counter output\n            q <= {thousands, hundreds, tens, ones};\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 39776,
        "passfail": "R"
    }
}