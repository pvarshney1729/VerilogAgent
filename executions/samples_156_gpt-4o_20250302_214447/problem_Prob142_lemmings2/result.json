{
    "code": "module TopModule (\n    input logic clk_i,\n    input logic areset_i,\n    input logic bump_left_i,\n    input logic bump_right_i,\n    input logic ground_i,\n    output logic walk_left_o,\n    output logic walk_right_o,\n    output logic aaah_o\n);\n\n    typedef enum logic [1:0] {\n        WALK_LEFT  = 2'b00,\n        WALK_RIGHT = 2'b01,\n        FALLING    = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n    state_t last_walk_state;\n\n    // State transition logic\n    always_ff @(posedge clk_i or posedge areset_i) begin\n        if (areset_i) begin\n            current_state <= WALK_LEFT;\n            last_walk_state <= WALK_LEFT;\n        end else begin\n            current_state <= next_state;\n            if (next_state == WALK_LEFT || next_state == WALK_RIGHT) begin\n                last_walk_state <= next_state;\n            end\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            WALK_LEFT: begin\n                if (!ground_i) begin\n                    next_state = FALLING;\n                end else if (bump_left_i) begin\n                    next_state = WALK_RIGHT;\n                end else begin\n                    next_state = WALK_LEFT;\n                end\n            end\n            WALK_RIGHT: begin\n                if (!ground_i) begin\n                    next_state = FALLING;\n                end else if (bump_right_i) begin\n                    next_state = WALK_LEFT;\n                end else begin\n                    next_state = WALK_RIGHT;\n                end\n            end\n            FALLING: begin\n                if (ground_i) begin\n                    next_state = last_walk_state;\n                end else begin\n                    next_state = FALLING;\n                end\n            end\n            default: begin\n                next_state = WALK_LEFT;\n            end\n        endcase\n    end\n\n    // Output logic\n    always_comb begin\n        walk_left_o = (current_state == WALK_LEFT);\n        walk_right_o = (current_state == WALK_RIGHT);\n        aaah_o = (current_state == FALLING);\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    }
}