{
    "code": "module lemming_controller (\n    input logic clk,\n    input logic areset,\n    input logic bump_left,\n    input logic bump_right,\n    input logic ground,\n    input logic dig,\n    output logic walk_left,\n    output logic walk_right,\n    output logic aaah,\n    output logic digging\n);\n\n    typedef enum logic [2:0] {\n        WALKING_LEFT,\n        WALKING_RIGHT,\n        FALLING,\n        DIGGING_LEFT,\n        DIGGING_RIGHT\n    } state_t;\n\n    state_t state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (state)\n            WALKING_LEFT: begin\n                if (!ground)\n                    next_state = FALLING;\n                else if (dig)\n                    next_state = DIGGING_LEFT;\n                else if (bump_left)\n                    next_state = WALKING_RIGHT;\n                else\n                    next_state = WALKING_LEFT;\n            end\n            WALKING_RIGHT: begin\n                if (!ground)\n                    next_state = FALLING;\n                else if (dig)\n                    next_state = DIGGING_RIGHT;\n                else if (bump_right)\n                    next_state = WALKING_LEFT;\n                else\n                    next_state = WALKING_RIGHT;\n            end\n            FALLING: begin\n                if (ground) begin\n                    if (state == DIGGING_LEFT || state == WALKING_LEFT)\n                        next_state = WALKING_LEFT;\n                    else\n                        next_state = WALKING_RIGHT;\n                end else\n                    next_state = FALLING;\n            end\n            DIGGING_LEFT: begin\n                if (!ground)\n                    next_state = FALLING;\n                else\n                    next_state = DIGGING_LEFT;\n            end\n            DIGGING_RIGHT: begin\n                if (!ground)\n                    next_state = FALLING;\n                else\n                    next_state = DIGGING_RIGHT;\n            end\n            default: next_state = WALKING_LEFT;\n        endcase\n    end\n\n    // State register\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALKING_LEFT;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = 0;\n        walk_right = 0;\n        aaah = 0;\n        digging = 0;\n        case (state)\n            WALKING_LEFT: walk_left = 1;\n            WALKING_RIGHT: walk_right = 1;\n            FALLING: aaah = 1;\n            DIGGING_LEFT: begin\n                digging = 1;\n                walk_left = 1;\n            end\n            DIGGING_RIGHT: begin\n                digging = 1;\n                walk_right = 1;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    }
}