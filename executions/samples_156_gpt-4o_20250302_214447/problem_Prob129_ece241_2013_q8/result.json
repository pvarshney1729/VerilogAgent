{
    "code": "[BEGIN]\nmodule TopModule (\n    input  wire clk,       // Clock signal, positive edge-triggered\n    input  wire aresetn,   // Active-low asynchronous reset\n    input  wire x,         // Input signal for sequence detection\n    output reg  z          // Output signal, asserted when \"101\" sequence is detected\n);\n\n    typedef enum logic [1:0] {\n        S0 = 2'b00,\n        S1 = 2'b01,\n        S2 = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresetn) begin\n            current_state <= S0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            S0: begin\n                if (x) next_state = S1;\n                else next_state = S0;\n            end\n            S1: begin\n                if (x) next_state = S1;\n                else next_state = S2;\n            end\n            S2: begin\n                if (x) next_state = S1;\n                else next_state = S0;\n            end\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        z = 1'b0;\n        case (current_state)\n            S2: begin\n                if (x) z = 1'b1;\n            end\n            default: z = 1'b0;\n        endcase\n    end\n\nendmodule\n[END]\n\n// VERILOG-EVAL: response did not use [BEGIN]/[DONE] correctly",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}