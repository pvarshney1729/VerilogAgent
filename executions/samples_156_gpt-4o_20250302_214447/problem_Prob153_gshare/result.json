{
    "code": "module TopModule(\n    input logic clk,\n    input logic areset,\n    input logic predict_valid,\n    input logic [6:0] predict_pc,\n    input logic train_valid,\n    input logic train_taken,\n    input logic train_mispredicted,\n    input logic [6:0] train_history,\n    input logic [6:0] train_pc,\n    output logic predict_taken,\n    output logic [6:0] predict_history\n);\n\n    // 128-entry table of 2-bit saturating counters\n    logic [1:0] pht [0:127];\n    logic [6:0] global_history;\n    logic [6:0] saved_history;\n\n    // Initialize PHT and global history\n    initial begin\n        integer i;\n        for (i = 0; i < 128; i = i + 1) begin\n            pht[i] = 2'b01; // weakly not-taken\n        end\n        global_history = 7'b0000000;\n    end\n\n    // Predict logic\n    always @(*) begin\n        if (predict_valid) begin\n            logic [6:0] index;\n            index = predict_pc ^ global_history;\n            predict_taken = pht[index][1]; // MSB of the counter\n            predict_history = global_history;\n        end else begin\n            predict_taken = 1'b0;\n            predict_history = 7'b0000000;\n        end\n    end\n\n    // Training logic\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            integer i;\n            for (i = 0; i < 128; i = i + 1) begin\n                pht[i] <= 2'b01; // weakly not-taken\n            end\n            global_history <= 7'b0000000;\n        end else if (train_valid) begin\n            logic [6:0] index;\n            index = train_pc ^ train_history;\n            if (!train_mispredicted) begin\n                // Update the PHT\n                if (train_taken) begin\n                    if (pht[index] != 2'b11) pht[index] <= pht[index] + 1;\n                end else begin\n                    if (pht[index] != 2'b00) pht[index] <= pht[index] - 1;\n                end\n                // Update global history\n                global_history <= {global_history[5:0], train_taken};\n            end else begin\n                // Restore history\n                global_history <= saved_history;\n            end\n        end\n    end\n\n    // Save history after misprediction\n    always_ff @(posedge clk) begin\n        if (train_valid && train_mispredicted) begin\n            saved_history <= global_history;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 577,
        "passfail": "R"
    }
}