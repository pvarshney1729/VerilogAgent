{
    "code": "module TopModule (\n    input logic clk,               // Clock signal for synchronous operation\n    input logic reset_n,           // Active-low asynchronous reset\n    input logic in,                // 1-bit input for state transitions\n    input logic [9:0] state,       // 10-bit one-hot encoded current state\n    output logic [9:0] next_state, // 10-bit one-hot encoded next state\n    output logic out1,             // 1-bit output corresponding to FSM output\n    output logic out2              // 1-bit output corresponding to FSM output\n);\n\n    // State encoding\n    localparam logic [9:0] S0 = 10'b0000000001;\n    localparam logic [9:0] S1 = 10'b0000000010;\n    localparam logic [9:0] S2 = 10'b0000000100;\n    localparam logic [9:0] S3 = 10'b0000001000;\n    localparam logic [9:0] S4 = 10'b0000010000;\n    localparam logic [9:0] S5 = 10'b0000100000;\n    localparam logic [9:0] S6 = 10'b0001000000;\n    localparam logic [9:0] S7 = 10'b0010000000;\n    localparam logic [9:0] S8 = 10'b0100000000;\n    localparam logic [9:0] S9 = 10'b1000000000;\n\n    // State transition logic\n    always_ff @(posedge clk or negedge reset_n) begin\n        if (!reset_n) begin\n            next_state <= S0;\n        end else begin\n            case (state)\n                S0: next_state <= in ? S1 : S0;\n                S1: next_state <= in ? S2 : S0;\n                S2: next_state <= in ? S3 : S0;\n                S3: next_state <= in ? S4 : S0;\n                S4: next_state <= in ? S5 : S0;\n                S5: next_state <= in ? S6 : S0;\n                S6: next_state <= in ? S7 : S0;\n                S7: next_state <= in ? S8 : S0;\n                S8: next_state <= in ? S9 : S0;\n                S9: next_state <= in ? S1 : S0;\n                default: next_state <= S0; // Undefined state fallback\n            endcase\n        end\n    end\n\n    // Output logic\n    always_comb begin\n        case (state)\n            S7: begin\n                out1 = 1'b0;\n                out2 = 1'b1;\n            end\n            S8: begin\n                out1 = 1'b1;\n                out2 = 1'b0;\n            end\n            S9: begin\n                out1 = 1'b1;\n                out2 = 1'b1;\n            end\n            default: begin\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 224,
        "passfail": "r"
    }
}