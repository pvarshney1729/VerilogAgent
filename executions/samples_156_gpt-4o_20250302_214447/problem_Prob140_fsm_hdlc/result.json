{
    "code": "module TopModule (\n    input  logic clk,     // Clock input, positive edge-triggered\n    input  logic reset,   // Synchronous, active-high reset\n    input  logic in,      // Serial data input\n    output logic disc,    // Output: 1 when a bit is to be discarded\n    output logic flag,    // Output: 1 when a frame boundary is detected\n    output logic err      // Output: 1 when an error is detected\n);\n\n    typedef enum logic [3:0] {\n        Idle, One, Two, Three, Four, Five, Six, Flag, Error\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= Idle;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        // Default assignments\n        next_state = current_state;\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n\n        case (current_state)\n            Idle: begin\n                if (in) next_state = One;\n            end\n            One: begin\n                if (in) next_state = Two;\n                else next_state = Idle;\n            end\n            Two: begin\n                if (in) next_state = Three;\n                else next_state = Idle;\n            end\n            Three: begin\n                if (in) next_state = Four;\n                else next_state = Idle;\n            end\n            Four: begin\n                if (in) next_state = Five;\n                else next_state = Idle;\n            end\n            Five: begin\n                if (in) next_state = Six;\n                else next_state = Idle;\n            end\n            Six: begin\n                if (in) begin\n                    next_state = Error;\n                    err = 1'b1;\n                end else begin\n                    next_state = Flag;\n                    flag = 1'b1;\n                end\n            end\n            Flag: begin\n                next_state = Idle;\n            end\n            Error: begin\n                if (!in) next_state = Idle;\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 266,
        "passfail": "R"
    }
}