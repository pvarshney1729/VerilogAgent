{
    "code": "module sequence_detector(\n    input logic clk,\n    input logic reset,\n    input logic data,\n    input logic ack,\n    output logic [3:0] count,\n    output logic counting,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        LOAD_DELAY = 2'b01,\n        COUNTING = 2'b10,\n        DONE = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] delay;\n    logic [3:0] bit_counter;\n    logic [9:0] cycle_counter;\n    logic [3:0] shift_reg;\n\n    // State transition\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic and output logic\n    always_comb begin\n        next_state = current_state;\n        counting = 1'b0;\n        done = 1'b0;\n        count = 4'b0000;\n\n        case (current_state)\n            IDLE: begin\n                if (shift_reg == 4'b1101) begin\n                    next_state = LOAD_DELAY;\n                end\n            end\n\n            LOAD_DELAY: begin\n                if (bit_counter == 4) begin\n                    next_state = COUNTING;\n                end\n            end\n\n            COUNTING: begin\n                counting = 1'b1;\n                count = delay;\n                if (cycle_counter == 0 && count == 0) begin\n                    next_state = DONE;\n                end\n            end\n\n            DONE: begin\n                done = 1'b1;\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\n    // Shift register for sequence detection\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            shift_reg <= 4'b0000;\n        end else if (current_state == IDLE) begin\n            shift_reg <= {shift_reg[2:0], data};\n        end\n    end\n\n    // Delay capture and bit counter\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            delay <= 4'b0000;\n            bit_counter <= 4'b0000;\n        end else if (current_state == LOAD_DELAY) begin\n            delay <= {delay[2:0], data};\n            bit_counter <= bit_counter + 1;\n        end else begin\n            bit_counter <= 4'b0000;\n        end\n    end\n\n    // Cycle counter and count decrement\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            cycle_counter <= 10'b0;\n        end else if (current_state == COUNTING) begin\n            if (cycle_counter == 10'd999) begin\n                cycle_counter <= 10'b0;\n                if (count > 0) begin\n                    count <= count - 1;\n                end\n            end else begin\n                cycle_counter <= cycle_counter + 1;\n            end\n        end else begin\n            cycle_counter <= 10'b0;\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "m"
    }
}