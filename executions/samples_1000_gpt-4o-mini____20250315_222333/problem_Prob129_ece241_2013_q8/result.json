{
    "code": "module TopModule (\n    input  logic clk,\n    input  logic aresetn,\n    input  logic x,\n    output logic z\n);\n\n    typedef enum logic [1:0] {\n        S0 = 2'b00, // Initial state\n        S1 = 2'b01, // State after '1'\n        S2 = 2'b10  // State after '10'\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Asynchronous reset and state transition\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresetn) begin\n            current_state <= S0;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            S0: begin\n                if (x) \n                    next_state = S1; // Move to S1 on '1'\n                else \n                    next_state = S0; // Stay in S0 on '0'\n            end\n            S1: begin\n                if (x) \n                    next_state = S1; // Stay in S1 on '1'\n                else \n                    next_state = S2; // Move to S2 on '0'\n            end\n            S2: begin\n                if (x) \n                    next_state = S1; // Move to S1 on '1' (overlap)\n                else \n                    next_state = S0; // Move to S0 on '0'\n            end\n            default: next_state = S0; // Default case\n        endcase\n    end\n\n    // Output logic\n    assign z = (current_state == S2 && !x); // Assert z when in S2 and x is '0'\n\nendmodule",
    "test_results": {
        "num_mismatch": 86,
        "passfail": "R"
    }
}