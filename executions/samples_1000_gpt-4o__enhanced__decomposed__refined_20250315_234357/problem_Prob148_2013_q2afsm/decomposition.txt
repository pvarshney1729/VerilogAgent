Decomposition Result:[
    {
        "id": "1",
        "content": "Define the module TopModule with input ports clk, resetn, r[2:0] and output ports g[2:0].",
        "source": "I would like you to implement a module named TopModule with the following interface. All input and output ports are one bit unless otherwise specified.",
        "implementation": "module TopModule (\n    input clk,\n    input resetn,\n    input [2:0] r,\n    output reg [2:0] g\n);\n\n    // State encoding\n    typedef enum reg [1:0] {\n        STATE_A = 2'b00,\n        STATE_B = 2'b01,\n        STATE_C = 2'b10,\n        STATE_D = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            current_state <= STATE_A;\n        else\n            current_state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            STATE_A: begin\n                if (r[0])\n                    next_state = STATE_B;\n                else if (r[1])\n                    next_state = STATE_C;\n                else if (r[2])\n                    next_state = STATE_D;\n                else\n                    next_state = STATE_A;\n            end\n            STATE_B: begin\n                if (r[0])\n                    next_state = STATE_B;\n                else\n                    next_state = STATE_A;\n            end\n            STATE_C: begin\n                if (r[1])\n                    next_state = STATE_C;\n                else\n                    next_state = STATE_A;\n            end\n            STATE_D: begin\n                next_state = STATE_A;\n            end\n            default: next_state = STATE_A;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        g = 3'b000;\n        case (current_state)\n            STATE_B: g[0] = 1'b1;\n            STATE_C: g[1] = 1'b1;\n            STATE_D: g[2] = 1'b1;\n            default: g = 3'b000;\n        endcase\n    end\n\nendmodule"
    },
    {
        "id": "2",
        "content": "Define the state encoding for the FSM with states A, B, C, and D.",
        "source": "Assign any state codes that you wish to use.",
        "implementation": "// State encoding for the FSM\n  localparam STATE_A = 2'b00;\n  localparam STATE_B = 2'b01;\n  localparam STATE_C = 2'b10;\n  localparam STATE_D = 2'b11;"
    },
    {
        "id": "3",
        "content": "Implement the state flip-flops for state transitions, triggered on the positive edge of the clock and synchronous reset.",
        "source": "Resetn is an active-low synchronous reset that resets into state A. Assume all sequential logic is triggered on the positive edge of the clock.",
        "implementation": "// State encoding\n  localparam STATE_A = 2'b00;\n  localparam STATE_B = 2'b01;\n  localparam STATE_C = 2'b10;\n  localparam STATE_D = 2'b11;\n\n  // State register\n  reg [1:0] current_state, next_state;\n\n  // State flip-flops with synchronous reset\n  always @(posedge clk) begin\n    if (!resetn)\n      current_state <= STATE_A; // Reset to state A\n    else\n      current_state <= next_state; // Transition to next state\n  end"
    },
    {
        "id": "4",
        "content": "Implement the state transition logic based on the input signals r[2:0] and current state.",
        "source": "The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1.",
        "implementation": "// State encoding\n  localparam STATE_A = 2'b00;\n  localparam STATE_B = 2'b01;\n  localparam STATE_C = 2'b10;\n  localparam STATE_D = 2'b11;\n\n  reg [1:0] current_state, next_state;\n\n  // State transition logic\n  always @(*) begin\n    case (current_state)\n      STATE_A: begin\n        if (r[0])\n          next_state = STATE_B;\n        else if (r[1])\n          next_state = STATE_C;\n        else if (r[2])\n          next_state = STATE_D;\n        else\n          next_state = STATE_A;\n      end\n      STATE_B: begin\n        if (r[0])\n          next_state = STATE_B;\n        else\n          next_state = STATE_A;\n      end\n      STATE_C: begin\n        if (r[1])\n          next_state = STATE_C;\n        else\n          next_state = STATE_A;\n      end\n      STATE_D: begin\n        next_state = STATE_A;\n      end\n      default: next_state = STATE_A;\n    endcase\n  end"
    },
    {
        "id": "5",
        "content": "Implement the output logic for g[2:0] based on the current state.",
        "source": "Each _g[i]_ is an output from the FSM. There is a priority system, in that device 0 has a higher priority than device 1, and device 2 has the lowest priority.",
        "implementation": "reg [2:0] g;\n\nalways @(*) begin\n    case (current_state)\n        B: g = 3'b001; // g0 = 1\n        C: g = 3'b010; // g1 = 1\n        default: g = 3'b000; // No grants in state A or D\n    endcase\nend"
    }
]