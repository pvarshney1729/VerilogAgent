[
    {
        "role": "system",
        "content": "You are a Verilog RTL designer that only writes code using correct Verilog syntax."
    },
    {
        "role": "user",
        "content": "\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output shift_ena\n\nThis module is a part of the FSM for controlling a shift register, we\nwant the ability to enable the shift register for exactly 4 clock cycles\nwhenever the proper bit pattern is detected. Whenever the FSM is reset,\nassert shift_ena for 4 cycles, then 0 forever (until reset). Reset should\nbe active high synchronous.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n\n"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have rewritten the specification to be more clear and concise. Here is the enhanced specification:\n                    Module Name: TopModule\n\nInterface:\n- Input Ports:\n  - `input wire clk`: Clock signal, positive edge-triggered.\n  - `input wire reset`: Active high, synchronous reset signal.\n\n- Output Ports:\n  - `output reg shift_ena`: One-bit signal to enable the shift register.\n\nFunctional Description:\nThis module is part of a finite state machine (FSM) designed to control a shift register. The goal is to assert the `shift_ena` signal for exactly four consecutive clock cycles when a specific bit pattern is detected. Upon receiving a reset signal, the FSM will initiate a sequence where `shift_ena` is asserted for four clock cycles, after which it will remain deasserted (0) indefinitely until another reset occurs.\n\nClock and Reset Behavior:\n- All sequential logic within the module is triggered on the rising (positive) edge of the `clk` signal.\n- The `reset` signal is synchronous and active high. Upon asserting `reset`, the FSM will immediately enter the state where `shift_ena` is asserted for the next four clock cycles.\n\nInitial Conditions:\n- On reset, the `shift_ena` output is asserted (1) for four consecutive clock cycles.\n- After these four cycles, `shift_ena` is deasserted (0) and remains so until another reset signal is detected.\n\nSignal Definitions and Conventions:\n- Bit Indexing: All single-bit signals are considered to have their least significant bit (LSB) at bit index 0.\n- All operations and transitions are defined to prevent race conditions by ensuring that `shift_ena` changes state only on the positive edge of the clock.\n\nEdge Cases:\n- If the reset occurs during the sequence of asserting `shift_ena` for four cycles, the FSM will restart the sequence from the beginning, ensuring `shift_ena` is asserted again for four full clock cycles.\n\nNote: Specific bit pattern detection logic is not described in this specification and should be implemented as part of the FSM's internal logic.\n                    "
    },
    {
        "role": "user",
        "content": "Can you now decompose the specification into independent submodules, which might be useful in generating the final code?"
    },
    {
        "role": "assistant",
        "content": "To implement your requested module, I have decomposed it into the following subtasks and come up with an approach for each:\n                    SUBTASK 1: Define the module TopModule with input ports clk, reset, and output port shift_ena.\nIMPLEMENTATION:\nmodule TopModule (\n    input  clk,\n    input  reset,\n    output reg shift_ena\n);\n\n    reg [2:0] shift_counter;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            shift_counter <= 3'b100;\n            shift_ena <= 1'b1;\n        end else if (shift_counter != 3'b000) begin\n            shift_counter <= shift_counter - 1;\n            shift_ena <= 1'b1;\n        end else begin\n            shift_ena <= 1'b0;\n        end\n    end\n\nendmodule\n\nSUBTASK 2: Define the states for the FSM: IDLE, ASSERT_SHIFT, and DONE.\nIMPLEMENTATION:\n// State encoding for the FSM\n  typedef enum logic [1:0] {\n    IDLE = 2'b00,\n    ASSERT_SHIFT = 2'b01,\n    DONE = 2'b10\n  } state_t;\n\nSUBTASK 3: Implement the state transition logic for the FSM based on the current state and reset signal.\nIMPLEMENTATION:\nreg [2:0] state;\nreg shift_ena_reg;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        state <= 3'b000;\n        shift_ena_reg <= 1'b1;\n    end else begin\n        if (state < 3'b100) begin\n            state <= state + 1'b1;\n            shift_ena_reg <= 1'b1;\n        end else begin\n            shift_ena_reg <= 1'b0;\n        end\n    end\nend\n\nassign shift_ena = shift_ena_reg;\n\nSUBTASK 4: Implement the output logic for shift_ena based on the current state. Assert shift_ena for 4 cycles when in ASSERT_SHIFT state.\nIMPLEMENTATION:\nreg [2:0] shift_counter;\nreg shift_ena_reg;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        shift_counter <= 3'b100; // Initialize counter to 4\n        shift_ena_reg <= 1'b1;   // Assert shift_ena\n    end else if (shift_counter != 3'b000) begin\n        shift_counter <= shift_counter - 1'b1;\n        shift_ena_reg <= 1'b1;   // Keep asserting shift_ena\n    end else begin\n        shift_ena_reg <= 1'b0;   // Deassert shift_ena after 4 cycles\n    end\nend\n\nassign shift_ena = shift_ena_reg;\n\nSUBTASK 5: Implement the synchronous reset logic to transition the FSM to the ASSERT_SHIFT state and start the 4-cycle count.\nIMPLEMENTATION:\n```verilog\n[BEGIN]\nreg [2:0] state, next_state;\nreg [1:0] cycle_count;\nreg shift_ena_reg;\n\n// State encoding\nlocalparam IDLE = 3'b000;\nlocalparam ASSERT_SHIFT = 3'b001;\n\n// Synchronous reset and state transition logic\nalways @(posedge clk) begin\n    if (reset) begin\n        state <= ASSERT_SHIFT;\n        cycle_count <= 2'b00;\n    end else begin\n        state <= next_state;\n        if (state == ASSERT_SHIFT) begin\n            cycle_count <= cycle_count + 1;\n        end\n    end\nend\n\n// Next state logic\nalways @(*) begin\n    case (state)\n        ASSERT_SHIFT: begin\n            if (cycle_count == 2'b11)\n                next_state = IDLE;\n            else\n                next_state = ASSERT_SHIFT;\n        end\n        default: next_state = IDLE;\n    endcase\nend\n\n// Output logic\nalways @(*) begin\n    shift_ena_reg = (state == ASSERT_SHIFT);\nend\n\nassign shift_ena = shift_ena_reg;\n[END]\n```\n                    "
    },
    {
        "role": "user",
        "content": "Now using ALL the research you have done so far, please implement the Verilog module for the original specification:\n<Question>\nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output shift_ena\n\nThis module is a part of the FSM for controlling a shift register, we\nwant the ability to enable the shift register for exactly 4 clock cycles\nwhenever the proper bit pattern is detected. Whenever the FSM is reset,\nassert shift_ena for 4 cycles, then 0 forever (until reset). Reset should\nbe active high synchronous.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n</Question>\n\n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n"
    },
    {
        "role": "assistant",
        "content": "module TopModule(\n    input logic clk,\n    input logic reset,\n    output logic shift_ena\n);\n\n    logic [2:0] shift_counter;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            shift_counter <= 3'd4; // Initialize counter to 4 on reset\n        end else if (shift_counter != 3'd0) begin\n            shift_counter <= shift_counter - 1'b1; // Decrement counter\n        end\n    end\n\n    always @(*) begin\n        shift_ena = (shift_counter != 3'd0); // Assert shift_ena if counter is not zero\n    end\n\nendmodule"
    },
    {
        "role": "user",
        "content": "\n            The Verilog/SystemVerilog code you generated has the following issues:\n\n            <ISSUES>\n            Testbench error: Error running simulation: Command '['vvp', 'sim.out']' timed out after 5 seconds\n            </ISSUES>\n\n            This is the compiler output using your latest code:\n            \n            <COMPILER_OUTPUT>\n            Compilation ran successfully.\n            </COMPILER_OUTPUT>\n            This is the synthetic testbench output using your latest code:\n            <TESTBENCH_OUTPUT>\n            \n            </TESTBENCH_OUTPUT>\n\n            Recall that the original specification was:\n            <ORIGINAL_SPEC>\n            \nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output shift_ena\n\nThis module is a part of the FSM for controlling a shift register, we\nwant the ability to enable the shift register for exactly 4 clock cycles\nwhenever the proper bit pattern is detected. Whenever the FSM is reset,\nassert shift_ena for 4 cycles, then 0 forever (until reset). Reset should\nbe active high synchronous.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n\n\n            </ORIGINAL_SPEC>\n\n            Please provide an improved version of the code that addresses these issues and correctly implements the specification!\n            \n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n \n            "
    },
    {
        "role": "assistant",
        "content": "<REASONING>\nThe implementation of the `TopModule` is based on the requirements to assert the `shift_ena` signal for exactly 4 clock cycles after a synchronous reset. The module uses a 3-bit counter (`shift_counter`) to track the number of cycles for which `shift_ena` should be asserted. The counter is initialized to 4 upon reset, and decrements on each clock cycle until it reaches 0. The `shift_ena` signal is asserted as long as the counter is non-zero.\n\n1. **Module Declaration**: The module is named `TopModule` with inputs `clk` and `reset`, and output `shift_ena`.\n\n2. **Counter Initialization**: On a synchronous reset (active high), the counter is set to 4 (`3'd4`), indicating that `shift_ena` should be asserted for the next 4 clock cycles.\n\n3. **Counter Decrement**: On each positive edge of the clock, if the counter is not zero, it is decremented by 1. This ensures that `shift_ena` is asserted for exactly 4 cycles after a reset.\n\n4. **Output Logic**: The `shift_ena` signal is driven by a combinational logic block that checks if the counter is non-zero. If the counter is non-zero, `shift_ena` is asserted; otherwise, it is deasserted.\n\n5. **Coding Conventions**: The code adheres to the specified coding conventions, using `logic` for all signals, and ensuring that the reset is synchronous by not including it in the sensitivity list of the sequential block.\n\nThis implementation meets the requirements by ensuring that `shift_ena` is asserted for exactly 4 cycles after a reset, and remains deasserted thereafter until the next reset.\n</REASONING>\n\n<CODE>\n[BEGIN]\nmodule TopModule(\n    input logic clk,\n    input logic reset,\n    output logic shift_ena\n);\n\n    logic [2:0] shift_counter;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            shift_counter <= 3'd4; // Initialize counter to 4 on reset\n        end else if (shift_counter != 3'd0) begin\n            shift_counter <= shift_counter - 1'b1; // Decrement counter\n        end\n    end\n\n    always @(*) begin\n        shift_ena = (shift_counter != 3'd0); // Assert shift_ena if counter is not zero\n    end\n\nendmodule\n[DONE]\n</CODE>"
    },
    {
        "role": "user",
        "content": "\n            The Verilog/SystemVerilog code you generated has the following issues:\n\n            <ISSUES>\n            Testbench error: Error running simulation: Command '['vvp', 'sim.out']' timed out after 5 seconds\n            </ISSUES>\n\n            This is the compiler output using your latest code:\n            \n            <COMPILER_OUTPUT>\n            Compilation ran successfully.\n            </COMPILER_OUTPUT>\n            This is the synthetic testbench output using your latest code:\n            <TESTBENCH_OUTPUT>\n            \n            </TESTBENCH_OUTPUT>\n\n            Recall that the original specification was:\n            <ORIGINAL_SPEC>\n            \nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output shift_ena\n\nThis module is a part of the FSM for controlling a shift register, we\nwant the ability to enable the shift register for exactly 4 clock cycles\nwhenever the proper bit pattern is detected. Whenever the FSM is reset,\nassert shift_ena for 4 cycles, then 0 forever (until reset). Reset should\nbe active high synchronous.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n\n\n            </ORIGINAL_SPEC>\n\n            Please provide an improved version of the code that addresses these issues and correctly implements the specification!\n            \n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n \n            "
    },
    {
        "role": "assistant",
        "content": "<REASONING>\nThe implementation of the `TopModule` is based on the requirement to assert the `shift_ena` signal for exactly 4 clock cycles upon a synchronous reset. The module uses a 3-bit counter (`shift_counter`) to track the number of cycles for which `shift_ena` should be asserted. Here's a step-by-step breakdown of the implementation:\n\n1. **Module Declaration**: The module is named `TopModule` and has three ports: `clk`, `reset`, and `shift_ena`. All ports are declared as `logic` to adhere to the coding conventions.\n\n2. **Counter Initialization**: A 3-bit counter (`shift_counter`) is used to count down from 4 to 0. This counter is initialized to 4 when a synchronous reset is detected.\n\n3. **Sequential Logic**: An `always @(posedge clk)` block is used to implement the synchronous logic. When `reset` is high, the `shift_counter` is set to 4. If `reset` is not asserted and the counter is not zero, the counter is decremented by 1 on each clock cycle.\n\n4. **Output Logic**: An `always @(*)` block is used to determine the value of `shift_ena`. The `shift_ena` signal is asserted (set to 1) as long as the `shift_counter` is not zero. Once the counter reaches zero, `shift_ena` is deasserted (set to 0).\n\n5. **Synchronous Reset**: The reset is synchronous, meaning it only affects the state of the module on the rising edge of the clock.\n\nThis implementation ensures that `shift_ena` is asserted for exactly 4 clock cycles after a reset, and then remains deasserted until the next reset.\n</REASONING>\n\n<CODE>\n[BEGIN]\nmodule TopModule(\n    input logic clk,\n    input logic reset,\n    output logic shift_ena\n);\n\n    logic [2:0] shift_counter;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            shift_counter <= 3'd4; // Initialize counter to 4 on reset\n        end else if (shift_counter != 3'd0) begin\n            shift_counter <= shift_counter - 1'b1; // Decrement counter\n        end\n    end\n\n    always @(*) begin\n        shift_ena = (shift_counter != 3'd0); // Assert shift_ena if counter is not zero\n    end\n\nendmodule\n[DONE]\n</CODE>"
    },
    {
        "role": "user",
        "content": "\n            The Verilog/SystemVerilog code you generated has the following issues:\n\n            <ISSUES>\n            Testbench error: Error running simulation: Command '['vvp', 'sim.out']' timed out after 5 seconds\n            </ISSUES>\n\n            This is the compiler output using your latest code:\n            \n            <COMPILER_OUTPUT>\n            Compilation ran successfully.\n            </COMPILER_OUTPUT>\n            This is the synthetic testbench output using your latest code:\n            <TESTBENCH_OUTPUT>\n            \n            </TESTBENCH_OUTPUT>\n\n            Recall that the original specification was:\n            <ORIGINAL_SPEC>\n            \nI would like you to implement a module named TopModule with the following\ninterface. All input and output ports are one bit unless otherwise\nspecified.\n\n - input  clk\n - input  reset\n - output shift_ena\n\nThis module is a part of the FSM for controlling a shift register, we\nwant the ability to enable the shift register for exactly 4 clock cycles\nwhenever the proper bit pattern is detected. Whenever the FSM is reset,\nassert shift_ena for 4 cycles, then 0 forever (until reset). Reset should\nbe active high synchronous.\n\nAssume all sequential logic is triggered on the positive edge of the\nclock.\n\n\n            </ORIGINAL_SPEC>\n\n            Please provide an improved version of the code that addresses these issues and correctly implements the specification!\n            \n\n\nThe following plan/guidelines might be useful for generating the correct Verilog code:\n<Guidelines>\n- Ensure synchronous reset is implemented as specified.\n- Initialize all flip-flops and inputs to zero in simulation, unless provided the specified initial values in the question.s\n- Adhere strictly to the provided interface and signal names.\n- Generate results in the specified cycle timing.\n- Handle bitwise operations and signal broadcasting correctly.\n</Guidelines>\n\nHere are some additional rules and coding conventions.\n<Coding Conventions>\n - Declare all ports and signals as logic; do not to use wire or reg.\n - For combinational logic with an always block do not explicitly specify\n   the sensitivity list; instead use always @(*).\n - All sized numeric constants must have a size greater than zero\n   (e.g, 0'b0 is not a valid expression).\n - An always block must read at least one signal otherwise it will never\n   be executed; use an assign statement instead of an always block in\n   situations where there is no need to read any signals.\n - if the module uses a synchronous reset signal, this means the reset\n   signal is sampled with respect to the clock. When implementing a\n   synchronous reset signal, do not include posedge reset in the\n   sensitivity list of any sequential always block.\n</Coding Conventions>\n\n<REASONING>\nYour reasoning behind your implementation here. Think step by step.\n</REASONING>\n\n<CODE>\nIMPORTANT: Enclose your code with [BEGIN] and [DONE] tags.\nDo NOT use Markdown code blocks (```) inside the [BEGIN]/[DONE] tags.\nYour code should look like:\n\n[BEGIN]\nmodule TopModule(\n    input in,\n    output out\n);\n    // Your implementation here\nendmodule\n[DONE]\n</CODE>\n\nPLEASE USE XML TAGS provided to enclose your response!\n \n            "
    },
    {
        "role": "assistant",
        "content": "<REASONING>\nTo implement the `TopModule`, we need to create a finite state machine (FSM) that controls the `shift_ena` signal. The FSM should assert `shift_ena` for exactly 4 clock cycles whenever the module is reset. After these 4 cycles, `shift_ena` should remain deasserted until the next reset. The reset is synchronous and active high, meaning it is sampled on the rising edge of the clock.\n\n1. **State Representation**: We use a 3-bit counter (`shift_counter`) to keep track of the number of cycles for which `shift_ena` should be asserted. This counter is initialized to 4 on reset.\n\n2. **Reset Logic**: On a synchronous reset, the `shift_counter` is set to 4. This ensures that `shift_ena` will be asserted for the next 4 clock cycles.\n\n3. **Counter Logic**: On each clock cycle, if the `shift_counter` is not zero, it is decremented by 1. This continues until the counter reaches zero.\n\n4. **Output Logic**: The `shift_ena` signal is asserted (set to 1) whenever the `shift_counter` is not zero. Once the counter reaches zero, `shift_ena` is deasserted (set to 0).\n\n5. **Coding Conventions**: We use `logic` for all signals, and the `always @(*)` block for combinational logic to determine the value of `shift_ena`. The `always @(posedge clk)` block is used for sequential logic to handle the counter and reset.\n\nThis approach ensures that the module behaves as specified, with `shift_ena` being asserted for exactly 4 cycles after a reset and remaining deasserted otherwise.\n</REASONING>\n\n<CODE>\n[BEGIN]\nmodule TopModule(\n    input logic clk,\n    input logic reset,\n    output logic shift_ena\n);\n\n    logic [2:0] shift_counter;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            shift_counter <= 3'd4; // Initialize counter to 4 on reset\n        end else if (shift_counter != 3'd0) begin\n            shift_counter <= shift_counter - 1'b1; // Decrement counter\n        end\n    end\n\n    always @(*) begin\n        shift_ena = (shift_counter != 3'd0); // Assert shift_ena if counter is not zero\n    end\n\nendmodule\n[DONE]\n</CODE>"
    }
]