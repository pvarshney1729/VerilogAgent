{
    "code": "module TopModule (\n    input logic clk,                            // Clock signal\n    input logic areset,                         // Asynchronous reset, active high\n    input logic predict_valid,                  // Prediction request valid signal\n    input logic [6:0] predict_pc,               // 7-bit program counter for prediction\n    output logic predict_taken,                  // Predicted branch direction (1-bit)\n    output logic [6:0] predict_history,          // Branch history register (7-bit)\n    input logic train_valid,                    // Training request valid signal\n    input logic train_taken,                    // Actual branch outcome (1-bit)\n    input logic train_mispredicted,             // Indicator of branch misprediction (1-bit)\n    input logic [6:0] train_history,            // Branch history value during training (7-bit)\n    input logic [6:0] train_pc                  // 7-bit program counter for training\n);\n\n    logic [6:0] bhr;                            // Global Branch History Register\n    logic [1:0] pht [127:0];                    // Pattern History Table (128 entries of 2-bit counters)\n    logic [6:0] index;                          // Index for PHT\n\n    // Initialize registers on reset\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            bhr <= 7'b0000000;                  // Reset BHR to 0\n            for (int i = 0; i < 128; i++) begin\n                pht[i] <= 2'b01;                // Initialize PHT counters to 01\n            end\n        end else begin\n            if (train_valid) begin\n                index <= train_pc ^ train_history; // Calculate index for training\n                if (train_taken) begin\n                    if (pht[index] < 2'b11) begin\n                        pht[index] <= pht[index] + 1; // Increment counter\n                    end\n                end else begin\n                    if (pht[index] > 2'b00) begin\n                        pht[index] <= pht[index] - 1; // Decrement counter\n                    end\n                end\n                if (train_mispredicted) begin\n                    bhr <= train_history;           // Recover BHR on misprediction\n                end\n            end\n            \n            if (predict_valid) begin\n                index <= predict_pc ^ bhr;       // Calculate index for prediction\n                predict_taken <= (pht[index] == 2'b10 || pht[index] == 2'b11); // Determine prediction\n                predict_history <= bhr;           // Update predict_history with current BHR\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 593,
        "passfail": "R"
    },
    "iterations_used": 1
}