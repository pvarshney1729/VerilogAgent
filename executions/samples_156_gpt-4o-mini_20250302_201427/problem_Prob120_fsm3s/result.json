{
    "code": "module TopModule (\n    input logic clk,      // Clock signal, positive edge-triggered\n    input logic reset,    // Synchronous active high reset\n    input logic in,       // 1-bit input signal\n    output logic out      // 1-bit output signal\n);\n\n// State encoding\nlocalparam logic [1:0] STATE_A = 2'b00, \n                       STATE_B = 2'b01, \n                       STATE_C = 2'b10, \n                       STATE_D = 2'b11;\n\nlogic [1:0] current_state, next_state;\n\n// State transition and output logic\nalways @(posedge clk) begin\n    if (reset) begin\n        current_state <= STATE_A;\n        out <= 0;\n    end else begin\n        current_state <= next_state;\n    end\nend\n\nalways @(*) begin\n    case (current_state)\n        STATE_A: begin\n            next_state = (in) ? STATE_B : STATE_A;\n            out = 0;\n        end\n        STATE_B: begin\n            next_state = (in) ? STATE_B : STATE_C;\n            out = 0;\n        end\n        STATE_C: begin\n            next_state = (in) ? STATE_D : STATE_A;\n            out = 0;\n        end\n        STATE_D: begin\n            next_state = (in) ? STATE_B : STATE_C;\n            out = 1;\n        end\n        default: begin\n            next_state = STATE_A;\n            out = 0;\n        end\n    endcase\nend\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "."
    },
    "iterations_used": 1
}