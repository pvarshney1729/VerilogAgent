{
    "code": "module fsm_receiver (\n    input logic clk,\n    input logic reset,\n    input logic [7:0] in,\n    output logic [23:0] out_bytes,\n    output logic done\n);\n\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        BYTE1 = 2'b01,\n        BYTE2 = 2'b10,\n        BYTE3 = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [23:0] message;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            done <= 1'b0;\n            message <= 24'b0; // Undefined state\n        end else begin\n            current_state <= next_state;\n            if (current_state == BYTE3) begin\n                done <= 1'b1;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            next_state <= IDLE;\n            message <= 24'b0; // Undefined state\n        end else begin\n            case (current_state)\n                IDLE: begin\n                    if (in[3]) begin\n                        next_state <= BYTE1;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                BYTE1: begin\n                    message[23:16] <= in;\n                    next_state <= BYTE2;\n                end\n                BYTE2: begin\n                    message[15:8] <= in;\n                    next_state <= BYTE3;\n                end\n                BYTE3: begin\n                    message[7:0] <= in;\n                    out_bytes <= message;\n                    next_state <= IDLE;\n                end\n                default: next_state <= IDLE;\n            endcase\n        end\n    end\n\n    assign out_bytes = message;\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    },
    "iterations_used": 3
}