{
    "code": "module TopModule (\n    input logic clk,            // Clock input, positive edge-triggered\n    input logic reset,          // Active-high synchronous reset\n    input logic in,             // Serial input bit stream\n    output logic done           // Active-high output, indicates byte received correctly\n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        RECEIVE,\n        VERIFY_STOP,\n        ERROR\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [7:0] data;           // To store received data\n    logic [2:0] bit_count;      // To count received bits\n\n    // State transition logic\n    always @(*) begin\n        next_state = current_state; // Default to hold current state\n        case (current_state)\n            IDLE: begin\n                if (in == 1'b0) begin // Start bit detected\n                    next_state = RECEIVE;\n                end\n            end\n            RECEIVE: begin\n                if (bit_count == 3'b111) begin // 8 bits received\n                    next_state = VERIFY_STOP;\n                end\n            end\n            VERIFY_STOP: begin\n                if (in == 1'b1) begin // Stop bit correct\n                    next_state = IDLE;\n                end else begin // Stop bit incorrect\n                    next_state = ERROR;\n                end\n            end\n            ERROR: begin\n                if (in == 1'b1) begin // Correct stop bit detected\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\n    // State register with synchronous reset\n    always @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            done <= 1'b0;\n            bit_count <= 3'b000;\n        end else begin\n            current_state <= next_state;\n            if (current_state == IDLE && next_state == RECEIVE) begin\n                bit_count <= 3'b000; // Reset bit count on start\n            end else if (current_state == RECEIVE) begin\n                bit_count <= bit_count + 1; // Increment bit count\n            end else if (current_state == VERIFY_STOP && next_state == IDLE) begin\n                done <= 1'b1; // Set done signal\n            end else begin\n                done <= 1'b0; // Reset done signal\n            end\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 196,
        "passfail": "R"
    },
    "iterations_used": 1
}