{
    "code": "module TopModule (\n    input  logic clk,           \n    input  logic reset,         \n    input  logic data,          \n    input  logic done_counting, \n    input  logic ack,           \n    output logic shift_ena,     \n    output logic counting,       \n    output logic done            \n);\n\n    typedef enum logic [1:0] {\n        IDLE,\n        SHIFT,\n        COUNT,\n        DONE\n    } state_t;\n\n    state_t current_state, next_state;\n    logic [3:0] pattern_buffer;\n    logic [1:0] shift_count;\n\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n            shift_ena <= 1'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n            pattern_buffer <= 4'b0;\n            shift_count <= 2'b0;\n        end else begin\n            current_state <= next_state;\n            if (current_state == SHIFT) begin\n                shift_ena <= 1'b1;\n                shift_count <= shift_count + 1;\n            end else if (shift_count == 2'b11) begin\n                shift_ena <= 1'b0;\n                counting <= 1'b1;\n            end else if (counting && done_counting) begin\n                counting <= 1'b0;\n                done <= 1'b1;\n            end else if (done && ack) begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (pattern_buffer == 4'b1101) begin\n                    next_state = SHIFT;\n                    pattern_buffer <= {pattern_buffer[2:0], data};\n                end else begin\n                    pattern_buffer <= {pattern_buffer[2:0], data};\n                end\n            end\n            SHIFT: begin\n                if (shift_count == 2'b11) begin\n                    next_state = COUNT;\n                end\n            end\n            COUNT: begin\n                if (done_counting) begin\n                    next_state = DONE;\n                end\n            end\n            DONE: begin\n                if (ack) begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 4152,
        "passfail": "R"
    },
    "iterations_used": 1
}