{
    "code": "module TopModule (\n    input logic clk,\n    input logic load,\n    input logic [255:0] data,\n    output logic [255:0] q\n);\n\n    logic [255:0] current_state, next_state;\n\n    // Load initial state\n    always @(posedge clk) begin\n        if (load) begin\n            current_state <= data;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Calculate next state based on current state\n    always @(*) begin\n        next_state = 256'b0; // Initialize next_state to zero\n        for (int i = 0; i < 16; i++) begin\n            for (int j = 0; j < 16; j++) begin\n                int alive_neighbors = 0;\n                // Count alive neighbors with wrapping\n                for (int di = -1; di <= 1; di++) begin\n                    for (int dj = -1; dj <= 1; dj++) begin\n                        if (di == 0 && dj == 0) continue; // Skip the cell itself\n                        int ni = (i + di + 16) % 16; // Wrap around row\n                        int nj = (j + dj + 16) % 16; // Wrap around column\n                        alive_neighbors += current_state[ni * 16 + nj];\n                    end\n                end\n                // Determine next state based on the number of alive neighbors\n                if (current_state[i * 16 + j] == 1'b1) begin\n                    if (alive_neighbors < 2 || alive_neighbors > 3) begin\n                        next_state[i * 16 + j] = 1'b0; // Cell dies\n                    end else begin\n                        next_state[i * 16 + j] = 1'b1; // Cell stays alive\n                    end\n                end else begin\n                    if (alive_neighbors == 3) begin\n                        next_state[i * 16 + j] = 1'b1; // Cell becomes alive\n                    end\n                end\n            end\n        end\n    end\n\n    assign q = current_state; // Output current state\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "S"
    }
}