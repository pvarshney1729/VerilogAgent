{
    "code": "module TopModule (\n    input logic clk,\n    input logic aresetn,\n    input logic x,\n    output logic z\n);\n\n    typedef enum logic [1:0] {\n        S0 = 2'b00, // Initial state\n        S1 = 2'b01, // State after '1'\n        S2 = 2'b10  // State after '10'\n    } state_t;\n\n    state_t current_state, next_state;\n    \n    // Output logic\n    always @(*) begin\n        z = 1'b0; // Default output\n        case (current_state)\n            S2: if (x) z = 1'b1; // Output high if in S2 and x is 1 (sequence \"101\" detected)\n            default: z = 1'b0;\n        endcase\n    end\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            S0: next_state = (x) ? S1 : S0; // Move to S1 on '1', stay on '0'\n            S1: next_state = (x) ? S1 : S2; // Stay on '1' or move to S2 on '0'\n            S2: next_state = (x) ? S1 : S0; // Move to S1 on '1', go back to S0 on '0'\n            default: next_state = S0; // Default case\n        endcase\n    end\n\n    // State register with asynchronous reset\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresetn) begin\n            current_state <= S0; // Reset to initial state\n        end else begin\n            current_state <= next_state; // Update state\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}