{
    "code": "module TopModule (\n    input logic d,\n    input logic done_counting,\n    input logic ack,\n    input logic [9:0] state,\n    output logic B3_next,\n    output logic S_next,\n    output logic S1_next,\n    output logic Count_next,\n    output logic Wait_next,\n    output logic done,\n    output logic counting,\n    output logic shift_ena\n);\n\n    // State encoding using one-hot\n    localparam logic [9:0] S     = 10'b0000000001;\n    localparam logic [9:0] S1    = 10'b0000000010;\n    localparam logic [9:0] S11   = 10'b0000000100;\n    localparam logic [9:0] S110  = 10'b0000001000;\n    localparam logic [9:0] B0    = 10'b0000010000;\n    localparam logic [9:0] B1    = 10'b0000100000;\n    localparam logic [9:0] B2    = 10'b0001000000;\n    localparam logic [9:0] B3    = 10'b0010000000;\n    localparam logic [9:0] Count = 10'b0100000000;\n    localparam logic [9:0] Wait  = 10'b1000000000;\n\n    // Next state logic\n    always @(*) begin\n        // Default next state signals\n        S_next = 1'b0;\n        S1_next = 1'b0;\n        B3_next = 1'b0;\n        Count_next = 1'b0;\n        Wait_next = 1'b0;\n\n        case (state)\n            S: begin\n                if (d) S1_next = 1'b1;\n                else S_next = 1'b1;\n            end\n            S1: begin\n                if (d) S1_next = 1'b1;\n                else S_next = 1'b1;\n            end\n            S11: begin\n                if (d) S11_next = 1'b1;\n                else S110_next = 1'b1;\n            end\n            S110: begin\n                if (d) B0_next = 1'b1;\n                else S_next = 1'b1;\n            end\n            B0: B1_next = 1'b1;\n            B1: B2_next = 1'b1;\n            B2: B3_next = 1'b1;\n            B3: Count_next = 1'b1;\n            Count: begin\n                if (done_counting) Wait_next = 1'b1;\n                else Count_next = 1'b1;\n            end\n            Wait: begin\n                if (ack) S_next = 1'b1;\n                else Wait_next = 1'b1;\n            end\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        // Default output signals\n        shift_ena = 1'b0;\n        counting = 1'b0;\n        done = 1'b0;\n\n        case (state)\n            B0, B1, B2, B3: shift_ena = 1'b1;\n            Count: counting = 1'b1;\n            Wait: done = 1'b1;\n        endcase\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "C"
    }
}