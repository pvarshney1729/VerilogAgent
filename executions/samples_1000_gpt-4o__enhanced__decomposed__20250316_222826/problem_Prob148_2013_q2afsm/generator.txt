Generated Response:

<REASONING>
To implement the FSM described in the question, we will follow these steps:

1. **Define the Module Interface**: We will define the module `TopModule` with the specified inputs and outputs. The inputs are `clk`, `resetn`, and a 3-bit vector `r`. The output is a 3-bit vector `g`.

2. **State Encoding**: We will use a 2-bit encoding for the states. The states are:
   - `STATE_A` (2'b00): Initial state, no grants.
   - `STATE_B` (2'b01): Grant to device 0 (`g[0] = 1`).
   - `STATE_C` (2'b10): Grant to device 1 (`g[1] = 1`).
   - `STATE_D` (2'b11): Grant to device 2 (`g[2] = 1`).

3. **State Register**: We will use a sequential always block to update the state register on the positive edge of the clock. The reset is synchronous, so we will check for `resetn` within the clocked block.

4. **Next State Logic**: We will use a combinational always block to determine the next state based on the current state and the input vector `r`. The priority is given to `r[0]`, then `r[1]`, and finally `r[2]`.

5. **Output Logic**: We will use a combinational always block to set the output vector `g` based on the current state.

6. **Coding Conventions**: We will adhere to the coding conventions provided, using `logic` for all signals and ensuring proper use of always blocks and assignments.

By following these steps, we will implement the FSM as specified.
</REASONING>

<CODE>
[BEGIN]
module TopModule(
    input logic clk,
    input logic resetn,
    input logic [2:0] r,
    output logic [2:0] g
);

    // State encoding
    typedef enum logic [1:0] {
        STATE_A = 2'b00,
        STATE_B = 2'b01,
        STATE_C = 2'b10,
        STATE_D = 2'b11
    } state_t;

    state_t current_state, next_state;

    // State register with synchronous reset
    always @(posedge clk) begin
        if (!resetn)
            current_state <= STATE_A;
        else
            current_state <= next_state;
    end

    // Next state logic
    always @(*) begin
        case (current_state)
            STATE_A: begin
                if (r[0])
                    next_state = STATE_B;
                else if (r[1])
                    next_state = STATE_C;
                else if (r[2])
                    next_state = STATE_D;
                else
                    next_state = STATE_A;
            end
            STATE_B: begin
                if (r[0])
                    next_state = STATE_B;
                else
                    next_state = STATE_A;
            end
            STATE_C: begin
                if (r[1])
                    next_state = STATE_C;
                else
                    next_state = STATE_A;
            end
            STATE_D: begin
                if (r[2])
                    next_state = STATE_D;
                else
                    next_state = STATE_A;
            end
            default: next_state = STATE_A;
        endcase
    end

    // Output logic
    always @(*) begin
        g = 3'b000; // Default output
        case (current_state)
            STATE_B: g[0] = 1;
            STATE_C: g[1] = 1;
            STATE_D: g[2] = 1;
            default: g = 3'b000;
        endcase
    end

endmodule
[DONE]
</CODE>

Generated Code:

module TopModule(
    input logic clk,
    input logic resetn,
    input logic [2:0] r,
    output logic [2:0] g
);

    // State encoding
    typedef enum logic [1:0] {
        STATE_A = 2'b00,
        STATE_B = 2'b01,
        STATE_C = 2'b10,
        STATE_D = 2'b11
    } state_t;

    state_t current_state, next_state;

    // State register with synchronous reset
    always @(posedge clk) begin
        if (!resetn)
            current_state <= STATE_A;
        else
            current_state <= next_state;
    end

    // Next state logic
    always @(*) begin
        case (current_state)
            STATE_A: begin
                if (r[0])
                    next_state = STATE_B;
                else if (r[1])
                    next_state = STATE_C;
                else if (r[2])
                    next_state = STATE_D;
                else
                    next_state = STATE_A;
            end
            STATE_B: begin
                if (r[0])
                    next_state = STATE_B;
                else
                    next_state = STATE_A;
            end
            STATE_C: begin
                if (r[1])
                    next_state = STATE_C;
                else
                    next_state = STATE_A;
            end
            STATE_D: begin
                if (r[2])
                    next_state = STATE_D;
                else
                    next_state = STATE_A;
            end
            default: next_state = STATE_A;
        endcase
    end

    // Output logic
    always @(*) begin
        g = 3'b000; // Default output
        case (current_state)
            STATE_B: g[0] = 1;
            STATE_C: g[1] = 1;
            STATE_D: g[2] = 1;
            default: g = 3'b000;
        endcase
    end

endmodule