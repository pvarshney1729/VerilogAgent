{
    "code": "module TopModule(\n    input logic clk,\n    input logic reset,\n    input logic in,\n    output logic disc,\n    output logic flag,\n    output logic err\n);\n\n    // State encoding\n    typedef enum logic [2:0] {\n        IDLE = 3'b000,\n        ONE_1 = 3'b001,\n        TWO_1 = 3'b010,\n        THREE_1 = 3'b011,\n        FOUR_1 = 3'b100,\n        FIVE_1 = 3'b101,\n        SIX_1 = 3'b110,\n        SEVEN_1 = 3'b111\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // State transition logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always_comb begin\n        case (current_state)\n            IDLE: next_state = in ? ONE_1 : IDLE;\n            ONE_1: next_state = in ? TWO_1 : IDLE;\n            TWO_1: next_state = in ? THREE_1 : IDLE;\n            THREE_1: next_state = in ? FOUR_1 : IDLE;\n            FOUR_1: next_state = in ? FIVE_1 : IDLE;\n            FIVE_1: next_state = in ? SIX_1 : (in == 0 ? IDLE : FIVE_1);\n            SIX_1: next_state = in ? SEVEN_1 : IDLE;\n            SEVEN_1: next_state = in ? SEVEN_1 : IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    always_ff @(posedge clk) begin\n        if (reset) begin\n            disc <= 1'b0;\n            flag <= 1'b0;\n            err <= 1'b0;\n        end else begin\n            case (current_state)\n                FIVE_1: begin\n                    disc <= (in == 0);\n                    flag <= 1'b0;\n                    err <= 1'b0;\n                end\n                SIX_1: begin\n                    disc <= 1'b0;\n                    flag <= (in == 0);\n                    err <= 1'b0;\n                end\n                SEVEN_1: begin\n                    disc <= 1'b0;\n                    flag <= 1'b0;\n                    err <= 1'b1;\n                end\n                default: begin\n                    disc <= 1'b0;\n                    flag <= 1'b0;\n                    err <= 1'b0;\n                end\n            endcase\n        end\n    end\n\nendmodule",
    "test_results": {
        "num_mismatch": 0,
        "passfail": "e"
    }
}